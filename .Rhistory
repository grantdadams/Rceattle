mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
mydata$fleet_control
library(Rceattle)
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
ss_run$quantities$flt_accum_age_upper
ss_run$quantities$flt_accum_age_lower
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
ss_run2 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
plot_biomass(list(ss_run, ss_run2))
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
data_list <- mydata
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
0.60989 * 12
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
# Code to run Bering Sea CEATTLE model in TMB
# Citation:
# Holsman, K. K., Ianelli, J., Aydin, K., Punt, A. E., and Moffitt, E. A. 2015. A comparison of fisheries biological reference points estimated from temperature-specific multi-species and single-species climate-enhanced stock assessment models. Deep-Sea Research Part II: Topical Studies in Oceanography, 134: 360â€“378.
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
mydata$est_M1 <- c(3,3,3) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
params <- build_params(BS2017SS)
data_list <- BS2017SS
debug = FALSE
random_rec = FALSE
# functions
'%!in%' <- function(x,y)!('%in%'(x,y))
# -----------------------------------------------------------
# -- Setup
# Get year objects
nyrs_hind <- data_list$endyr - data_list$styr + 1
nyrs_proj <- data_list$projyr - data_list$styr + 1
yrs_proj <- (nyrs_hind + 1):nyrs_proj
yrs_hind <- 1:nyrs_hind
if(nyrs_hind == nyrs_proj){
yrs_proj = NULL
}
# Convert parameters to map object
map_list <- params
# Set each item in map_list to seperate value
map_list <- sapply(map_list, function(x) replace(x, values = c(1:length(x))))
# -----------------------------------------------------------
# STEP 1: Base population dynamics
# -----------------------------------------------------------
# -- 1.1. Map out future fishing mortality and sex ratio variance
map_list$proj_F_prop <- as.numeric(replace(map_list$proj_F_prop,
values = rep(NA, length(map_list$proj_F_prop))))
map_list$ln_sex_ratio_sigma <- as.numeric(replace(map_list$ln_sex_ratio_sigma,
values = rep(NA, length(map_list$ln_sex_ratio_sigma))))
# -- 1.2. Map out comp weights
map_list$comp_weights <- as.numeric(replace(map_list$comp_weights,
values = rep(NA, length(map_list$comp_weights))))
# -- 1.3. Map out future recruitment deviations
map_list$rec_dev[, yrs_proj] <- as.numeric(replace(map_list$rec_dev[, yrs_proj],
values = rep(NA, length(map_list$rec_dev[, yrs_proj]))))
# -- FSPR mapped out
map_list$ln_Flimit <- replace(map_list$ln_Flimit,
values = rep(NA, length(map_list$ln_Flimit)))
map_list$ln_Ftarget <- replace(map_list$ln_Ftarget,
values = rep(NA, length(map_list$ln_Ftarget)))
# -- 1.4. Map out initial population deviations not to be estimated - map out last age and ages not seen
for(sp in 1:data_list$nspp) {
if((data_list$nages[sp] - 1) < ncol(map_list$init_dev)) {
map_list$init_dev[sp, (data_list$nages[sp]):ncol(map_list$init_dev)] <- NA
}
}
# -- 1.5. Map out natural mortality
M1_ind = 1 # Generic ind for looping
for(sp in 1:data_list$nspp){
# Dim = nspp, nsex (2), nages
# Turn off all
map_list$ln_M1[sp,,] <- NA
# Turn on
# - est_M1 = 1: sex- and age-invariant M1
if(data_list$est_M1[sp] == 1){
map_list$ln_M1[sp,,1:data_list$nages[sp]] <- M1_ind
M1_ind = M1_ind + 1
}
# - est_M1 = 2: sex-specific, age-invariant M1
if(data_list$est_M1[sp] == 2){
if(data_list$nsex[sp] == 1){ # One sex population
map_list$ln_M1[sp,,1:data_list$nages[sp]] <- M1_ind
M1_ind = M1_ind + 1
}
if(data_list$nsex[sp] == 2){ # Two sex population
map_list$ln_M1[sp,1,1:data_list$nages[sp]] <- M1_ind # Females
map_list$ln_M1[sp,2,1:data_list$nages[sp]] <- M1_ind + 1 # Males
M1_ind = M1_ind + 2
}
}
# - est_M1 = 3: sex-specific, age-specific M1
if(data_list$est_M1[sp] == 3){
if(data_list$nsex[sp] == 1){ # One sex population
map_list$ln_M1[sp,,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp])
M1_ind = M1_ind + data_list$nages[sp]
}
if(data_list$nsex[sp] == 2){ # Two sex population
# Females
map_list$ln_M1[sp,1,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp])
M1_ind = M1_ind + data_list$nages[sp]
# Males
map_list$ln_M1[sp,2,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp])
M1_ind = M1_ind + data_list$nages[sp]
}
}
}
data_list$est_M1[sp]
data_list$est_M1 <- rep(3,3)
# -- 1.5. Map out natural mortality
M1_ind = 1 # Generic ind for looping
for(sp in 1:data_list$nspp){
# Dim = nspp, nsex (2), nages
# Turn off all
map_list$ln_M1[sp,,] <- NA
# Turn on
# - est_M1 = 1: sex- and age-invariant M1
if(data_list$est_M1[sp] == 1){
map_list$ln_M1[sp,,1:data_list$nages[sp]] <- M1_ind
M1_ind = M1_ind + 1
}
# - est_M1 = 2: sex-specific, age-invariant M1
if(data_list$est_M1[sp] == 2){
if(data_list$nsex[sp] == 1){ # One sex population
map_list$ln_M1[sp,,1:data_list$nages[sp]] <- M1_ind
M1_ind = M1_ind + 1
}
if(data_list$nsex[sp] == 2){ # Two sex population
map_list$ln_M1[sp,1,1:data_list$nages[sp]] <- M1_ind # Females
map_list$ln_M1[sp,2,1:data_list$nages[sp]] <- M1_ind + 1 # Males
M1_ind = M1_ind + 2
}
}
# - est_M1 = 3: sex-specific, age-specific M1
if(data_list$est_M1[sp] == 3){
if(data_list$nsex[sp] == 1){ # One sex population
map_list$ln_M1[sp,,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp])
M1_ind = M1_ind + data_list$nages[sp]
}
if(data_list$nsex[sp] == 2){ # Two sex population
# Females
map_list$ln_M1[sp,1,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp])
M1_ind = M1_ind + data_list$nages[sp]
# Males
map_list$ln_M1[sp,2,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp])
M1_ind = M1_ind + data_list$nages[sp]
}
}
}
M1_ind: (M1_ind + data_list$nages[sp])
data_list$nages
M1_ind
# -- 1.5. Map out natural mortality
M1_ind = 1 # Generic ind for looping
(M1_ind + data_list$nages[sp] - 1)
M1_ind: (M1_ind + data_list$nages[sp] - 1)
M1_ind: (M1_ind + data_list$nages[sp] - 1)
# -- 1.5. Map out natural mortality
M1_ind = 1 # Generic ind for looping
for(sp in 1:data_list$nspp){
# Dim = nspp, nsex (2), nages
# Turn off all
map_list$ln_M1[sp,,] <- NA
# Turn on
# - est_M1 = 1: sex- and age-invariant M1
if(data_list$est_M1[sp] == 1){
map_list$ln_M1[sp,,1:data_list$nages[sp]] <- M1_ind
M1_ind = M1_ind + 1
}
# - est_M1 = 2: sex-specific, age-invariant M1
if(data_list$est_M1[sp] == 2){
if(data_list$nsex[sp] == 1){ # One sex population
map_list$ln_M1[sp,,1:data_list$nages[sp]] <- M1_ind
M1_ind = M1_ind + 1
}
if(data_list$nsex[sp] == 2){ # Two sex population
map_list$ln_M1[sp,1,1:data_list$nages[sp]] <- M1_ind # Females
map_list$ln_M1[sp,2,1:data_list$nages[sp]] <- M1_ind + 1 # Males
M1_ind = M1_ind + 2
}
}
# - est_M1 = 3: sex-specific, age-specific M1
if(data_list$est_M1[sp] == 3){
if(data_list$nsex[sp] == 1){ # One sex population
map_list$ln_M1[sp,,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp] - 1)
M1_ind = M1_ind + data_list$nages[sp]
}
if(data_list$nsex[sp] == 2){ # Two sex population
# Females
map_list$ln_M1[sp,1,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp] - 1)
M1_ind = M1_ind + data_list$nages[sp]
# Males
map_list$ln_M1[sp,2,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp] - 1)
M1_ind = M1_ind + data_list$nages[sp]
}
}
}
map_list$ln_M1[1,,]
M1_ind: (M1_ind + data_list$nages[sp] - 1)
# -- 1.5. Map out natural mortality
M1_ind = 1 # Generic ind for looping
sp = 1
M1_ind: (M1_ind + data_list$nages[sp] - 1)
map_list$ln_M1[sp,,1:data_list$nages[sp]]
map_list$ln_M1[sp,1:2,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp] - 1)
map_list$ln_M1[sp,1:2,1:data_list$nages[sp]]
map_list$ln_M1[sp,1,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp] - 1) # Females (one-sex though)
map_list$ln_M1[sp,2,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp] - 1) # Males (one-sex though)
M1_ind = M1_ind + data_list$nages[sp]
# -- 1.5. Map out natural mortality
M1_ind = 1 # Generic ind for looping
for(sp in 1:data_list$nspp){
# Dim = nspp, nsex (2), nages
# Turn off all
map_list$ln_M1[sp,,] <- NA
# Turn on
# - est_M1 = 1: sex- and age-invariant M1
if(data_list$est_M1[sp] == 1){
map_list$ln_M1[sp,,1:data_list$nages[sp]] <- M1_ind
M1_ind = M1_ind + 1
}
# - est_M1 = 2: sex-specific, age-invariant M1
if(data_list$est_M1[sp] == 2){
if(data_list$nsex[sp] == 1){ # One sex population
map_list$ln_M1[sp,,1:data_list$nages[sp]] <- M1_ind
M1_ind = M1_ind + 1
}
if(data_list$nsex[sp] == 2){ # Two sex population
map_list$ln_M1[sp,1,1:data_list$nages[sp]] <- M1_ind # Females
map_list$ln_M1[sp,2,1:data_list$nages[sp]] <- M1_ind + 1 # Males
M1_ind = M1_ind + 2
}
}
# - est_M1 = 3: sex-specific, age-specific M1
if(data_list$est_M1[sp] == 3){
if(data_list$nsex[sp] == 1){ # One sex population
map_list$ln_M1[sp,1,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp] - 1) # Females (one-sex though)
map_list$ln_M1[sp,2,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp] - 1) # Males (one-sex though)
M1_ind = M1_ind + data_list$nages[sp]
}
if(data_list$nsex[sp] == 2){ # Two sex population
# Females
map_list$ln_M1[sp,1,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp] - 1)
M1_ind = M1_ind + data_list$nages[sp]
# Males
map_list$ln_M1[sp,2,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp] - 1)
M1_ind = M1_ind + data_list$nages[sp]
}
}
}
map_list$ln_M1[sp,,]
map_list$ln_M1[1,,]
map_list$ln_M1[2,,]
library(Rceattle)
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(3,3,3) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Grant Adams, Kirstin Holsman, Andre Punt - April 2019
# Code to run Bering Sea CEATTLE model in TMB
# Citation:
# Holsman, K. K., Ianelli, J., Aydin, K., Punt, A. E., and Moffitt, E. A. 2015. A comparison of fisheries biological reference points estimated from temperature-specific multi-species and single-species climate-enhanced stock assessment models. Deep-Sea Research Part II: Topical Studies in Oceanography, 134: 360â€“378.
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Single-species, but estimate M
mydata_M <- mydata
mydata_M$est_M1 <- c(1,1,1) # Estimate age-invariant M (M2/predation = 0)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# - Multi-species
# For the a multispecies model we from the single species parameters.
BS2017MS$est_M1 <- c(0,0,0) # Do not estimate residual M
BS2017MS$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 0, # Estimate
niter = 3, # 3 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
plot_mortality(ms_run)
library(ggplot2)
library(Rceattle)
data("BS2017SS")
data("BS2017MS")
BS2017MS$proj_F
BS2017MS$proj_F <- NULL
BS2017SS$proj_F
BS2017SS$proj_F <- NULL
usethis::use_data(BS2017MS, BS2017SS, overwrite = TRUE)
exp(15)
exp(20)
exp(21)
library(Rceattle)
devtools::load_all(".")
