if(class(phase) == "character"){
if(tolower(phase) == "default"){
phase = list(
dummy = 1,
ln_pop_scalar = 4,
ln_mean_rec = 1,
ln_rec_sigma = 2,
rec_dev = 2,
init_dev = 2,
ln_sex_ratio_sigma = 3,
ln_M1 = 4,
ln_mean_F = 1,
ln_Flimit = 3,
ln_Ftarget = 3,
proj_F_prop = 1,
F_dev = 1,
ln_srv_q = 3,
# srv_q_pow = 4,
ln_srv_q_dev = 5,
ln_sigma_srv_q = 4,
ln_sigma_time_varying_srv_q = 4,
sel_coff = 3,
sel_coff_dev = 4,
ln_sel_slp = 3,
sel_inf = 3,
ln_sel_slp_dev = 5,
sel_inf_dev = 5,
ln_sigma_sel = 4,
sel_curve_pen = 4,
ln_sigma_srv_index = 2,
ln_sigma_fsh_catch = 2,
comp_weights = 4,
logH_1 = 6,
logH_1a = 6,
logH_1b = 6,
logH_2 = 6,
logH_3 = 6,
H_4 = 6,
log_gam_a = 5,
log_gam_b = 5,
log_phi = 5
)
}
}
if(class(phase) == "character"){
if(tolower(phase) != "default"){
warning("phase misspecified: please set to 'default' or list with the same order as parameters.")
}
}
}
# STEP 5 - Compile CEATTLE is providing cpp file
# - Get cpp file if not provided
TMBfilename <- "ceattle_v01_09"
# STEP 6 - Reorganize data and build model object
Rceattle:::data_check(data_list)
data_list_reorganized <- Rceattle::rearrange_dat(data_list)
data_list_reorganized = c(list(model = "ceattle_v01_09"),data_list_reorganized)
# - Update comp weights and F_prop from data
if(!is.null(data_list$fleet_control$Comp_weights)){
start_par$comp_weights = data_list$fleet_control$Comp_weights
}
start_par$proj_F_prop = data_list$fleet_control$proj_F_prop
nyrs_proj <- data_list$projyr - data_list$styr + 1
if(!is.null(HCR$FsprTarget)){
start_par$ln_Ftarget = matrix(log(HCR$FsprTarget), nrow = data_list$nspp, ncol = nyrs_proj) # Future fishing mortality for projections for each species
}
if(verbose > 0) {message("Step 4: Data rearranged complete")}
# STEP 7 - Set up parameter bounds
L <- c()
U <- c()
for(i in 1:length(map$mapFactor)){
if(names(map$mapFactor)[i] %!in% random_vars){ # Dont have bounds for random effects
L = c(L, unlist(bounds$lower[[i]])[which(!is.na(unlist(map$mapFactor[[i]])) & !duplicated(unlist(map$mapFactor[[i]])))])
U = c(U, unlist(bounds$upper[[i]])[which(!is.na(unlist(map$mapFactor[[i]])) & !duplicated(unlist(map$mapFactor[[i]])))])
}
}
# STEP 8 - Fit hindcast
step = 5
# If phase: phase hindcast
if(!is.null(phase) & estimateMode %in% c(0,1) ){
message(paste0("Step ", step,": Phasing begin"))
phase_pars <- Rceattle::TMBphase(
data = data_list_reorganized,
parameters = start_par,
map = map$mapFactor,
random = random_vars,
phases = phase,
model_name = TMBfilename,
silent = verbose != 2,
use_gradient = use_gradient,
control = control
)
start_par <- phase_pars
if(verbose > 0) {message(paste0("Step ", step,": Phasing complete - getting final estimates"))}
step = step + 1
}
# STEP 9 - Fit final hindcast model
if(estimateMode != 2){ # dont build if projection and estimating HCR parameters
if(sum(as.numeric(unlist(map$mapFactor)), na.rm = TRUE) == 0){stop("Map of length 0: all NAs")}
obj = TMB::MakeADFun(
data_list_reorganized,
parameters = start_par,
DLL = TMBfilename,
map = map$mapFactor,
random = random_vars,
silent = verbose != 2
)
}
names(start_par)
names(map$mapFactor)
names(start_par) == names(map$mapFactor)
sapply(start_par, dim)
sapply(start_par, function(x) ifelse(is.null(dim(x)), length(x), dim(x)))
phase_pars <- Rceattle::TMBphase(
data = data_list_reorganized,
parameters = start_par,
map = map$mapFactor,
random = random_vars,
phases = phase,
model_name = TMBfilename,
silent = verbose != 2,
use_gradient = use_gradient,
control = control
# Dimension check
names(start_par) == names(map$mapFactor)
sapply(start_par, function(x) ifelse(is.null(dim(x)), length(x), dim(x))) == sapply(map$mapFactor, dim)
lapply(map$mapFactor, function(x) ifelse(is.null(dim(x)), length(x), dim(x)))
)
sapply(start_par, dim)
sapply(start_par, dim)
sapply(map$mapFactor, dim)
# Dimension check
names(start_par) == names(map$mapFactor)
sapply(start_par, function(x) ifelse(is.null(dim(x)), length(x), dim(x)))
sapply(start_par, unlist(length))
sapply(map$mapFactor, unlist(length))
sapply(start_par, unlist(length)) == sapply(map$mapFactor, unlist(length))
# Dimension check
name_check <- names(start_par) == names(map$mapFactor)
dim_check <- sapply(start_par, unlist(length)) == sapply(map$mapFactor, unlist(length))
dim_check
print(paste0("Map and parameter are not same size for: ", names(dim_check)[which(dim_check == FALSE)]))
start_par$ln_Ftarget
start_par$ln_Flimit
map$mapFactor$ln_Ftarget
map$mapList$ln_Ftarget
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0)
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Estimate M
mydata_M <- mydata
mydata_M$est_M1 <- c(1,1,1)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# The you can plot the model results using using
plot_biomass(Rceattle =  list(ss_run, ss_run_M), model_names = c("Fixed M", "Est M"), line_col = c(1,2))
plot_recruitment(Rceattle =  list(ss_run, ss_run_M), add_ci = TRUE)
plot_catch(Rceattle =  ss_run, incl_proj = T)
# For the a multispecies model starting from the single species parameters, the following can be specified to load the data:
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$est_M1 <- c(1,1,1) # Estimate residual M
# For the a multispecies model starting from the single species parameters, the following can be specified to load the data:
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$est_M1 <- c(1,1,1) # Estimate residual M
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 0, # Estimate
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
plot_b_eaten_prop(ms_run)
library(Rceattle)
install.packages("TMB")
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0)
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
plot_depletion(ss_run, incl_proj = TRUE)
ss_run$estimated_params$ln_mean_rec
exp(ss_run$estimated_params$ln_mean_rec)
rowMeans(ss_run$quantities[,1:39])
rowMeans(ss_run$quantities$R[,1:39])
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0)
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
exp(ss_run$estimated_params$ln_mean_rec)
rowMeans(ss_run$quantities$R[,1:39])
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0)
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
exp(ss_run$estimated_params$ln_mean_rec)
rowMeans(ss_run$quantities$R[,1:39])
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0)
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
exp(ss_run$estimated_params$ln_mean_rec)
rowMeans(ss_run$quantities$R[,1:39])
rowMeans(ss_run$estimated_params$rec_dev[,1:39])
rowMeans(rbind(ss_run$estimated_params$rec_dev[,1:39],ss_run$estimated_params$init_dev[,1:9]) )
ss_run$estimated_params$init_dev[,1:9]
rowMeans(cbind(ss_run$estimated_params$rec_dev[,1:39],ss_run$estimated_params$init_dev[,1:9]) )
rowMeans(cbind(ss_run$estimated_params$rec_dev[,1:39],ss_run$estimated_params$init_dev[,1:11]) )
rowSums(cbind(ss_run$estimated_params$rec_dev[,1:39],ss_run$estimated_params$init_dev[,1:11]) )
rowSums(cbind(ss_run$estimated_params$rec_dev[,1:39],ss_run$estimated_params$init_dev[,1:21]) )
rowSums(cbind(ss_run$estimated_params$rec_dev[,1:39],ss_run$estimated_params$init_dev[,1:20]) )
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0)
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
exp(ss_run$estimated_params$ln_mean_rec)
rowMeans(ss_run$quantities$R[,1:39])
rowSums(cbind(ss_run$estimated_params$rec_dev[,1:39],ss_run$estimated_params$init_dev[,1:20]) )
ss_run$estimated_params$rec_dev[,1:39]
rowSums(cbind(ss_run$estimated_params$rec_dev[,1:39],ss_run$estimated_params$init_dev[,1:20]) )
exp(ss_run$estimated_params$ln_sigma_rec)
exp(ss_run$estimated_params$ln_rec_sigma)
exp(ss_run$estimated_params$ln_rec_sigma) * 48
exp(ss_run$estimated_params$ln_rec_sigma) * 48/2
exp(ss_run$estimated_params$ln_rec_sigma)^2 * 48/2
exp(ss_run$estimated_params$ln_mean_rec)
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0)
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
exp(ss_run$estimated_params$ln_mean_rec)
exp(ss_run$estimated_params$ln_rec_sigma)^2 * 48/2
rowMeans(ss_run$quantities$R[,1:39])
rowSums(cbind(ss_run$estimated_params$rec_dev[,1:39],ss_run$estimated_params$init_dev[,1:20]) )
22031014.2   364169.4   168436.8
?sample
?rep
om_use <- ss_run
mean(ss_run$quantities$R[1,1:39])
exp(ss_run$estimated_params$ln_mean_rec + mean(ss_run$estimated_params$rec_dev[1,1:39]))
exp(ss_run$estimated_params$ln_mean_rec[1] + mean(ss_run$estimated_params$rec_dev[1,1:39]))
exp(ss_run$estimated_params$ln_mean_rec[1] + median(ss_run$estimated_params$rec_dev[1,1:39]))
# - Update OM with devs
om_use$estimated_params$rec_dev[sp,proj_yrs - om_use$data_list$styr + 1] <- replace(
om_use$estimated_params$rec_dev[sp,proj_yrs - om_use$data_list$styr + 1],
values =  rec_dev)
ss_run$quantities$R[1,1:39]
ss_run$estimated_params$rec_dev[1,1:39]
sp = 1
log(mean(om_use$quantities$R[sp,1:hind_nyrs])) - om_use$estimated_params$ln_mean_rec[sp]
em = om_use
# - Years for simulations
hind_yrs <- (em$data_list$styr) : em$data_list$endyr
hind_nyrs <- length(hind_nyrs)
hind_nyrs <- length(hind_yrs)
log(mean(om_use$quantities$R[sp,1:hind_nyrs])) - om_use$estimated_params$ln_mean_rec[sp]
exp(0.8201364 + om_use$estimated_params$ln_mean_rec[sp])
mean(ss_run$estimated_params$rec_dev[1,1:39])
sample(x = om_use$estimated_params$rec_dev[sp, 1:hind_nyrs], size = proj_nyrs, replace = TRUE)
proj_yrs <- (em$data_list$endyr + 1) : em$data_list$projyr
proj_nyrs <- length(proj_yrs)
sample(x = om_use$estimated_params$rec_dev[sp, 1:hind_nyrs], size = proj_nyrs, replace = TRUE)
library(Rceattle)
library(TMB)
?compile
library(Rceattle)
library(Rceattle)
install.packages("TMB")
install.packages("TMB")
install.packages("TMB")
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0)
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Estimate M
mydata_M <- mydata
mydata_M$est_M1 <- c(1,1,1)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# The you can plot the model results using using
plot_biomass(Rceattle =  list(ss_run, ss_run_M), model_names = c("Fixed M", "Est M"), line_col = c(1,2))
plot_recruitment(Rceattle =  list(ss_run, ss_run_M), add_ci = TRUE)
plot_catch(Rceattle =  ss_run, incl_proj = T)
# The you can plot the model results using using
plot_biomass(Rceattle =  list(ss_run, ss_run_M), model_names = c("Fixed M", "Est M"), line_col = c(1,2))
plot_recruitment(Rceattle =  list(ss_run, ss_run_M), add_ci = TRUE)
plot_catch(Rceattle =  ss_run, incl_proj = T)
# The you can plot the model results using using
plot_biomass(Rceattle =  list(ss_run, ss_run_M), model_names = c("Fixed M", "Est M"), line_col = c(1,2))
ss_run$quantities$mean_rec
rowMeans(ss_run$quantities$R[1:39,])
ss_run$quantities$R
ss_run$quantities$R[1:10]
ss_run$quantities$R[1:10,]
ss_run$quantities$R[,1:39]
rowMeans(ss_run$quantities$R[,1:39])
ss_run$quantities$mean_rec
rowMeans(ss_run$quantities$R[,1:38])
rowMeans(ss_run$quantities$R[,1:37])
rowMeans(ss_run$quantities$R[,1:36])
rowMeans(ss_run$quantities$R[,1:35])
rowMeans(ss_run$quantities$R[,1:34])
usethis::use_vignette("Stock_synthesis_to_Rceattle")
install.packages('TMB', type = 'source')
install.packages("TMB", type = "source")
usethis::use_vignette("Stock_synthesis_to_Rceattle")
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
usethis::use_vignette("Stock_synthesis_to_Rceattle")
usethis::use_vignette("Stock_synthesis_to_Rceattle")
devtools:document()
install.packages("devtools")
install.packages("devtools")
devtools::document()
devtools::document()
version
