xaxt = c(rep("n", length(spp) - 1), "s")[j]
)
# Horizontal line at end yr
if(incl_proj){
abline(v = Rceattle[[length(Rceattle)]]$data_list$meanyr, lwd  = lwd, col = "grey", lty = 2)
}
# Legends
legend("topleft",
legend = spnames[spp[j]],
bty = "n",
cex = 1)
if (spp[j] == 1) {
if(!is.null(model_names)){
legend(
"topright",
legend = model_names,
lty = rep(1, length(line_col)),
lwd = lwd,
col = line_col,
bty = "n",
cex = mod_cex
)
}
}
# Credible interval
if(estDynamics[spp[j]] == 0){
if (add_ci) {
for (k in 1:dim(quantity)[3]) {
# - 95% CI
polygon(
x = c(Years[[k]], rev(Years[[k]])),
y = c(quantity_upper95[spp[j], 1:length(Years[[k]]), k], rev(quantity_lower95[spp[j], 1:length(Years[[k]]), k])),
col = adjustcolor( line_col[k], alpha.f = alpha/2),
border = NA
)
# - 50% CI
if(mse){
polygon(
x = c(Years[[k]], rev(Years[[k]])),
y = c(quantity_upper50[spp[j], 1:length(Years[[k]]), k], rev(quantity_lower50[spp[j], 1:length(Years[[k]]), k])),
col = adjustcolor( line_col[k], alpha.f = alpha),
border = NA
)
}
}
}
}
# Mean quantity
for (k in 1:dim(quantity)[3]) {
lines(
x = Years[[k]],
y = quantity[spp[j], 1:length(Years[[k]]), k],
lty = 1,
lwd = lwd,
col = line_col[k]
) # Median
# Ptarget and plimit
abline(h= ptarget[spp[j]], lwd = lwd/2, col = "blue")
abline(h= plimit[spp[j]], lwd = lwd/2, col = "red")
}
}
if (i == 2) {
dev.off()
}
}
}
#' plot F
#'
#' @description Function the plots the F time series per species from Rceattle
#'
#' @param file name of a file to identified the files exported by the
#'   function.
#' @param Rceattle Single or list of Rceattle model objects exported from \code{\link{Rceattle}}
#' @param model_names Names of models to be used in legend
#' @param line_col Colors of models to be used for line color
#' @param species Which species to plot e.g. c(1,4). Default = NULL plots them all
#' @param spnames Species names for legend
#' @param add_ci NOT WORKING If the confidence interval is to be added
#' @param lwd Line width as specified by user
#' @param right_adj Multiplier for to add to the right side of the figure for fitting the legend.
#' @param minyr First year to plot
#' @param height
#' @param width
#' @param save Save output?
#' @param incl_proj TRUE/FALSE, include projection years
#' @param mod_cex Cex of text for model name legend
#' @param mse Is if an MSE object from \code{\link{load_mse}} or \code{\link{mse_run}}
#' @param OM if mse == TRUE, use the OM (TRUE) or EM (FALSE) for plotting?
#'
#' @export
#'
#' @return Returns and saves a figure with the population trajectory.
plot_f <- function(Rceattle,
file = NULL,
model_names = NULL,
line_col = NULL,
species = NULL,
spnames = NULL,
add_ci = FALSE,
lwd = 3,
save = FALSE,
right_adj = 0,
width = 7,
height = 6.5,
minyr = NULL,
incl_proj = FALSE,
mod_cex = 1,
alpha = 0.4,
mod_avg = rep(FALSE, length(Rceattle)),
mse = FALSE,
OM = TRUE) {
# Convert mse object to Rceattle list
if(mse){
if(OM){
Rceattle <- lapply(Rceattle, function(x) x$OM)
}
if(!OM){
Rceattle <- lapply(Rceattle, function(x) x$EM[[length(x$EM)]])
}
add_ci = TRUE
}
# Convert single one into a list
if(class(Rceattle) == "Rceattle"){
Rceattle <- list(Rceattle)
}
# Species names
if(is.null(spnames)){
spnames =  Rceattle[[1]]$data_list$spnames
}
# Extract data objects
Endyrs <-  sapply(Rceattle, function(x) x$data_list$endyr)
Years <- lapply(Rceattle, function(x) x$data_list$styr:x$data_list$endyr)
if(incl_proj){
Years <- lapply(Rceattle, function(x) x$data_list$styr:x$data_list$projyr)
}
max_endyr <- max(unlist(Endyrs), na.rm = TRUE)
nyrs_vec <- sapply(Years, length)
nyrs <- max(nyrs_vec)
maxyr <- max((sapply(Years, max)))
if(is.null(minyr)){minyr <- min((sapply(Years, min)))}
nspp <- Rceattle[[1]]$data_list$nspp
minage <- Rceattle[[1]]$data_list$minage
estDynamics <- Rceattle[[1]]$data_list$estDynamics
if(is.null(species)){
species <- 1:nspp
}
spp <- species
# Get depletion
quantity <- quantity_sd <- log_quantity_sd <- log_quantity_mu <-  ftarget <- flimit <- array(NA, dim = c(nspp, nyrs,  length(Rceattle)))
for (i in 1:length(Rceattle)) {
ftarget[, 1:nyrs_vec[i] , i] <- Rceattle[[i]]$quantities$Ftarget[,1:nyrs_vec[i]]
flimit[, 1:nyrs_vec[i] , i] <- Rceattle[[i]]$quantities$Flimit[,1:nyrs_vec[i]]
quantity[, 1:nyrs_vec[i] , i] <- Rceattle[[i]]$quantities$F_spp[,1:nyrs_vec[i]]
# Get SD of quantity
if(add_ci & !mse){
sd_temp <- which(names(Rceattle[[i]]$sdrep$value) == "F_spp")
sd_temp <- Rceattle[[i]]$sdrep$sd[sd_temp]
quantity_sd[,  1:nyrs_vec[i], i] <-
replace(quantity_sd[, 1:nyrs_vec[i], i], values = sd_temp[1:(nyrs_vec[i] * nspp)])
}
}
## Get confidence intervals
# - Single model
if(!mse){
quantity_upper95 <- quantity + quantity_sd * 1.92
quantity_lower95 <- quantity - quantity_sd * 1.92
quantity_upper50 <- quantity + quantity_sd * 0.674
quantity_lower50 <- quantity - quantity_sd * 0.674
}
# - MSE objects
if(mse){
# -- Get quantiles and mean across simulations
quantity_upper95 <- apply( quantity, c(1,2), function(x) quantile(x, probs = 0.975) )
quantity_lower95 <- apply( quantity, c(1,2), function(x) quantile(x, probs = 0.025) )
quantity_upper50 <- apply( quantity, c(1,2), function(x) quantile(x, probs = 0.75) )
quantity_lower50 <- apply( quantity, c(1,2), function(x) quantile(x, probs = 0.25) )
quantity <- apply( quantity, c(1,2), mean ) # Get mean quantity
# -- Put back in array for indexing below
quantity <- array(quantity, dim = c(nspp, nyrs,  1))
quantity_upper95 <- array(quantity_upper95, dim = c(nspp, nyrs,  1))
quantity_lower95 <- array(quantity_lower95, dim = c(nspp, nyrs,  1))
quantity_upper50 <- array(quantity_upper50, dim = c(nspp, nyrs,  1))
quantity_lower50<- array(quantity_lower50, dim = c(nspp, nyrs,  1))
}
# # - Model Average
# for (i in 1:length(Rceattle)) {
#   if(mod_avg[i]){
#     quantity[,,i] <- qlnorm(0.5, meanlog = log_quantity_mu[,,i], sdlog = log_quantity_sd[,,i]) / 1000000
#     quantity_upper95[,,i] <- qlnorm(0.975, meanlog = log_quantity_mu[,,i], sdlog = log_quantity_sd[,,i]) / 1000000
#     quantity_lower95[,,i] <- qlnorm(0.025, meanlog = log_quantity_mu[,,i], sdlog = log_quantity_sd[,,i]) / 1000000
#   }
# }
## Save
if (save) {
for (i in 1:nspp) {
dat <- data.frame(quantity[i, , ])
datup <- data.frame(quantity_upper95[i, , ])
datlow <- data.frame(quantity_lower95[i, , ])
dat_new <- cbind(dat[, 1], datlow[, 1], datup[, 1])
colnames(dat_new) <- rep(model_names[1], 3)
for (j in 2:ncol(dat)) {
dat_new2 <- cbind(dat[, j], datlow[, j], datup[, j])
colnames(dat_new2) <- rep(model_names[j], 3)
dat_new <- cbind(dat_new, dat_new2)
}
write.csv(dat_new, file = paste0(file, "_f_species_", i, ".csv"))
}
}
## Plot limits
ymax <- c()
ymin <- c()
for (sp in 1:nspp) {
if (add_ci & (estDynamics[sp] == 0)) {
ymax[sp] <- max(c(quantity_upper95[sp, , ], 0), na.rm = T)
ymin[sp] <- min(c(quantity_upper95[sp, , ], 0), na.rm = T)
} else{
ymax[sp] <- max(c(quantity[sp, , ], 0), na.rm = T)
ymin[sp] <- min(c(quantity[sp, , ], 0), na.rm = T)
}
}
ymax <- ymax * 1.2
if (is.null(line_col)) {
if(!mse){
line_col <- rev(oce::oce.colorsViridis(length(Rceattle)))
}
if(mse){
line_col <- 1
}
}
# Plot trajectory
loops <- ifelse(is.null(file), 1, 2)
for (i in 1:loops) {
if (i == 2) {
filename <- paste0(file, "_f_trajectory", ".png")
png(
file = filename ,
width = width,# 169 / 25.4,
height = height,# 150 / 25.4,
units = "in",
res = 300
)
}
# Plot configuration
layout(matrix(1:(length(spp) + 2), nrow = (length(spp) + 2)), heights = c(0.1, rep(1, length(spp)), 0.2))
par(
mar = c(0, 3 , 0 , 1) ,
oma = c(0 , 0 , 0 , 0),
tcl = -0.35,
mgp = c(1.75, 0.5, 0)
)
plot.new()
for (j in 1:length(spp)) {
plot(
y = NA,
x = NA,
ylim = c(ymin[spp[j]], ymax[spp[j]]),
xlim = c(minyr, maxyr + (maxyr - minyr) * right_adj),
xlab = "Year",
ylab = "Fishing mortality",
xaxt = c(rep("n", length(spp) - 1), "s")[j]
)
# Horizontal line at end yr
if(incl_proj){
abline(v = Rceattle[[length(Rceattle)]]$data_list$meanyr, lwd  = lwd, col = "grey", lty = 2)
}
# Legends
legend("topleft",
legend = spnames[spp[j]],
bty = "n",
cex = 1)
if (spp[j] == 1) {
if(!is.null(model_names)){
legend(
"topright",
legend = model_names,
lty = rep(1, length(line_col)),
lwd = lwd,
col = line_col,
bty = "n",
cex = mod_cex
)
}
}
# Credible interval
if(estDynamics[spp[j]] == 0){
if (add_ci) {
for (k in 1:dim(quantity)[3]) {
# - 95% CI
polygon(
x = c(Years[[k]], rev(Years[[k]])),
y = c(quantity_upper95[spp[j], 1:length(Years[[k]]), k], rev(quantity_lower95[spp[j], 1:length(Years[[k]]), k])),
col = adjustcolor( line_col[k], alpha.f = alpha/2),
border = NA
)
# - 50% CI
if(mse){
polygon(
x = c(Years[[k]], rev(Years[[k]])),
y = c(quantity_upper50[spp[j], 1:length(Years[[k]]), k], rev(quantity_lower50[spp[j], 1:length(Years[[k]]), k])),
col = adjustcolor( line_col[k], alpha.f = alpha),
border = NA
)
}
}
}
}
# Mean quantity
for (k in 1:dim(quantity)[3]) {
lines(
x = Years[[k]],
y = quantity[spp[j], 1:length(Years[[k]]), k],
lty = 1,
lwd = lwd,
col = line_col[k]
) # Median
# - Ftarget
lines(
x = Years[[k]],
y = ftarget[spp[j], 1:length(Years[[k]]), k],
lty = 1,
lwd = lwd/2,
col = "blue"
)
# - Flimit
lines(
x = Years[[k]],
y = flimit[spp[j], 1:length(Years[[k]]), k],
lty = 1,
lwd = lwd/2,
col = "red"
)
}
}
if (i == 2) {
dev.off()
}
}
}
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
mydata$fleet_control
library(Rceattle)
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
ss_run$quantities$flt_accum_age_upper
ss_run$quantities$flt_accum_age_lower
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
ss_run2 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
plot_biomass(list(ss_run, ss_run2))
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0) # Fix M1 to input value (M1_base)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
data_list <- mydata
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
0.60989 * 12
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
