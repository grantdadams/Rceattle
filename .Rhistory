data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
if(any(!(data_list$minage[sp]:data_list$nages[sp]) %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
if(any((data_list$minage[sp]:data_list$nages[sp]) %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
data_list$minage[sp]:data_list$nages[sp]
for(sp in 1:data_list$nspp){
if(!all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))
data_list$minage[sp]:data_list$nages[sp]
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
if(!all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age) %>%
as.numeric())){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
data_list$minage[sp]:data_list$nages[sp]
if(!all(as.numeric(data_list$minage[sp]:data_list$nages[sp]) %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age) %>%
as.numeric())){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix
if(!all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
for(sp in 1:data_list$nspp){
if(!all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
data_list$age_trans_matrix %>%
as.data.frame()
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp)
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))
for(sp in 1:data_list$nspp){
if(!all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
ages <- data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
for(sp in 1:data_list$nspp){
ages <- data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
if(!all(data_list$minage[sp]:data_list$nages[sp] %in% ages)){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
for(sp in 1:data_list$nspp){
ages <- data_list$age_error %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age)
if(!all(data_list$minage[sp]:data_list$nages[sp] %in% ages)){
warning(paste("`age_error` data does not span range of true ages for species", sp, "will fill with 0s"))
}
}
for(sp in 1:data_list$nspp){
ages_tmp <- data_list$age_error %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age)
if(!all(data_list$minage[sp]:data_list$nages[sp] %in% ages_tmp)){
warning(paste("`age_error` data does not span range of true ages for species", sp, "will fill with 0s"))
}
}
ages_tmp <- data_list$age_error %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age)
ages_tmp
data_list$minage[sp]:data_list$nages[sp]
remove.packages("Rceattle")
data(BS2017SS)
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
phase = TRUE,
verbose = 1)
map <- ss_run$map
inits <- ss_run$estimated_params
# Set parameter to specific value
inits$sel_inf[1,1,1] = 10 # Dims = [(1 = ascending, 2 = descending), fleet, sex]
# Turn parameter off by setting map to NA
# - Map has two objects, the "mapList" which is the map as a list to retain the parameter objects dimensions and the "mapFactor" which is the list objects converted to a factor for input into TMB
map$mapList$sel_inf[1,1,1] = NA # Dims = [(1 = ascending, 2 = descending), fleet, sex]
map$mapFactor$sel_inf <- as.factor(map$mapList$sel_inf) # Convert list to factor
# Rerun, but fix sel_inf to 10 for fleet 1
ss_run2 <- Rceattle::fit_mod(data_list = ss_run$data_list,
inits = inits,
map = map,
phase = TRUE,
verbose = 1)
plot_selectivity(ss_run)
plot_selectivity(ss_run, species = 1)
plot_selectivity(ss_run2)
ss_run$quantities$sel[1,1,,1]
ss_run$quantities$sel[1,1,,1] # Dim = [fleet, sex, age, year]
ss_run2$quantities$sel[1,1,,1]
ss_run$data_list$fleet_control
data(BS2017SS)
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
phase = TRUE,
verbose = 1)
map <- ss_run$map
inits <- ss_run$estimated_params
# Set parameter to specific value
inits$sel_inf[1,4,1] = 10 # Dims = [(1 = ascending, 2 = descending), fleet, sex]
# Turn parameter off by setting map to NA
# - Map has two objects, the "mapList" which is the map as a list to retain the parameter objects dimensions and the "mapFactor" which is the list objects converted to a factor for input into TMB
map$mapList$sel_inf[1,4,1] = NA # Dims = [(1 = ascending, 2 = descending), fleet, sex]
map$mapFactor$sel_inf <- as.factor(map$mapList$sel_inf) # Convert list to factor
# Rerun, but fix sel_inf to 10 for fleet 1
ss_run2 <- Rceattle::fit_mod(data_list = ss_run$data_list,
inits = inits,
map = map,
phase = TRUE,
verbose = 1)
ss_run$quantities$sel[4,1,,1] # Dim = [fleet, sex, age, year]
ss_run2$quantities$sel[4,1,,1]
library(Rceattle)
data("GOApollock")                              # 2018 Pollock model
mymodel <- Rceattle::fit_mod(data_list = GOApollock,
inits = NULL,       # Initial parameters = 0
file = NULL,        # Don't save
estimateMode = 0,   # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0,        # Single species mode
phase = TRUE,
verbose = 1)
data("BS2017SS")
BS2017SS$fleet_control$proj_F_prop <- 1
mymodel <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL,       # Initial parameters = 0
file = NULL,        # Don't save
estimateMode = 0,   # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0,        # Single species mode
phase = TRUE,
verbose = 1)
data("BS2017SS")
BS2017SS$fleet_control$proj_F_prop <- 1
mymodel <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL,       # Initial parameters = 0
file = NULL,        # Don't save
estimateMode = 0,   # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0,        # Single species mode
phase = TRUE,
verbose = 1)
data_list <- BS2017SS
Max_age = data_list$diet_data %>%
dplyr::group_by(Prey) %>%
dplyr::summarise(Max_age = max(Pred_age)) %>%
dplyr::arrange(Prey)
Max_age
data_list$nages
Max_age = data_list$diet_data %>%
dplyr::group_by(Prey) %>%
dplyr::summarise(Max_age = max(Prey_age)) %>%
dplyr::arrange(Prey)
if(any(Max_age$Max_age > data_list$nages)){
stop("Prey ages in 'diet_data' > 'nages'")
}
library(gmRi)
spr_fun <- function(F){
ages = 1:10
wt = 1:10
sel = 1/(1+exp(-1*ages + 2))
mat = 1/(1+exp(-1*ages + 6))
M1 <- -0.2 * ages
spr0 = sum( exp(M1) * wt * mat * 0.5)
sprF = sum( exp(M1 - sel*F) * wt * mat * 0.5)
return(sprF/spr0)
}
F30 = uniroot(function(x) spr_fun(x) - 0.30, c(0,10))$root
F35 = uniroot(function(x) spr_fun(x) - 0.35, c(0,10))$root
F40 = uniroot(function(x) spr_fun(x) - 0.4, c(0,10))$root
F48 = uniroot(function(x) spr_fun(x) - 0.48, c(0,10))$root
F20 = uniroot(function(x) spr_fun(x) - 0.2, c(0,10))$root
F45 = uniroot(function(x) spr_fun(x) - 0.45, c(0,10))$root
tier3hcr_fun <- function(Pcur = 0.5, Ptarget = 0.4, Plimit = 0, Alpha = 0.05, Ftarget = F40, Flimit = F35){
if(Pcur > Ptarget){
Ftarget = Ftarget
Flimit = Flimit
}
if(Alpha< Pcur/Ptarget & Pcur/Ptarget <= 1){
Flimit = Flimit * (Pcur/Ptarget - Alpha)/(1-Alpha)
Ftarget = Ftarget * (Pcur/Ptarget - Alpha)/(1-Alpha)
}
if(Alpha>=Pcur/Ptarget ){
Flimit = 0
Ftarget = 0
}
if(Pcur < Plimit ){
Flimit = 0
Ftarget = 0
}
return(list(Flimit = Flimit, Ftarget = Ftarget))
}
sessfcat1hcr_fun <- function(Pcur = 0.5, Ptarget = 0.35, Plimit = 0.2, Ftarget = F48, Flimit = F20){
if(Pcur > Ptarget){
Ftarget = Ftarget
}
if(Pcur < Ptarget & Pcur> Plimit){
Ftarget = Ftarget * (Pcur/Plimit - 1)
}
if(Pcur < Plimit ){
Ftarget = 0
}
return(list(Flimit = Flimit, Ftarget = Ftarget))
}
pfmccat1hcr_fun <- function(Pcur = 0.5, Ptarget = 0.40, Plimit = 0.1, Flimit = F45, sigma = 0.5, Pstar = 0.45){
if(Pcur > Ptarget){
Ftarget = qnorm(Pstar, Flimit, sigma)
}
if(Pcur < Ptarget & Pcur> Plimit){
Ftarget = qnorm(Pstar, Flimit, sigma) * Ptarget * (Pcur - Plimit)/((Ptarget - Plimit)*Pcur)
}
if(Pcur < Plimit ){
Ftarget = 0
}
return(list(Flimit = Flimit, Ftarget = Ftarget))
}
Pvals <- seq(0,1,length.out = 1000)
Tier3Ftargets <- sapply(Pvals, function(x) tier3hcr_fun(Pcur = x, Plimit = 0.2, Alpha = 0.05)$Ftarget)
Tier3Flimits <- sapply(Pvals, function(x) tier3hcr_fun(Pcur = x, Plimit = 0.2, Alpha = 0.05)$Flimit)
Tier3FtargetsATF <- sapply(Pvals, function(x) tier3hcr_fun(Pcur = x, Plimit = 0, Alpha = 0.05)$Ftarget)
Tier3FlimitsATF <- sapply(Pvals, function(x) tier3hcr_fun(Pcur = x, Plimit = 0, Alpha = 0.05)$Flimit)
SESSFCat1Ftargets <- sapply(Pvals, function(x) sessfcat1hcr_fun(Pcur = x)$Ftarget)
SESSFCat1Flimits <- sapply(Pvals, function(x) sessfcat1hcr_fun(Pcur = x)$Flimit)
PFMCCat1Ftargets <- sapply(Pvals, function(x) pfmccat1hcr_fun(Pcur = x)$Ftarget)
PFMCCat1Flimits <- sapply(Pvals, function(x) pfmccat1hcr_fun(Pcur = x)$Flimit)
PFMCCat1FtargetsFlatfish <- sapply(Pvals, function(x) pfmccat1hcr_fun(Pcur = x, Ptarget = 0.25, Plimit = 0.05, Flimit = F30, sigma = 0.5, Pstar = 0.45)$Ftarget)
#--------------------------
# Plot it
par(mar = c(3, 3, 0.5, 0.5))
# Colors (by EM/HCR)
MPcols <- gmri_pal("mixed")(10)[1:8]
plot(NA,NA, ylim = c(0, 1.4), xlim = c(0,1), ylab = NA, yaxt = "na", xlab = "Depletion")
mtext(side = 2, "Fishing mortality (F)", line = 1.5)
mtext(side = 1, "Relative depletion", line = 2)
# abline(h = Tier3Ftargets[length(Tier3Ftargets)], lwd = 3, col = SamplingCol[4])
# - Tier 3
lines(x = Pvals, y = Tier3Ftargets, col = MPcols[1], lwd = 3, lty = 2)
lines(x = Pvals, y = Tier3FtargetsATF, col = MPcols[1], lwd = 3, lty = 1)
text(x=Pvals[1000], y = Tier3Ftargets[1000]+0.07, expression('1) F'["40%"]), offset = -2,pos = 4, col = MPcols[1])
#lines(x = Pvals, y = Tier3Flimits, col = MPcols[1], lwd = 3, lty = 2)
# - Cat 1
# -- 40-10
lines(x = Pvals, y = PFMCCat1Ftargets, col = MPcols[3], lwd = 3, lty = 1)
text(x=Pvals[900], y = PFMCCat1Ftargets[1000]+0.07, expression(paste("2a) ", Phi,'(0.45, F'["45%"],", 0.5)")), offset = -6,pos = 4, col = MPcols[3])
#lines(x = Pvals, y = PFMCCat1Flimits, col = 1, lwd = 3, lty = 2)
# -- 25-5
lines(x = Pvals, y = PFMCCat1FtargetsFlatfish, col = MPcols[4], lwd = 3, lty = 1)
text(x=Pvals[900], y = PFMCCat1FtargetsFlatfish[1000]+0.07, expression(paste("2b) ", Phi,'(0.45, F'["30%"],", 0.5)")), offset = -6,pos = 4, col = MPcols[4])
#lines(x = Pvals, y = PFMCCat1Flimits, col = MPcols[3], lwd = 3, lty = 2)
# - Tier 1
lines(x = Pvals, y = SESSFCat1Ftargets, col = MPcols[5], lwd = 3, lty = 1)
text(x=0.4, y = SESSFCat1Ftargets[1000]+0.07, expression('3) F'["48%"]), offset = 0,pos = 4, col = MPcols[5])
# - F40
abline(h = 0.75 * F40, col = MPcols[7], lwd = 3)
text(x=Pvals[1000], y = 0.75 * F40-0.07, expression('4) 0.75 * F'["40%"]), offset = -6 ,pos = 4, col = MPcols[7])
legend("bottomright", c("NPFMC", "PFMC 40-10", "PFMC 25-5", "SESSF", "NEFMC (Fspr)"), col = c(MPcols[1], MPcols[3], MPcols[4], MPcols[5], MPcols[7]), lty = 1, lwd = 4, bty = "n")
# Load old model
load("inst/extdata/CEATTLE_classic_ss.Rdata")
# Load data and set up inits
library(Rceattle)
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$srr_prior_mean <- 9
BS2017SS$initMode  <- 1
inits <- build_params(BS2017SS)
# - Update population dynamics from previous parameters
inits$init_dev <- CEATTLE_classic_SS$estimated_params$init_dev
inits$rec_dev[,1:39] <- CEATTLE_classic_SS$estimated_params$rec_dev
inits$rec_pars[,1] <- CEATTLE_classic_SS$estimated_params$ln_mn_rec
inits$ln_F[1:3, 1:39] <- CEATTLE_classic_SS$estimated_params$F_dev[,1:39] + CEATTLE_classic_SS$estimated_params$ln_mean_F
inits$sel_coff[1:3,1,] <- CEATTLE_classic_SS$estimated_params$fsh_sel_coff
ss_run_old_params <- Rceattle::fit_mod(data_list = BS2017SS,
inits = inits, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 3, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# - Estimate instead
ss_run_new <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# Previous time series
ss_run_old <- ss_run_new
ss_run_old$quantities$R[,1:39] <- CEATTLE_classic_SS$quantities$R[,1:39]
ss_run_old$quantities$biomass[,1:39] <- CEATTLE_classic_SS$quantities$biomass
ss_run_old$quantities$ssb[,1:39] <- CEATTLE_classic_SS$quantities$biomassSSB
# Plot
plot_recruitment(list(ss_run_old_params, ss_run_old), model_names = 1:2)
plot_biomass(list(ss_run_old_params, ss_run_old), model_names = 1:2)
plot_ssb(list(ss_run_old_params, ss_run_old), model_names = 1:2)
plot_index(list(ss_run_old_params, ss_run_old), model_names = 1:2)
plot_recruitment(list(ss_run_new, ss_run_old_params, ss_run_old), model_names = 1:3)
plot_biomass(list(ss_run_new, ss_run_old_params, ss_run_old), model_names = 1:3)
plot_ssb(list(ss_run_new, ss_run_old_params, ss_run_old), model_names = 1:3)
})
ms_run_old_params$quantities$sel[1:3,1,,1] - CEATTLE_classic_MS$quantities$fsh_sel
ms_run_old_params$quantities$sel[4:6,1,,1] - CEATTLE_classic_MS$quantities$srv_sel
# Load old model
library(Rceattle)
load("inst/extdata/CEATTLE_classic_MS.Rdata")
# Load data and set up inits
data("BS2017SS")
data("BS2017MS")
BS2017MS$srr_prior_mean <- 9
BS2017MS$initMode  <- 1
inits <- build_params(BS2017MS)
# - Update population dynamics from old parameters
inits$init_dev[,1:20] <- CEATTLE_classic_MS$estimated_params$init_dev
inits$rec_dev[,1:39] <- CEATTLE_classic_MS$estimated_params$rec_dev
inits$rec_pars[,1] <- CEATTLE_classic_MS$estimated_params$ln_mn_rec
inits$ln_F[1:3, 1:39] <- CEATTLE_classic_MS$estimated_params$F_dev[,1:39] + CEATTLE_classic_MS$estimated_params$ln_mean_F
# -- Sel
inits$sel_coff[1:3,1,] <- CEATTLE_classic_MS$estimated_params$fsh_sel_coff
inits$sel_inf[1,4:6,1] <- CEATTLE_classic_MS$estimated_params$srv_sel_inf[1,]
inits$ln_sel_slp[1,4:6,1] <- log(CEATTLE_classic_MS$estimated_params$srv_sel_slp[1,])
inits$index_ln_q[4:6] <- CEATTLE_classic_MS$estimated_params$log_srv_q
inits$index_ln_q[7] <- CEATTLE_classic_MS$estimated_params$log_eit_q # Need to scale by max sel because selectivity is rescaled to max = 1 in the CPP
# - Update diet data
BS2017MS_new <- BS2017MS
BS2017MS_new$diet_data <- as.data.frame(BS2017MS_new$diet_data)
for(i in 1:nrow(BS2017MS_new$diet_data)){
BS2017MS_new$diet_data$Stomach_proportion_by_weight[i] <- CEATTLE_classic_MS$data_list$UobsAge[
BS2017MS_new$diet_data$Pred[i], BS2017MS_new$diet_data$Prey[i],
BS2017MS_new$diet_data$Pred_age[i], BS2017MS_new$diet_data$Prey_age[i]
]
}
# - Update foraging data
BS2017MS_new$Pyrs <- as.data.frame(BS2017MS_new$Pyrs)
BS2017MS_new$Pyrs[,4:ncol(BS2017MS_new$Pyrs)] <- rbind(CEATTLE_classic_MS$data_list$Pyrs[-40,,1],
CEATTLE_classic_MS$data_list$Pyrs[-40,,2],
CEATTLE_classic_MS$data_list$Pyrs[-40,,3])
ms_run_old_params <- Rceattle::fit_mod(
data_list = BS2017MS_new,
inits = inits, # Initial parameters from old model
M1Fun = build_M1(M1_model = 0,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 3, # Fix at parameter values
niter = 10, # iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
#  Fit models
ss_run_new <- Rceattle::fit_mod(
data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# - Multi-species
ms_run_new <- Rceattle::fit_mod(
data_list = BS2017MS_new,
inits = ss_run_new$estimated_params, # Initial parameters from single species ests
M1Fun = build_M1(M1_model = 0,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 0, # Estimate
niter = 10, # 3 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# Previous time series
ms_run_old <- ms_run_new
ms_run_old$quantities$R[,1:39] <- CEATTLE_classic_MS$quantities$R[,1:39]
ms_run_old$quantities$biomass[,1:39] <- CEATTLE_classic_MS$quantities$biomass
ms_run_old$quantities$ssb[,1:39] <- CEATTLE_classic_MS$quantities$biomassSSB
ms_run_old$quantities$index_hat <- c(CEATTLE_classic_MS$quantities$srv_bio_hat[1,1:36],
CEATTLE_classic_MS$quantities$srv_bio_hat[2,1:36],
CEATTLE_classic_MS$quantities$srv_bio_hat[3,1:36],
CEATTLE_classic_MS$quantities$eit_hat[1:20])
fsh_bio <- ms_run_old$data_list$catch_data
fsh_bio$Pred <- ms_run_old$quantities$catch_hat
fsh_bio$CatchOld <- NA
fsh_bio$CatchOld[which(fsh_bio$Year < 2018)] <- c(CEATTLE_classic_MS$quantities$tc_biom_hat[1,],
CEATTLE_classic_MS$quantities$tc_biom_hat[2,],
CEATTLE_classic_MS$quantities$tc_biom_hat[3,])
ms_run_old$quantities$catch_hat <- fsh_bio$CatchOld
# Sel
round(ms_run_old_params$quantities$sel[,1,,1], 5)
round(CEATTLE_classic_MS$quantities$fsh_sel, 5)
round(CEATTLE_classic_MS$quantities$srv_sel, 5)
ms_run_old_params$quantities$sel[1:3,1,,1] - CEATTLE_classic_MS$quantities$fsh_sel
ms_run_old_params$quantities$sel[4:6,1,,1] - CEATTLE_classic_MS$quantities$srv_sel
# Plot
plot_recruitment(list(ms_run_old_params, ms_run_old))
plot_biomass(list(ms_run_old_params, ms_run_old))
plot_ssb(list(ms_run_old_params, ms_run_old))
plot_index(list(ms_run_old_params, ms_run_old), model_names = c(1,2))
plot_catch(list(ms_run_old_params, ms_run_old))
# Load old model
load("inst/extdata/CEATTLE_classic_ss.Rdata")
# Load data and set up inits
library(Rceattle)
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$srr_prior_mean <- 9
BS2017SS$initMode  <- 1
inits <- build_params(BS2017SS)
# - Update population dynamics from previous parameters
inits$init_dev <- CEATTLE_classic_SS$estimated_params$init_dev
inits$rec_dev[,1:39] <- CEATTLE_classic_SS$estimated_params$rec_dev
inits$rec_pars[,1] <- CEATTLE_classic_SS$estimated_params$ln_mn_rec
inits$ln_F[1:3, 1:39] <- CEATTLE_classic_SS$estimated_params$F_dev[,1:39] + CEATTLE_classic_SS$estimated_params$ln_mean_F
inits$sel_coff[1:3,1,] <- CEATTLE_classic_SS$estimated_params$fsh_sel_coff
ss_run_old_params <- Rceattle::fit_mod(data_list = BS2017SS,
inits = inits, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 3, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# - Estimate instead
ss_run_new <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# Previous time series
ss_run_old <- ss_run_new
ss_run_old$quantities$R[,1:39] <- CEATTLE_classic_SS$quantities$R[,1:39]
ss_run_old$quantities$biomass[,1:39] <- CEATTLE_classic_SS$quantities$biomass
ss_run_old$quantities$ssb[,1:39] <- CEATTLE_classic_SS$quantities$biomassSSB
# Plot
plot_recruitment(list(ss_run_old_params, ss_run_old), model_names = 1:2)
plot_biomass(list(ss_run_old_params, ss_run_old), model_names = 1:2)
plot_ssb(list(ss_run_old_params, ss_run_old), model_names = 1:2)
plot_index(list(ss_run_old_params, ss_run_old), model_names = 1:2)
plot_recruitment(list(ss_run_new, ss_run_old_params, ss_run_old), model_names = 1:3)
plot_biomass(list(ss_run_new, ss_run_old_params, ss_run_old), model_names = 1:3)
plot_ssb(list(ss_run_new, ss_run_old_params, ss_run_old), model_names = 1:3)
plot_index(list(ms_run_old_params, ms_run_old), model_names = c(1,2))
