}
}
# -- Set Fdev for years with 0 catch to very low number
catch_data <- data_list$catch_data
fsh_ind <- catch_data$Fleet_code[which(catch_data$Catch == 0)]
yr_ind <- catch_data$Year[which(catch_data$Catch == 0)] - data_list$styr + 1
for(i in 1:length(fsh_ind)){
param_list$F_dev[fsh_ind[i], yr_ind[i]] <- -999
}
#---------------------------------------------------------------------
# 2. Observation model parameters
#---------------------------------------------------------------------
# -- 2.1. Index catchability parameters
# - Catchability on log scale
param_list$index_ln_q = log(data_list$fleet_control$Q_prior)
names(param_list$index_ln_q) <- data_list$fleet_control$Fleet_name
# - Regression coefficients for environment-q linkage
param_list$index_q_beta = matrix(0, nrow = nrow(data_list$fleet_control), ncol = ncol(data_list$env_data) - 1,
dimnames = list(data_list$fleet_control$Fleet_name, colnames(data_list$env_data)[-1]))
# - Rho for environment-q linkage (sensu GOA Pollock)
param_list$index_q_rho = rep(0, nrow(data_list$fleet_control))
names(param_list$index_q_rho) <- data_list$fleet_control$Fleet_name
# param_list$index_q_pow = rep(0, nrow(data_list$fleet_control))
# - Annual index catchability deviations
param_list$index_q_dev = matrix(0, nrow = nrow(data_list$fleet_control), ncol = nyrs_hind,
dimnames = list(data_list$fleet_control$Fleet_name, yrs_hind))
# - Log standard deviation prior on Q (maybe should be data...)
param_list$index_q_ln_sd <- log(data_list$fleet_control$Q_sd_prior)
names(param_list$index_q_ln_sd) <- data_list$fleet_control$Fleet_name
# - Log standard deviation for survey selectivity random walk - used for logistic
param_list$index_q_dev_ln_sd <- log(data_list$fleet_control$Time_varying_q_sd_prior)
names(param_list$index_q_dev_ln_sd) <- data_list$fleet_control$Fleet_name
# --- 2.2. Selectivity parameters
n_selectivities <- nrow(data_list$fleet_control)
max_sel_ages <- suppressWarnings(max(1, as.numeric(c(data_list$fleet_control$Nselages)), na.rm = T))
# - Non-parametric selectivity coefficients
param_list$sel_coff =  array(0, dim = c(n_selectivities, 2, max_sel_ages),
dimnames = list(data_list$fleet_control$Fleet_name, c("Sex combines/females", "males"), paste0("Age", 1:max_sel_ages)))
# - Non-parametric selectivity penalties (sensu Ianelli)
param_list$sel_curve_pen = matrix( c(data_list$fleet_control$Time_varying_sel, data_list$fleet_control$Sel_sd_prior), nrow = n_selectivities, ncol = 2)
# - Non-parametric selectivity coef annual deviates
param_list$sel_coff_dev = array(0, dim = c(n_selectivities, 2, max(1, as.numeric(c(data_list$fleet_control$Nselages) ), na.rm = T), nyrs_hind),
dimnames = list(data_list$fleet_control$Fleet_name, c("Sex combines/females", "males"), paste0("Age", 1:max_sel_ages), yrs_hind))
# - Selectivity slope parameters for logistic
param_list$ln_sel_slp = array(0.5, dim = c(2, n_selectivities, 2),
dimnames = list(c("Ascending" , "Descending"), data_list$fleet_control$Fleet_name, c("Sex combines/females", "males")))
# - Selectivity asymptotic parameters for logistic
param_list$sel_inf = array(0, dim = c(2, n_selectivities, 2),
dimnames = list(c("Ascending" , "Descending"), data_list$fleet_control$Fleet_name, c("Sex combines/females", "males")))
param_list$sel_inf[1,,] <- 0
param_list$sel_inf[2,,] <- 10
# - Annual selectivity slope deviation for logistic
param_list$ln_sel_slp_dev = array(0, dim = c(2, n_selectivities, 2, nyrs_hind),
dimnames = list(c("Ascending" , "Descending"), data_list$fleet_control$Fleet_name, c("Sex combines/females", "males"), yrs_hind))
# - Annual selectivity asymptotic deviations for logistic
param_list$sel_inf_dev = array(0, dim = c(2, n_selectivities, 2, nyrs_hind),
dimnames = list(c("Ascending" , "Descending"), data_list$fleet_control$Fleet_name, c("Sex combines/females", "males"), yrs_hind))
# - Log standard deviation for selectivity random walk - used for logistic
param_list$sel_dev_ln_sd <- log(data_list$fleet_control$Sel_sd_prior)
names(param_list$sel_dev_ln_sd) <- data_list$fleet_control$Fleet_name
# -- 2.3. Variance of survey and fishery time series
# - Log standard deviation of survey index time-series
param_list$index_ln_sd = log(data_list$fleet_control$Index_sd_prior)
names(param_list$index_ln_sd) <- data_list$fleet_control$Fleet_name
# - Log standard deviation of fishery catch time-series
param_list$catch_ln_sd = log(data_list$fleet_control$Catch_sd_prior)
names(param_list$catch_ln_sd) <- data_list$fleet_control$Fleet_name
# -- 2.4. Comp weighting
if(!is.null(data_list$fleet_control$Comp_weights)){
param_list$comp_weights = data_list$fleet_control$Comp_weights
}
if(is.null(data_list$fleet_control$Comp_weights)){
param_list$comp_weights = rep(1, nrow(data_list$fleet_control))
}
names(param_list$comp_weights) <- data_list$fleet_control$Fleet_name
# Grant Adams, Kirstin Holsman, Andre Punt - April 2019
# Code to run Bering Sea CEATTLE model in TMB
# Citation:
# Holsman, K. K., Ianelli, J., Aydin, K., Punt, A. E., and Moffitt, E. A. 2015. A comparison of fisheries biological reference points estimated from temperature-specific multi-species and single-species climate-enhanced stock assessment models. Deep-Sea Research Part II: Topical Studies in Oceanography, 134: 360â€“378.
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
plot_biomass(ss_run)
ss_run$estimated_params$rec_pars
library(Rceattle)
data("BS2017SS")
head(BS2017SS$Pyrs)
data_list <- BS2017SS
head(data_list$age_trans_matrix)
data_list$minage
# Age transition matrix and age error ----
if(any(data_list$age_trans_matrix %>%
dplyr::select(-c(Age_transition_name, Age_transition_index, Species, Sex, Age)) %>%
ncol() < data_list$nlengths)){
stop("`age_trans_matrix` data does not span range of lengths")
}
for(sp in 1:data_list$nspp){
if(any(data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age) %in% data_list$minage[sp]:data_list$nages[sp])){
stop(paste("`age_trans_matrix` data does not span range of age for species", sp))
}
}
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
data_list$minage[sp]:data_list$nages[sp]
head(data_list$age_error)
# Age error matrix ----
if(any(data_list$age_error %>%
dplyr::select(-c(Species, True_age)) %>%
ncol() < data_list$nages)){
stop("`age_error` data does not span range of ages")
}
data_list$age_error
class(data_list$age_error)
# Age error matrix ----
if(any(data_list$age_error %>%
as.data.frame() %>%
dplyr::select(-c(Species, True_age)) %>%
ncol() < data_list$nages)){
stop("`age_error` data does not span range of ages")
}
# Age error matrix ----
if(any(data_list$age_error %>%
as.data.frame() %>%
dplyr::select(-c(Species, True_age)) %>%
ncol() < data_list$nages)){
stop("`age_error` observed ages do not span range of ages")
}
for(sp in 1:data_list$nspp){
if(any(data_list$age_error %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age) %in% data_list$minage[sp]:data_list$nages[sp])){
warning(paste("`age_error` data does not span range of true ages for species", sp, "will fill with 0s"))
}
}
for(sp in 1:data_list$nspp){
if(any(data_list$age_error %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age) %in% data_list$minage[sp]:data_list$nages[sp])){
warning(paste("`age_error` data does not span range of true ages for species", sp, "will fill with 0s"))
}
}
data_list$minage[sp]:data_list$nages[sp]
data_list$age_error %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age)
for(sp in 1:data_list$nspp){
if(any(!data_list$age_error %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age) %in% data_list$minage[sp]:data_list$nages[sp])){
warning(paste("`age_error` data does not span range of true ages for species", sp, "will fill with 0s"))
}
}
for(sp in 1:data_list$nspp){
if(any(!data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age) %in% data_list$minage[sp]:data_list$nages[sp])){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
sp = 1
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
data_list$minage[sp]:data_list$nages[sp]
for(sp in 1:data_list$nspp){
if(any(!data_list$minage[sp]:data_list$nages[sp] %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
for(sp in 1:data_list$nspp){
if(any(!data_list$minage[sp]:data_list$nages[sp] %>%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
data_list$minage[sp]:data_list$nages[sp]
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
for(sp in 1:data_list$nspp){
if(any(!data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
!data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
if(any(!(data_list$minage[sp]:data_list$nages[sp]) %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
if(any((data_list$minage[sp]:data_list$nages[sp]) %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
data_list$minage[sp]:data_list$nages[sp]
for(sp in 1:data_list$nspp){
if(!all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))
data_list$minage[sp]:data_list$nages[sp]
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
if(!all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age) %>%
as.numeric())){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
data_list$minage[sp]:data_list$nages[sp]
if(!all(as.numeric(data_list$minage[sp]:data_list$nages[sp]) %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age) %>%
as.numeric())){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix
if(!all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
for(sp in 1:data_list$nspp){
if(!all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
data_list$age_trans_matrix %>%
as.data.frame()
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp)
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))
for(sp in 1:data_list$nspp){
if(!all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
ages <- data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
for(sp in 1:data_list$nspp){
ages <- data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
if(!all(data_list$minage[sp]:data_list$nages[sp] %in% ages)){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
for(sp in 1:data_list$nspp){
ages <- data_list$age_error %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age)
if(!all(data_list$minage[sp]:data_list$nages[sp] %in% ages)){
warning(paste("`age_error` data does not span range of true ages for species", sp, "will fill with 0s"))
}
}
for(sp in 1:data_list$nspp){
ages_tmp <- data_list$age_error %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age)
if(!all(data_list$minage[sp]:data_list$nages[sp] %in% ages_tmp)){
warning(paste("`age_error` data does not span range of true ages for species", sp, "will fill with 0s"))
}
}
ages_tmp <- data_list$age_error %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age)
ages_tmp
data_list$minage[sp]:data_list$nages[sp]
remove.packages("Rceattle")
library(Rceattle)
# Code to run Gulf of Alaska CEATTLE model in TMB
# Citation:
# Adams, G. D., Holsman, K. K., Barbeaux, S. J., Dorn, M. W., Ianelli, J. N., Spies, I., ... & Punt, A. E. (2022). An ensemble approach to understand predation mortality for groundfish in the Gulf of Alaska. Fisheries Research, 251, 106303.
library(Rceattle)
library(dplyr)
################################################
# Data
################################################
# Example
# To run the 2018 single species assessment for the Gulf of Alaska, a data file must first be loaded:
data("GOA2018SS") # Single-species data. ?BS2017SS for more information on the data
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
# GOA2018SS$fleet_control$proj_F_prop <- rep(1, nrow(GOA2018SS$fleet_control))
ss_run <- Rceattle::fit_mod(data_list = GOA2018SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# Code to run Gulf of Alaska CEATTLE model in TMB
# Citation:
# Adams, G. D., Holsman, K. K., Barbeaux, S. J., Dorn, M. W., Ianelli, J. N., Spies, I., ... & Punt, A. E. (2022). An ensemble approach to understand predation mortality for groundfish in the Gulf of Alaska. Fisheries Research, 251, 106303.
library(Rceattle)
library(dplyr)
################################################
# Data
################################################
# Example
# To run the 2018 single species assessment for the Gulf of Alaska, a data file must first be loaded:
data("GOA2018SS") # Single-species data. ?BS2017SS for more information on the data
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
# GOA2018SS$fleet_control$proj_F_prop <- rep(1, nrow(GOA2018SS$fleet_control))
ss_run <- Rceattle::fit_mod(data_list = GOA2018SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# Grant Adams, Kirstin Holsman, Andre Punt - April 2019
# Code to run Bering Sea CEATTLE model in TMB
# Citation:
# Holsman, K. K., Ianelli, J., Aydin, K., Punt, A. E., and Moffitt, E. A. 2015. A comparison of fisheries biological reference points estimated from temperature-specific multi-species and single-species climate-enhanced stock assessment models. Deep-Sea Research Part II: Topical Studies in Oceanography, 134: 360â€“378.
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
# GOA2018SS$fleet_control$proj_F_prop <- rep(1, nrow(GOA2018SS$fleet_control))
ss_run <- Rceattle::fit_mod(data_list = GOA2018SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 4, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
ss_run$quantities$jnll_comp
ss_run$quantities$index_hat
check <- rearrange_dat(ss_run$data_list)
check$index_obs
# Code to run Gulf of Alaska CEATTLE model in TMB
# Citation:
# Adams, G. D., Holsman, K. K., Barbeaux, S. J., Dorn, M. W., Ianelli, J. N., Spies, I., ... & Punt, A. E. (2022). An ensemble approach to understand predation mortality for groundfish in the Gulf of Alaska. Fisheries Research, 251, 106303.
library(Rceattle)
library(dplyr)
################################################
# Data
################################################
# Example
# To run the 2018 single species assessment for the Gulf of Alaska, a data file must first be loaded:
data("GOA2018SS") # Single-species data. ?BS2017SS for more information on the data
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
# GOA2018SS$fleet_control$proj_F_prop <- rep(1, nrow(GOA2018SS$fleet_control))
ss_run <- Rceattle::fit_mod(data_list = GOA2018SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# Grant Adams, Kirstin Holsman, Andre Punt - April 2019
# Code to run Bering Sea CEATTLE model in TMB
# Citation:
# Holsman, K. K., Ianelli, J., Aydin, K., Punt, A. E., and Moffitt, E. A. 2015. A comparison of fisheries biological reference points estimated from temperature-specific multi-species and single-species climate-enhanced stock assessment models. Deep-Sea Research Part II: Topical Studies in Oceanography, 134: 360â€“378.
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
plot_biomass(ss_run)
