mod_list <- list(ss_run, ss_run_Tier3, ss_run_dynamicTier3)
plot_recruitment(mod_list, incl_proj = TRUE)
plot_ssb(mod_list, incl_proj = TRUE)
lapply(mod_list, function(x) x$quantities$R[1,])
lapply(mod_list, function(x) tail(x$quantities$R[1,]))
sapply(mod_list, function(x) tail(x$quantities$R[1,]))
sapply(mod_list, function(x) tail(x$quantities$Nbyage0[1,1,,1]))
ss_run$quantities$NByage0
sapply(mod_list, function(x) tail(x$quantities$NByage0[1,1,,1]))
sapply(mod_list, function(x) tail(x$quantities$R[1,]))
sapply(mod_list, function(x) tail(x$quantities$NByage0[1,1,,1]))
ss_run$quantities$NByage0[1,1,,]
ss_run$quantities$NByage0[1,1,1,]
sapply(mod_list, function(x) tail(x$quantities$NByage0[1,1,1,]))
sapply(mod_list, function(x) tail(x$quantities$R[1,]))
sapply(mod_list, function(x) tail(x$quantities$DynamicNByage0[1,1,1,]))
library(Rceattle)
library(Rceattle)
devtools::document()
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(dplyr)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$projyr <- 2060
BS2017SS$fleet_control$proj_F_prop <-rep(1,7)
BS2017MS$fleet_control$proj_F_prop <- rep(1, 7)
################################################
# Estimate OMs
################################################
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1,
initMode = 2)
# -- NPFMC Tier 3
ss_run_Tier3 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params,
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
FsprTarget = 0.4, # F40%
FsprLimit = 0.35, # F35%
Plimit = c(0.2, 0.2, 0), # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1,
initMode = 2)
ss_run_dynamicTier3 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
DynamicHCR = TRUE, # Use dynamic reference points
FsprTarget = 0.4, # F40%
FsprLimit = 0.35, # F35%
Plimit = c(0.2, 0.2, 0), # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1,
initMode = 2)
plot_depletionSSB(list(ss_run, ss_run_dynamicTier3, ss_run_Tier3))
plot_depletionSSB(list(ss_run, ss_run_Tier3))
plot_depletionSSB(list(ss_run, ss_run_Tier3, ss_run_dynamicTier3))
plot_depletionSSB(list(ss_run, ss_run_Tier3, ss_run_dynamicTier3))
plot_ssb(list(ss_run, ss_run_Tier3, ss_run_dynamicTier3))
plot_ssb(list(ss_run, ss_run_Tier3, ss_run_dynamicTier3), incl_proj = TRUE)
plot_ssb(list(ss_run, ss_run_Tier3), incl_proj = TRUE)
plot_ssb(list(ss_run_dynamicTier3, ss_run, ss_run_Tier3, ss_run_dynamicTier3), incl_proj = TRUE)
plot_ssb(list(ss_run_dynamicTier3, ss_run, ss_run_Tier3), incl_proj = TRUE)
check <- ss_run_dynamicTier3
check$quantities$biomassSSB <- check$quantities$DynamicSB0
plot_ssb(list(ss_run, ss_run_Tier3, check), incl_proj = TRUE)
library(Rceattle)
library(Rceattle)
library(dplyr)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$projyr <- 2060
BS2017SS$fleet_control$proj_F_prop <-rep(1,7)
BS2017MS$fleet_control$proj_F_prop <- rep(1, 7)
################################################
# Estimate OMs
################################################
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1,
initMode = 2)
# -- NPFMC Tier 3
ss_run_Tier3 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params,
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
FsprTarget = 0.4, # F40%
FsprLimit = 0.35, # F35%
Plimit = c(0.2, 0.2, 0), # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1,
initMode = 2)
ss_run_dynamicTier3 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
DynamicHCR = TRUE, # Use dynamic reference points
FsprTarget = 0.4, # F40%
FsprLimit = 0.35, # F35%
Plimit = c(0.2, 0.2, 0), # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1,
initMode = 2)
plot_depletionSSB(list(ss_run, ss_run_Tier3, ss_run_dynamicTier3))
plot_ssb(list(ss_run, ss_run_Tier3, ss_run_dynamicTier3), incl_proj = TRUE)
check <- ss_run_dynamicTier3
check$quantities$biomassSSB <- check$quantities$DynamicSB0
plot_ssb(list(ss_run, ss_run_Tier3, check), incl_proj = TRUE)
plot_ssb(list(ss_run, ss_run_Tier3, check, ss_run_dynamicTier3), incl_proj = TRUE)
plot_depletionSSB(list(ss_run, ss_run_Tier3, ss_run_dynamicTier3))
plot_depletionSSB(list(ss_run, ss_run_Tier3, ss_run_dynamicTier3), incl_proj = TRUE)
library(Rceattle)
library(Rceattle)
library(dplyr)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$projyr <- 2060
BS2017SS$fleet_control$proj_F_prop <-rep(1,7)
BS2017MS$fleet_control$proj_F_prop <- rep(1, 7)
################################################
# Estimate OMs
################################################
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1,
initMode = 2)
# -- NPFMC Tier 3
ss_run_Tier3 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params,
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
FsprTarget = 0.4, # F40%
FsprLimit = 0.35, # F35%
Plimit = c(0.2, 0.2, 0), # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1,
initMode = 2)
ss_run_dynamicTier3 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
DynamicHCR = TRUE, # Use dynamic reference points
FsprTarget = 0.4, # F40%
FsprLimit = 0.35, # F35%
Plimit = c(0.2, 0.2, 0), # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1,
initMode = 2)
ss_run_dynamicTier3$quantities$DynamicNByage0[1,1,1,1:10]
ss_run_dynamicTier3$quantities$R[1,1:10]
ss_run_Tier3$quantities$SPRtarget
library(Rceattle)
EMs_from_OM_Sim_1 <- readRDS("D:/GitHub/Rceattle_MSE/Runs/GOA1977/SSM_OM/SS_estM_Cat1_EM/ConstantR/No cap/EMs_from_OM_Sim_1.rds")
MSE = list(Sim_1 = EMs_from_OM_Sim_1)
mse = list(Sim_1 = EMs_from_OM_Sim_1)
############################################
## Set up
############################################
library(dplyr)
# HCR Switches (make length of nspp if not)
extend_length <- function(x, nspp){
if(length(x) == nspp){ return(x)}
else {return(rep(x, nspp))}
}
## Operating model dimensions
# - determined from OM sim 1
# - should be the same as for the EM
nspp <- mse$Sim_1$OM$data_list$nspp
nsex <- mse$Sim_1$OM$data_list$nsex
flt_type <- mse$Sim_1$OM$data_list$fleet_control$Fleet_type
flts <- mse$Sim_1$OM$data_list$fleet_control$Fleet_code[which(flt_type == 1)]
nflts = length(flts)
flt_spp <- mse$Sim_1$OM$data_list$fleet_control$Species
styr <- mse$Sim_1$OM$data_list$styr
endyr <- mse$Sim_1$OM$data_list$meanyr
projyr <- mse$Sim_1$EM$EM$data_list$projyr
projyrs <- (endyr+1):projyr
projyrs_ind <- projyrs - endyr
HCR <- mse$Sim_1$EM[[1]]$data_list$HCR
Ptarget <- extend_length(mse$Sim_1$EM[[1]]$data_list$Ptarget, nspp)
Plimit <- extend_length(mse$Sim_1$EM[[1]]$data_list$Plimit, nspp)
Alpha <- extend_length(mse$Sim_1$EM[[1]]$data_list$Alpha, nspp)
## MSE specifications
nsim <- length(mse)
## MSE Output
# - Catch is by fleet
mse_summary <- data.frame(matrix(NA, nrow = nflts+nspp+1, ncol = 16))
colnames(mse_summary) <- c("Species",
"Fleet_name",
"Fleet_code",
"Average Catch",
"Catch IAV",
"P(Closed)",
"Avg terminal SSB Relative MSE",
"EM: P(Fy > Flimit)",
"EM: P(SSB < SSBlimit)",
"OM: P(Fy > Flimit)",
"OM: P(SSB < SSBlimit)",
"EM: P(Fy > Flimit) but OM: P(Fy < Flimit)",
"EM: P(Fy < Flimit) but OM: P(Fy > Flimit)",
"EM: P(SSB < SSBlimit) but OM: P(SSB > SSBlimit)",
"EM: P(SSB > SSBlimit) but OM: P(SSB < SSBlimit)",
# "OM: Recovery Time",
"OM: Terminal SSB Depletion")
mse_summary$Fleet_name <- c(rep(NA, nspp), mse$Sim_1$OM$data_list$fleet_control$Fleet_name[flts], "All")
mse_summary$Fleet_code <- c(rep(NA, nspp), mse$Sim_1$OM$data_list$fleet_control$Fleet_code[flts], "All")
mse_summary$Species <- c(mse$Sim_1$OM$data_list$spnames, mse$Sim_1$OM$data_list$fleet_control$Species[flts], "All")
?slice
?pull
i
i = 1
flt = flts[i]
# - Mean catch by fleet
mse_summary$`Average Catch`[i+nspp] <- mean(sapply(mse, function(x)
x$OM$data_list$fsh_biom %>%
filter(Fleet_code == flt & Year %in% projyrs) %>%
pull(Catch)
), na.rm = TRUE)
# - Catch IAV by fleet
catch_list_tmp <- lapply(mse, function(x)
x$OM$data_list$fsh_biom %>%
filter(Fleet_code == flt & Year %in% projyrs) %>%
pull(Catch)
)
catch_list_tmp
projyrs_ind
length(catch_list_tmp[[1]])
projyrs_ind[-1]
catch_list_tmp[[sim]][-1]
sim = 1
catch_list_tmp[[sim]][-1]
catch_list_tmp[[sim]]
lag
lag(catch_list_tmp[[sim]])
catch_list_tmp[[sim]][-1]
?lag
lag(c(1:3), -1)
lag(c(1:3), 1)
lag(catch_list_tmp[[sim]], 1
)
(lag(catch_list_tmp[[sim]], 1) - catch_list_tmp[[sim]])^2
sum((lag(catch_list_tmp[[sim]], 1) - catch_list_tmp[[sim]])^2, na.rm = TRUE)
# - P(Closed) by fleet
mse_summary$`P(Closed)`[i+nspp] <- sum(
sapply(mse, function(x)
nrow(x$OM$data_list$fsh_biom %>%
filter(Fleet_code == flt & Year %in% projyrs & Catch < 1)
)
)
)/length(projyrs)/nsim # Using less than 1 here just in case super small catches and fishery is effectively close
mse_summary$`P(Closed)`[i+nspp]
catch_list_tmp
sapply(catch_list_tmp, function(x)
length(which(x < 1)) # Using less than 1 here just in case super small catches and fishery is effectively close
/length(x)))
sapply(catch_list_tmp, function(x)
length(which(x < 1)) # Using less than 1 here just in case super small catches and fishery is effectively close
/length(x))
sp = 1
# - Mean catch by species
mse_summary$`Average Catch`[sp] <- mean(
sapply(mse, function(x)
x$OM$data_list$fsh_biom %>%
filter(Species == sp & Year %in% projyrs) %>%
pull(Catch)
), na.rm = TRUE)
# - Catch IAV by species
catch_list_tmp <- suppressMessages(lapply(mse, function(x)
x$OM$data_list$fsh_biom %>%
filter(Species == sp & Year %in% projyrs) %>%
group_by(Year) %>%
summarise(Catch = sum(Catch)))) # Sum catch across species
catch_list_tmp
# - Catch IAV by species
catch_list_tmp <- suppressMessages(lapply(mse, function(x)
x$OM$data_list$fsh_biom %>%
filter(Species == sp & Year %in% projyrs) %>%
group_by(Year) %>%
summarise(Catch = sum(Catch)) %>%
pull(Catch)
)) # Sum catch across species
catch_list_tmp
############################################
## Catch performance metrics across species
# - Average catch
# - Catch IAV
# - P(Closed)
catch_list_tmp <- suppressMessages(lapply(mse, function(x)
x$OM$data_list$fsh_biom %>%
filter(Year %in% projyrs) %>%
group_by(Year) %>%
summarise(Catch = sum(Catch)) %>%
pull(Catch)
)
) # Sum catch across species
catch_list_tmp
unlist(catch_list_tmp)
flt_spp
EMs_from_OM_Sim_1 <- readRDS("D:/GitHub/Rceattle/check/EMs_from_OM_Sim_1.rds")
library(Rceattle)
library(dplyr)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$projyr <- 2060
BS2017SS$fleet_control$proj_F_prop <-rep(1,7)
BS2017MS$fleet_control$proj_F_prop <- rep(1, 7)
#
# BS2017SS$fsh_biom <- BS2017SS$fsh_biom %>%
#   mutate(Catch = ifelse(Year > 2000 & grep( "Cod", BS2017SS$fsh_biom$Fleet_name), Catch * 4,
#                         Catch)
#   )
################################################
# Estimate OMs
################################################
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1,
initMode = 2)
# - Single-species fixed M
alpha = exp(c(4.121, 2.119, 1.553))
ss_run_ricker <- Rceattle::fit_mod(
data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
M1Fun = build_M1(M1_model = 0,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
recFun = build_srr(srr_fun = 0,
srr_pred_fun = 3,
proj_mean_rec = FALSE,
srr_est_mode = 1,
srr_prior_mean = alpha,
srr_prior_sd = 0.2),
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1,
initMode = 2)
# -- NPFMC Tier 3
ss_run_Tier3 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params,
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
FsprTarget = 0.4, # F40%
FsprLimit = 0.35, # F35%
Plimit = c(0.2, 0.2, 0), # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1,
initMode = 2)
ss_run_dynamicTier3 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
DynamicHCR = TRUE, # Use dynamic reference points
FsprTarget = 0.4, # F40%
FsprLimit = 0.35, # F35%
Plimit = c(0.2, 0.2, 0), # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1,
initMode = 2)
plot_depletionSSB(list(ss_run, ss_run_Tier3, ss_run_dynamicTier3), incl_proj = TRUE, model_names = 1:3)
plot_ssb(list(ss_run, ss_run_Tier3, ss_run_dynamicTier3), incl_proj = TRUE)
check <- ss_run_dynamicTier3
check$quantities$biomassSSB <- check$quantities$DynamicSB0
plot_ssb(list(ss_run, ss_run_Tier3, check, ss_run_dynamicTier3), incl_proj = TRUE)
ss_run_dynamicTier3$quantities$DynamicNByage0[1,1,1,1:10]
ss_run_dynamicTier3$quantities$R[1,1:10]
mod_list <- list(ss_run_dynamicTier3, ss_run_ricker, EMs_from_OM_Sim_1$OM, EMs_from_OM_Sim_1$EM$`OM_Sim_1. EM_yr_2060`)
plot_ssb(mod_list, incl_proj = TRUE)
plot_stock_recruit(mod_list)
plot_depletionSSB(mod_list, incl_proj = TRUE)
plot_ssb(mod_list, incl_proj = TRUE)
plot_stock_recruit(mod_list)
plot_depletionSSB(mod_list, incl_proj = TRUE)
install.packages("D:/GitHub/Rceattle/Rceattle_1.0.0.0000.tar.gz", repos = NULL, type = "source")
install.packages("D:/GitHub/Rceattle/Rceattle_1.0.0.0000.tar.gz", repos = NULL, type = "source")
library(Rceattle)
library(Rceattle)
mean(rlnorm(1000,1,0.2))
mean(rlnorm(1000,1,0.2))
mean(rlnorm(1000,log(10),0.2))
mean(rlnorm(1000,log(10),0.2))
mean(rlnorm(1000,log(10),0.2))
mean(rlnorm(1000,log(10),0.2))
mean(rlnorm(1000,log(10),0.2))
mean(rlnorm(10000,log(10),0.2))
mean(rlnorm(10000,log(10)-0.2^2/2,0.2))
mean(rlnorm(10000,log(10)-0.2^2/2,0.2))
mean(rlnorm(10000,log(10)-0.2^2/2,0.2))
mean(rlnorm(10000,log(10)-0.2^2/2,0.2))
mean(rlnorm(10000,log(10)-0.2^2/2,0.2))
mean(rlnorm(10000,log(10)-0.2^2/2,0.2))
mean(rlnorm(10000,log(10)-0.2^2/2,0.2))
(rlnorm(10000,log(10)-0.2^2/2,0.2))
(plnorm(10000,log(10)-0.2^2/2,0.2))
(plnorm(10,log(10)-0.2^2/2,0.2))
(plnorm(log(10),log(10)-0.2^2/2,0.2))
(plnorm((10),log(10)-0.2^2/2,0.2))
(plnorm((10),log(10),0.2))
library(Rceattle)
library(dplyr)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
BS2017SS$fleet_control$Estimate_q
BS2017SS$fleet_control$Q_prior
library(Rceattle)
library(Rceattle)
library(dplyr)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$projyr <- 2060
BS2017SS$fleet_control$proj_F_prop <-rep(1,7)
BS2017MS$fleet_control$proj_F_prop <- rep(1, 7)
#
# BS2017SS$fsh_biom <- BS2017SS$fsh_biom %>%
#   mutate(Catch = ifelse(Year > 2000 & grep( "Cod", BS2017SS$fsh_biom$Fleet_name), Catch * 4,
#                         Catch)
#   )
################################################
# Estimate OMs
################################################
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1,
initMode = 2)
# -- NPFMC Tier 3
ss_run_Tier3 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params,
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
FsprTarget = 0.4, # F40%
FsprLimit = 0.35, # F35%
Plimit = c(0.2, 0.2, 0), # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1,
initMode = 2)
library(Rceattle)
library(Rceattle)
library(Rceattle)
