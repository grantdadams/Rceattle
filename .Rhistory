random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# Previous time series
ms_run_old <- ms_run_new
ms_run_old$quantities$R[,1:39] <- CEATTLE_classic_MS$quantities$R[,1:39]
ms_run_old$quantities$biomass[,1:39] <- CEATTLE_classic_MS$quantities$biomass
ms_run_old$quantities$biomassSSB[,1:39] <- CEATTLE_classic_MS$quantities$biomassSSB
# Plot
plot_recruitment(list(ms_run_old_params, ms_run_old))
plot_biomass(list(ms_run_old_params, ms_run_old))
plot_ssb(list(ms_run_old_params, ms_run_old))
CEATTLE_classic_MS$quantities$Pyrs[1,1:10,1:39] - ms_run_old_params$quantities$Pyrs[1,1,1:10,1:39]
CEATTLE_classic_MS$quantities$Pyrs[1,1:10,1:39]
CEATTLE_classic_MS$quantities$Pyrs
dim( CEATTLE_classic_MS$quantities$Pyrs)
CEATTLE_classic_MS$quantities$Pyrs[1:39,1:12,1]
ms_run_old_params$quantities$Pyrs[1,1,1:10,1:39]
CEATTLE_classic_MS$quantities$Pyrs[1:39,1:12,1] - t(ms_run_old_params$quantities$Pyrs[1,1,1:12,1:39])
t(ms_run_old_params$quantities$Pyrs[1,1,1:12,1:39])
CEATTLE_classic_MS$quantities$Pyrs[1:39,1:12,1]
BS2017MS_new$Pyrs
ms_run_old_params$data_list$Pyrs
check <- rearrange_dat(ms_run_old_params$data_list)
t(check$Pyrs[1,1,1:12,1:39])
data_list <- ms_run_old_params$data_list
## Set up pyrs ----
# - Convert to array
data_list$Pyrs <- data_list$Pyrs %>%
mutate(Species = as.numeric(as.character(Species)),
Sex = as.numeric(as.character(Sex)),
Year = as.numeric(as.character(Year)) - data_list$styr + 1)
Pyrs <- array(0, dim = c(data_list$nspp, 2, max(data_list$nages), length(data_list$styr:data_list$endyr))) # FIXME: Change for forecast
nrow(data_list$Pyrs)
i = 1
sp <- data_list$Pyrs$Species[i]
sex <- data_list$Pyrs$Sex[i]
yr <- data_list$Pyrs$Year[i]
yr
sex
sp
sex
if(sex == 0){
sex = c(1,2)
}
data_list$Pyrs$Year[i]
yr <- as.numeric(as.character(data_list$Pyrs$Year[i])) - data_list$styr + 1
yr
yr <= (data_list$endyr - data_list$styr + 1)
data_list$endyr
Pyrs
yr
if(yr <= (data_list$endyr - data_list$styr + 1)){
for(j in 1:length(sex)){
Pyrs[sp, sex[j], 1:data_list$nages[sp], yr] <- as.numeric(as.character(data_list$Pyrs[i, (1:data_list$nages[sp]) + 3]))
}
}
yrs[sp, sex[j], 1:data_list$nages[sp], yr]
yrs[sp, 1, 1:12,]
Pyrs[sp, 1, 1:12,]
yr
Pyrs <- array(0, dim = c(data_list$nspp, 2, max(data_list$nages), length(data_list$styr:data_list$endyr))) # FIXME: Change for forecast
if(nrow(data_list$Pyrs)>0){
for (i in 1:nrow(data_list$Pyrs)) {
sp <- data_list$Pyrs$Species[i]
sex <- data_list$Pyrs$Sex[i]
yr <- data_list$Pyrs$Year[i]
if(sex == 0){
sex = c(1,2)
}
if(yr <= (data_list$endyr - data_list$styr + 1)){
for(j in 1:length(sex)){
Pyrs[sp, sex[j], 1:data_list$nages[sp], yr] <- as.numeric(as.character(data_list$Pyrs[i, (1:data_list$nages[sp]) + 3]))
}
}
}
}
#' Rearrange
#'
#' @description Function to rearrange a \code{data_list} object to be read into TMB CEATTLE
#'
#' @param data_list a data_list created from \code{\link{build_dat}}.
#' @export
rearrange_dat <- function(data_list){
'%!in%' <- function(x,y)!('%in%'(x,y))
# Step 1 - remove numeric objects from control
data_list$ln_srv_q_prior <- log(data_list$fleet_control$Q_prior)
data_list$fleet_control <- data_list$fleet_control[,-which(colnames(data_list$fleet_control) %in% c("Sel_sd_prior", "Q_prior", "Q_sd_prior", "Time_varying_q_sd_prior", "Survey_sd_prior", "proj_F", "Catch_sd_prior"))]
data_list$fleet_control$Time_varying_sel <- round(data_list$fleet_control$Time_varying_sel)
# Step 2 -  Seperate survey biomass info from observation
data_list$srv_biom_ctl <- data_list$srv_biom[,c("Fleet_code", "Species", "Year")]
data_list$srv_biom_n <- as.matrix(data_list$srv_biom[,c("Month")])
data_list$srv_biom_obs <- data_list$srv_biom[,c("Observation", "Log_sd")]
# Step 3 -  Seperate catch biomass info from observation
data_list$fsh_biom_ctl <- data_list$fsh_biom[,c("Fleet_code", "Species", "Year")]
data_list$fsh_biom_n <- as.matrix(data_list$fsh_biom[,c("Month")])
data_list$fsh_biom_obs <- data_list$fsh_biom[,c("Catch", "Log_sd")]
# Step 4 -  Seperate survey comp info from observation
data_list$comp_ctl <- data_list$comp_data[,c("Fleet_code", "Species", "Sex", "Age0_Length1", "Year")]
data_list$comp_n <- data_list$comp_data[,c("Month", "Sample_size")]
data_list$comp_obs <- data_list$comp_data[,grep("Comp_", colnames(data_list$comp_data))]
if(sum(rowSums(data_list$comp_obs, na.rm = TRUE) %in% 0) > 0){stop("Some rows of composition data sum to 0: please remove or set all to 1 and sample size to 0")}
# Step 5 -  Seperate uobs info from observation
data_list$UobsWtAge_ctl <- data_list$UobsWtAge[,c("Pred", "Prey", "Pred_sex", "Prey_sex", "Pred_age", "Prey_age", "Year")]
data_list$UobsWtAge <- data_list$UobsWtAge[,c("Sample_size", "Stomach_proportion_by_weight")]
# Step 6 -  Seperate survey empirical selectivity info from observation
yrs <- data_list$styr:data_list$endyr
if(nrow(data_list$emp_sel) > 0 ){
for(i in 1:nrow(data_list$emp_sel)){
# Fill in years
if(data_list$emp_sel$Year[i] == 0){
# Change first year
data_list$emp_sel$Year[i] <- yrs[1]
# Change the rest
emp_sel_tmp <- data_list$emp_sel[i,]
emp_sel_tmp$Year <- yrs[2]
emp_sel <- emp_sel_tmp
for(yr in 3:length(yrs)){
emp_sel_tmp$Year <- yrs[yr]
emp_sel <- rbind(emp_sel, emp_sel_tmp)
}
data_list$emp_sel <- rbind(data_list$emp_sel, emp_sel)
}
}
}
data_list$emp_sel_ctl <- as.matrix(data_list$emp_sel[,c("Fleet_code", "Species", "Sex", "Year")])
data_list$emp_sel_obs <- matrix(as.numeric(unlist(data_list$emp_sel[,grep("Comp_", colnames(data_list$emp_sel))])), nrow = nrow(data_list$emp_sel_ctl))
# Convert fleet control to numeric
data_list$fleet_control$Fleet_name <- suppressWarnings(as.numeric(as.character(data_list$fleet_control$Fleet_name)))
data_list$fleet_control$Time_varying_q <- suppressWarnings(as.numeric(as.character(data_list$fleet_control$Time_varying_q)))
# Species names
data_list$spnames <- NULL
# Input missing acucmulation ages - defaults to age range
data_list$fleet_control <- data_list$fleet_control %>%
dplyr::mutate(Nselages = ifelse(is.na(Nselages), -999, Nselages),
Accumatation_age_lower = ifelse(is.na(Accumatation_age_lower), -999, Nselages),
Accumatation_age_upper = ifelse(is.na(Accumatation_age_upper), 999, Nselages),
Age_first_selected = ifelse(is.na(Age_first_selected), data_list$minage[Species], Age_first_selected)
)
# Rearrange age-transition matrix ----
age_trans_matrix <- data_list$age_trans_matrix
unique_age_transition <- unique(as.character(age_trans_matrix$Age_transition_index))
if(sum(data_list$pop_age_transition_index %!in% unique_age_transition) > 0){
stop("Check population age_transition index, not in age_transition file")
}
age_transition <- array(0, dim = c(length(unique_age_transition), 2, max(data_list$nages, na.rm = T), max(data_list$nlengths, na.rm = T)))
for (i in 1:nrow(age_trans_matrix)) {
age_transition_ind <- as.numeric(as.character(age_trans_matrix$Age_transition_index[i]))
sex <- as.numeric(as.character(age_trans_matrix$Sex[i]))
sp <- as.numeric(as.character(age_trans_matrix$Species[i]))
age <- as.numeric(as.character(age_trans_matrix$Age[i])) - data_list$minage[sp] + 1
if (age > data_list$nages[sp]) {
message(paste0("Error: number of ages in age_trans_matrix for species: ", sp, " and index: ", age_transition_ind))
message(paste0("is greater than the number of ages specified in the control"))
message(paste0("Please remove or change nages in control"))
stop()
}
# Assign
if(sex == 0){ sex = c(1, 2)}
for(j in 1:length(sex)){
age_transition[age_transition_ind, sex[j], age, 1:data_list$nlengths[sp]] <- as.numeric(as.character(age_trans_matrix[i, (1:data_list$nlengths[sp]) + 5]))
# Normalize
age_transition[age_transition_ind, sex[j], age, 1:data_list$nlengths[sp]] <- age_transition[age_transition_ind, sex[j], age, 1:data_list$nlengths[sp]] / sum(age_transition[age_transition_ind, sex[j], age, 1:data_list$nlengths[sp]], na.rm = TRUE)
}
}
data_list$age_trans_matrix <- age_transition
# Rearrange age_error matrices ----
arm <- array(0, dim = c(data_list$nspp, max(data_list$nages, na.rm = T), max(data_list$nages, na.rm = T)))
data_list$age_error <- as.data.frame(data_list$age_error) # FIXME: somethin is up with data.frames
for (i in 1:nrow(data_list$age_error)) {
sp <- as.numeric(as.character(data_list$age_error$Species[i]))
true_age <- as.numeric(as.character(data_list$age_error$True_age[i])) - data_list$minage[sp] + 1
if (true_age > data_list$nages[sp]) {
message(paste0("Error: number of true ages specified in age_error for species: ", sp))
message(paste0("is greater than the number of ages specified in the control"))
message(paste0("Please remove or change nages in control"))
stop()
}
arm[sp, true_age, 1:data_list$nages[sp]] <- as.numeric(as.character(data_list$age_error[i, (1:data_list$nages[sp]) + 2]))
# Normalize
arm[sp, true_age, 1:data_list$nages[sp]] <- arm[sp, true_age, 1:data_list$nages[sp]] / sum(arm[sp, true_age, 1:data_list$nages[sp]], na.rm = TRUE)
}
data_list$age_error <- arm
## Normalize comp data ----
data_list$comp_obs <- t(apply(data_list$comp_obs, 1, function(x) as.numeric(x) / sum(as.numeric(x), na.rm = TRUE)))
## Set up weight-at-age ----
# - Convert to array
data_list$wt <- data_list$wt %>%
mutate(
Wt_index = as.numeric(as.character(Wt_index)),
Species = as.numeric(as.character(Species)),
Sex = as.numeric(as.character(Sex)),
Year = as.numeric(as.character(Year)) - data_list$styr + 1)
unique_wt <- unique(as.numeric(data_list$wt$Wt_index))
if(sum(data_list$pop_wt_index %!in% unique_wt) > 0){
stop("Check population weight index, not in weight file")
}
if(sum(data_list$ssb_wt_index %!in% unique_wt) > 0){
stop("Check SSB weight index, not in weight file")
}
wt <- array(0, dim = c(length(unique_wt), 2, max(data_list$nages, na.rm = T), length(data_list$styr:data_list$endyr)))
for (i in 1:nrow(data_list$wt)) {
wt_ind <- data_list$wt$Wt_index[i]
sp <- data_list$wt$Species[i]
sex <- data_list$wt$Sex[i]
yr <- data_list$wt$Year[i]
if(yr <= data_list$endyr - data_list$styr + 1){
# If year == 0, set weight to all years
if(yr == (-data_list$styr + 1)){
yr = 1:length(data_list$styr:data_list$endyr)
}
if(sex == 0){ sex = c(1, 2)}
for(j in 1:length(sex)){
if(sum(grepl("[[:space:]]", as.character(data_list$wt[i, (1:data_list$nages[sp]) + 5])))){
stop(paste("Space found in wt data: row", i))
}
wt[wt_ind, sex[j], 1:data_list$nages[sp], yr] <- as.numeric(as.character(data_list$wt[i, (1:data_list$nages[sp]) + 5]))
}
}
}
data_list$wt <- wt
## Set up NByageFixed ----
# - Convert to array
data_list$NByageFixed <- data_list$NByageFixed %>%
mutate(Species = as.numeric(as.character(Species)),
Sex = as.numeric(as.character(Sex)),
Year = as.numeric(as.character(Year)) - data_list$styr + 1)
NByageFixed <- array(0, dim = c(data_list$nspp, 2, max(data_list$nages, na.rm = T), length(data_list$styr:data_list$projyr)))
if(nrow(data_list$NByageFixed) > 0){
for (i in 1:nrow(data_list$NByageFixed)) {
sp <- data_list$NByageFixed$Species[i]
sex <- data_list$NByageFixed$Sex[i]
yr <- data_list$NByageFixed$Year[i]
if(sex == 0){ sex = c(1, 2)}
for(j in 1:length(sex)){
if(yr > 0){
NByageFixed[sp, sex[j], 1:max(data_list$nages, na.rm = T), yr] <- as.numeric(data_list$NByageFixed[i,c(1:max(data_list$nages, na.rm = T))+4])
}
}
}
}
data_list$NByageFixed <- NByageFixed
# Set up environmental indices
# - Fill in missing years with column mean
data_list$env_index <- merge(data_list$env_data, data.frame(Year = data_list$styr:data_list$projyr), all = TRUE)
data_list$env_index <-  data_list$env_index %>%
select(-Year) %>%
mutate_all(~ifelse(is.na(.x), mean(.x, na.rm = TRUE), .x)) %>%
as.matrix()
# - Create matrix for srr curve
if(sum(sapply(data_list$srr_env_indices, function(x) x>ncol(data_list$env_index))) > 0){stop("srr_env_indices greater than the number of indices included")}
data_list$env_index_srr <-  data_list$env_index[, data_list$srr_env_indices] %>%
as.matrix()
## Set up pyrs ----
# - Convert to array
data_list$Pyrs <- data_list$Pyrs %>%
mutate(Species = as.numeric(as.character(Species)),
Sex = as.numeric(as.character(Sex)),
Year = as.numeric(as.character(Year)) - data_list$styr + 1)
Pyrs <- array(0, dim = c(data_list$nspp, 2, max(data_list$nages), length(data_list$styr:data_list$endyr))) # FIXME: Change for forecast
if(nrow(data_list$Pyrs)>0){
for (i in 1:nrow(data_list$Pyrs)) {
sp <- data_list$Pyrs$Species[i]
sex <- data_list$Pyrs$Sex[i]
yr <- data_list$Pyrs$Year[i]
if(sex == 0){
sex = c(1,2)
}
if(yr <= (data_list$endyr - data_list$styr + 1)){
for(j in 1:length(sex)){
Pyrs[sp, sex[j], 1:data_list$nages[sp], yr] <- as.numeric(as.character(data_list$Pyrs[i, (1:data_list$nages[sp]) + 3]))
}
}
}
}
data_list$Pyrs <- Pyrs
# Remove species column from alw, pmature, sex_ratio
data_list$sex_ratio <- data_list$sex_ratio[,-1]
data_list$pmature <- data_list$pmature[,-1]
data_list$aLW <- data_list$aLW[,-1]
# Make data.frames into matrices
df_to_mat <- which(sapply(data_list, function(x) class(x)[1]) == "data.frame")
data_list[df_to_mat] <- lapply(data_list[df_to_mat], as.matrix)
items_to_remove <- c("emp_sel",  "fsh_comp",    "srv_comp",    "fsh_biom",    "srv_biom", "comp_data", "env_data", "spnames",
"aLW", "M1_use_prior", "M2_use_prior", "M1_prior_mean", "M1_prior_sd", "NByageFixed", "estDynamics",
"srr_prior_mean", "srr_prior_sd", "srr_est_mode", "avgnMode", "Ceq", "minNByage")
data_list[items_to_remove] <- NULL
return(data_list)
}
check <- rearrange_dat(ms_run_old_params$data_list)
t(check$Pyrs[1,1,1:12,1:39])
remove.packages("Rceattle")
# Load old model
load("inst/extdata/CEATTLE_classic_MS.Rdata")
# Load data and set up inits
data("BS2017SS")
data("BS2017MS")
BS2017MS$fleet_control <- as.data.frame(t(BS2017MS$fleet_control))
colnames(BS2017MS$fleet_control) <- BS2017MS$fleet_control[1,]
BS2017MS$fleet_control <- BS2017MS$fleet_control[-1,]
BS2017MS$fleet_control <- cbind(data.frame(Fleet_name = rownames(BS2017MS$fleet_control)),
BS2017MS$fleet_control)
rownames(BS2017MS$fleet_control) = NULL
BS2017MS$fleet_control[,-which(colnames(BS2017MS$fleet_control) %in% c("Fleet_name", "Time_varying_q"))] <- apply(
BS2017MS$fleet_control[,-which(colnames(BS2017MS$fleet_control) %in% c("Fleet_name", "Time_varying_q"))], 2, as.numeric)
BS2017MS$M1_base[,-c(1:2)] <- CEATTLE_classic_MS$quantities$M1 # + 0.0001 is in the old one
BS2017MS$srr_prior_mean <- 9
BS2017MS$initMode  <- 1
BS2017MS$M1_base[,-c(1:2)] <- CEATTLE_classic_MS$quantities$M1 # + 0.0001 is in the old one
inits <- build_params(BS2017MS)
# - Update population dynamics from old parameters
inits$init_dev[,1:20] <- CEATTLE_classic_MS$estimated_params$init_dev
inits$rec_dev[,1:39] <- CEATTLE_classic_MS$estimated_params$rec_dev
inits$rec_pars[,1] <- CEATTLE_classic_MS$estimated_params$ln_mn_rec
inits$F_dev[1:3, 1:39] <- CEATTLE_classic_MS$estimated_params$F_dev[,1:39]
inits$ln_mean_F[1:3] <- CEATTLE_classic_MS$estimated_params$ln_mean_F
inits$sel_coff[1:3,1,] <- CEATTLE_classic_MS$estimated_params$fsh_sel_coff
# - Update diet data
BS2017MS_new <- BS2017MS
BS2017MS_new$UobsWtAge <- as.data.frame(BS2017MS_new$UobsWtAge)
for(i in 1:nrow(BS2017MS_new$UobsWtAge)){
BS2017MS_new$UobsWtAge$Stomach_proportion_by_weight[i] <- CEATTLE_classic_MS$data_list$UobsAge[
BS2017MS_new$UobsWtAge$Pred[i], BS2017MS_new$UobsWtAge$Prey[i],
BS2017MS_new$UobsWtAge$Pred_age[i], BS2017MS_new$UobsWtAge$Prey_age[i]
]
}
# - Update foraging data
BS2017MS_new$Pyrs <- as.data.frame(BS2017MS_new$Pyrs)
BS2017MS_new$Pyrs[,4:ncol(BS2017MS_new$Pyrs)] <- rbind(CEATTLE_classic_MS$data_list$Pyrs[-40,,1],
CEATTLE_classic_MS$data_list$Pyrs[-40,,2],
CEATTLE_classic_MS$data_list$Pyrs[-40,,3])
ms_run_old_params <- Rceattle::fit_mod(
data_list = BS2017MS_new,
inits = inits, # Initial parameters from old model
M1Fun = build_M1(M1_model = 0,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 3, # Fix at parameter values
niter = 10, # iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
check <- rearrange_dat(ms_run_old_params$data_list)
t(check$Pyrs[1,1,1:12,1:39])
#  Fit models
ss_run_new <- Rceattle::fit_mod(
data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# - Multi-species
ms_run_new <- Rceattle::fit_mod(
data_list = BS2017MS_new,
inits = ss_run_new$estimated_params, # Initial parameters from single species ests
M1Fun = build_M1(M1_model = 0,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 0, # Estimate
niter = 10, # 3 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# Previous time series
ms_run_old <- ms_run_new
ms_run_old$quantities$R[,1:39] <- CEATTLE_classic_MS$quantities$R[,1:39]
ms_run_old$quantities$biomass[,1:39] <- CEATTLE_classic_MS$quantities$biomass
ms_run_old$quantities$biomassSSB[,1:39] <- CEATTLE_classic_MS$quantities$biomassSSB
# Plot
plot_recruitment(list(ms_run_old_params, ms_run_old))
plot_biomass(list(ms_run_old_params, ms_run_old))
plot_ssb(list(ms_run_old_params, ms_run_old))
# Load old model
load("inst/extdata/CEATTLE_classic_MS.Rdata")
# Load data and set up inits
data("BS2017SS")
data("BS2017MS")
# - Reorganize fleet control
BS2017MS$fleet_control <- as.data.frame(t(BS2017MS$fleet_control))
colnames(BS2017MS$fleet_control) <- BS2017MS$fleet_control[1,]
BS2017MS$fleet_control <- BS2017MS$fleet_control[-1,]
BS2017MS$fleet_control <- cbind(data.frame(Fleet_name = rownames(BS2017MS$fleet_control)),
BS2017MS$fleet_control)
rownames(BS2017MS$fleet_control) = NULL
BS2017MS$fleet_control[,-which(colnames(BS2017MS$fleet_control) %in% c("Fleet_name", "Time_varying_q"))] <- apply(
BS2017MS$fleet_control[,-which(colnames(BS2017MS$fleet_control) %in% c("Fleet_name", "Time_varying_q"))], 2, as.numeric)
BS2017MS$M1_base[,-c(1:2)] <- CEATTLE_classic_MS$quantities$M1 # + 0.0001 is in the old one
BS2017MS$srr_prior_mean <- 9
BS2017MS$initMode  <- 1
BS2017MS$M1_base[,-c(1:2)] <- CEATTLE_classic_MS$quantities$M1 # + 0.0001 is in the old one
inits <- build_params(BS2017MS)
# - Update population dynamics from old parameters
inits$init_dev[,1:20] <- CEATTLE_classic_MS$estimated_params$init_dev
inits$rec_dev[,1:39] <- CEATTLE_classic_MS$estimated_params$rec_dev
inits$rec_pars[,1] <- CEATTLE_classic_MS$estimated_params$ln_mn_rec
inits$F_dev[1:3, 1:39] <- CEATTLE_classic_MS$estimated_params$F_dev[,1:39]
inits$ln_mean_F[1:3] <- CEATTLE_classic_MS$estimated_params$ln_mean_F
inits$sel_coff[1:3,1,] <- CEATTLE_classic_MS$estimated_params$fsh_sel_coff
# - Update diet data
BS2017MS_new <- BS2017MS
BS2017MS_new$UobsWtAge <- as.data.frame(BS2017MS_new$UobsWtAge)
for(i in 1:nrow(BS2017MS_new$UobsWtAge)){
BS2017MS_new$UobsWtAge$Stomach_proportion_by_weight[i] <- CEATTLE_classic_MS$data_list$UobsAge[
BS2017MS_new$UobsWtAge$Pred[i], BS2017MS_new$UobsWtAge$Prey[i],
BS2017MS_new$UobsWtAge$Pred_age[i], BS2017MS_new$UobsWtAge$Prey_age[i]
]
}
# - Update foraging data
BS2017MS_new$Pyrs <- as.data.frame(BS2017MS_new$Pyrs)
BS2017MS_new$Pyrs[,4:ncol(BS2017MS_new$Pyrs)] <- rbind(CEATTLE_classic_MS$data_list$Pyrs[-40,,1],
CEATTLE_classic_MS$data_list$Pyrs[-40,,2],
CEATTLE_classic_MS$data_list$Pyrs[-40,,3])
BS2017MS$Pyrs <- BS2017MS_new$Pyrs
BS2017MS$UobsWtAge <- BS2017MS_new$UobsWtAge
BS2017SS$UobsWtAge <- BS2017MS_new$UobsWtAge
BS2017SS$Pyrs <- BS2017MS_new$Pyrs
usethis::use_data(BS2017MS, BS2017SS, overwrite = TRUE)
remove.packages("Rceattle")
# Load old model
load("inst/extdata/CEATTLE_classic_MS.Rdata")
# Load data and set up inits
data("BS2017SS")
data("BS2017MS")
# - Reorganize fleet control
BS2017MS$fleet_control <- as.data.frame(t(BS2017MS$fleet_control))
colnames(BS2017MS$fleet_control) <- BS2017MS$fleet_control[1,]
BS2017MS$fleet_control <- BS2017MS$fleet_control[-1,]
BS2017MS$fleet_control <- cbind(data.frame(Fleet_name = rownames(BS2017MS$fleet_control)),
BS2017MS$fleet_control)
rownames(BS2017MS$fleet_control) = NULL
BS2017MS$fleet_control[,-which(colnames(BS2017MS$fleet_control) %in% c("Fleet_name", "Time_varying_q"))] <- apply(
BS2017MS$fleet_control[,-which(colnames(BS2017MS$fleet_control) %in% c("Fleet_name", "Time_varying_q"))], 2, as.numeric)
BS2017MS$M1_base[,-c(1:2)] <- CEATTLE_classic_MS$quantities$M1 # + 0.0001 is in the old one
BS2017MS$srr_prior_mean <- 9
BS2017MS$initMode  <- 1
BS2017MS$M1_base[,-c(1:2)] <- CEATTLE_classic_MS$quantities$M1 # + 0.0001 is in the old one
inits <- build_params(BS2017MS)
# Load old model
library(Rceattle)
load("inst/extdata/CEATTLE_classic_MS.Rdata")
# Load data and set up inits
data("BS2017SS")
data("BS2017MS")
# - Reorganize fleet control
BS2017MS$fleet_control <- as.data.frame(t(BS2017MS$fleet_control))
colnames(BS2017MS$fleet_control) <- BS2017MS$fleet_control[1,]
BS2017MS$fleet_control <- BS2017MS$fleet_control[-1,]
BS2017MS$fleet_control <- cbind(data.frame(Fleet_name = rownames(BS2017MS$fleet_control)),
BS2017MS$fleet_control)
rownames(BS2017MS$fleet_control) = NULL
BS2017MS$fleet_control[,-which(colnames(BS2017MS$fleet_control) %in% c("Fleet_name", "Time_varying_q"))] <- apply(
BS2017MS$fleet_control[,-which(colnames(BS2017MS$fleet_control) %in% c("Fleet_name", "Time_varying_q"))], 2, as.numeric)
BS2017MS$M1_base[,-c(1:2)] <- CEATTLE_classic_MS$quantities$M1 # + 0.0001 is in the old one
BS2017MS$srr_prior_mean <- 9
BS2017MS$initMode  <- 1
BS2017MS$M1_base[,-c(1:2)] <- CEATTLE_classic_MS$quantities$M1 # + 0.0001 is in the old one
inits <- build_params(BS2017MS)
# - Update population dynamics from old parameters
inits$init_dev[,1:20] <- CEATTLE_classic_MS$estimated_params$init_dev
inits$rec_dev[,1:39] <- CEATTLE_classic_MS$estimated_params$rec_dev
inits$rec_pars[,1] <- CEATTLE_classic_MS$estimated_params$ln_mn_rec
inits$F_dev[1:3, 1:39] <- CEATTLE_classic_MS$estimated_params$F_dev[,1:39]
BS2017MS$fleet_control
# Load data and set up inits
data("BS2017SS")
data("BS2017MS")
BS2017MS$fleet_control
remove.packages("Rceattle")
# Grant Adams, Kirstin Holsman, Andre Punt - April 2019
# Code to run Bering Sea CEATTLE model in TMB
# Citation:
# Holsman, K. K., Ianelli, J., Aydin, K., Punt, A. E., and Moffitt, E. A. 2015. A comparison of fisheries biological reference points estimated from temperature-specific multi-species and single-species climate-enhanced stock assessment models. Deep-Sea Research Part II: Topical Studies in Oceanography, 134: 360–378.
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
setwd("~/Documents/GitHub/Rceattle/src/TMB")
library(TMB )
compile("ceattle_v01_11.cpp")
compile("ceattle_v01_11.cpp")
