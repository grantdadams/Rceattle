}
} # End of logfit
#' CPUE residual
#'
#' Plot of residuals CPUE indices on log-scale (r4ss-style)
#'
#' @param file name of a file to identified the files exported by the
#'   function.
#' @param Rceattle Single or list of Rceattle model objects exported from \code{\link{Rceattle}}
#' @param single.plots if TRUE plot invidual fits else make multiplot
#' @param model_names Names of models to be used in legend
#' @param line_col Colors of models to be used for line color
#' @param species Species names for legend
#' @param right_adj How much right side of the x-axis for fitting the legend. As percentage.
#' @param top_adj How much top side of the y-axis for fitting the legend. As percentage.
#' @param incl_proj TRUE/FALSE include projections years
#' @param width plot width
#' @param height plot hight
#' @export
plot_indexresidual <- function(Rceattle,
file = NULL,
model_names = NULL,
line_col = NULL,
species = NULL,
right_adj = 0,
top_adj = 0.05,
incl_proj = FALSE,
single.plots=FALSE,
width=NULL,
height=NULL){
# Convert single one into a list
if(class(Rceattle) == "Rceattle"){
Rceattle <- list(Rceattle)
}
# Species names
if(is.null(species)){
species =  Rceattle[[1]]$data_list$spnames
}
# Extract data objects
Years <- list()
Endyrs <- list()
Srv_hat_list <- list()
for(i in 1:length(Rceattle)){
Endyrs[[i]] <- Rceattle[[i]]$data_list$endyr
if(incl_proj == FALSE){
Years[[i]] <- Rceattle[[i]]$data_list$styr:Rceattle[[i]]$data_list$endyr
}
if(incl_proj){
Years[[i]] <- Rceattle[[i]]$data_list$styr:Rceattle[[i]]$data_list$projyr
}
# Get estimate and residual
Srv_hat_list[[i]] <- Rceattle[[i]]$data_list$srv_biom
Srv_hat_list[[i]]$Estimate <- Rceattle[[i]]$quantities$srv_bio_hat
Srv_hat_list[[i]]$Residual <- log(Rceattle[[i]]$quantities$srv_bio_hat) - log(Rceattle[[i]]$data_list$srv_biom$Observation)
}
max_endyr <- max(unlist(Endyrs), na.rm = TRUE)
nyrs_vec <- sapply(Years, length)
nyrs <- max(nyrs_vec)
nspp <- Rceattle[[1]]$data_list$nspp
# Plot limits
fleet_control <- (Rceattle[[1]]$data_list$fleet_control)
srv_biom <- (Rceattle[[1]]$data_list$srv_biom)
srvs <- sort(unique(srv_biom$Fleet_code))
nsrv <- length(srvs)
ymax <- c()
ymin <- c()
for(srv in 1:nsrv){
for(i in 1:length(Rceattle)){
srv_ind <- which(Srv_hat_list[[i]]$Fleet_code == srvs[srv])
ymax[srv] <- max((c(ymax[srv], Srv_hat_list[[i]]$Residual[srv_ind])), na.rm = T)
ymin[srv] <- min((c(ymin[srv], Srv_hat_list[[i]]$Residual[srv_ind])), na.rm = T)
}
}
ymax <- ymax + top_adj * (ymax-ymin)
positions=seq(-0.2, 0.2, length.out = length(Rceattle))
# Assume colors if not provided
if (is.null(line_col)) {
line_col <- rev(oce::oce.colorsViridis(length(Rceattle)))
}
# Plot trajectory
loops <- ifelse(is.null(file), 1, 2)
for (j in 1:loops) {
# Plot/save each survey individually
if(single.plots==TRUE){
if(is.null(width)) width = 5
if(is.null(height)) height = 3.5
for(srv in 1:nsrv){
Par = list(mfrow=c(1,1),mar = c(3.5, 3.5, 0.5, 0.1), mgp =c(2.,0.5,0), tck = -0.02,cex=0.8)
# Save
if(j == 2){
filename <- paste0(file, "fleet",srvs[j]," ",as.character(fleet_control$Fleet_name[srvs[srv]]), "_survey_index", ".png")
png(file = filename, width = width, height = height, res = 200, units = "in")
}
minyr <- min(sapply(Srv_hat_list, function(x) min(x[which(x$Fleet_code == srvs[srv] & x$Year > 0),]$Year)))
maxyr <- max(sapply(Srv_hat_list, function(x) max(x[which(x$Fleet_code == srvs[srv]),]$Year)))
par(Par)
plot(NA, NA, ylab="Index residual", xlab="Year", ylim = c((ymin[srv]), (ymax[srv])), xlim = c(minyr, maxyr + (maxyr - minyr) * right_adj), type='n', xaxt="n", yaxt="n")
abline(h = 0, lty = 2)
axis(1,labels=TRUE,cex=0.8)
axis(2,labels=TRUE,cex=0.8)
# Loop through models
for (k in 1:length(Rceattle)) {
# Subset data by fleet and model
srv_tmp <- Srv_hat_list[[k]][which(Srv_hat_list[[k]]$Fleet_code == srvs[srv]),]
srv_hat_tmp <- Srv_hat_list[[k]][which(Srv_hat_list[[k]]$Fleet_code == srvs[srv]),]
# Plot residual
for(yr in 1:length(srv_hat_tmp$Year)){
lines(rep((srv_hat_tmp$Year[yr] + positions[k]),2),c(0, srv_hat_tmp$Residual[yr]), col = line_col[k])
}
points(srv_hat_tmp$Year + positions[k], srv_hat_tmp$Residual, col=1, pch=21, bg = line_col[k])
}
# Index name
legend('topleft',as.character(fleet_control$Fleet_name[srvs[srv]]),bty="n",y.intersp = -0.2,cex=0.8)
# Model names
if(!is.null(model_names)){
legend(
"topright",
legend = model_names,
pch = rep(16, length(line_col)), cex=0.8,
col = line_col,
bty = "n"
)
}
# Save plot
if(j == 2){dev.off()}
}
}
# Plot/save each survey individually
if(single.plots==FALSE){
# Set heights of plot
if(is.null(width)) width = 7
if(is.null(height)) height = ifelse(nsrv==1,5,ifelse(nsrv==2,3.,2.5))*round(nsrv/2+0.01,0)
Par = list(mfrow=c(round(nsrv/2+0.01,0),ifelse(nsrv==1,1,2)),mai=c(0.35,0.15,0,.15),omi = c(0.2,0.25,0.2,0) + 0.1,mgp=c(2,0.5,0), tck = -0.02,cex=0.8)
# Save
if(j == 2){
filename <- paste0(file,"_survey_indices", ".png")
png(file = filename, width = width, height = height, res = 200, units = "in")
}
par(Par)
for(srv in 1:nsrv){
minyr <- min(sapply(Srv_hat_list, function(x) min(x[which(x$Fleet_code == srvs[srv] & x$Year > 0),]$Year)))
maxyr <- max(sapply(Srv_hat_list, function(x) max(x[which(x$Fleet_code == srvs[srv]),]$Year)))
xlim <- c(minyr, maxyr)
if(srv == 1){
xlim <- c(minyr, maxyr + (maxyr - minyr) * right_adj)
}
plot(NA, NA, ylab="", xlab="", ylim = c((ymin[srv]), (ymax[srv])), xlim = xlim, type='n', xaxt="n", yaxt="n")
abline(h = 0, lty = 2)
axis(1,labels=TRUE,cex=0.8)
axis(2,labels=TRUE,cex=0.8)
# Index name
legend('topleft',as.character(fleet_control$Fleet_name[srvs[srv]]),bty="n",y.intersp = -0.2,cex=0.8)
# Model names
if(srv == 1){
if(!is.null(model_names)){
legend(
"topright",
legend = model_names,
pch = rep(16, length(line_col)), cex=0.8,
col = line_col,
bty = "n"
)
}
}
# Loop through models
for (k in 1:length(Rceattle)) {
# Subset data by fleet and model
srv_tmp <- Srv_hat_list[[k]][which(Srv_hat_list[[k]]$Fleet_code == srvs[srv]),]
srv_hat_tmp <- Srv_hat_list[[k]][which(Srv_hat_list[[k]]$Fleet_code == srvs[srv]),]
# Plot residual
for(yr in 1:length(srv_hat_tmp$Year)){
lines(rep((srv_hat_tmp$Year[yr] + positions[k]),2),c(0, srv_hat_tmp$Residual[yr]), col = line_col[k])
}
points(srv_hat_tmp$Year + positions[k], srv_hat_tmp$Residual, col=1, pch=21, bg = line_col[k])
}
}
}
mtext(paste("Year"), side=1, outer=TRUE, at=0.5,line=1,cex=1)
mtext(paste("Index residual"), side=2, outer=TRUE, at=0.5,line=1,cex=1)
if(j == 2){dev.off()}
}
} # End of plot
# Plot biomass trajectory
plot_catch(Rceattle = mod_list, model_names = mod_names, incl_proj = TRUE)
devtools::document()
################################################
# Setup
################################################
library(Rceattle)
library(dplyr)
library(ggplot2)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2030
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
file = NULL,
phase = "default", # Phase the model
inits = NULL, # Initial parameters = 0
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
verbose = 1)
# Type ?fit_mod for more details
# The you can plot the model results using using
plot_biomass(Rceattle =  ss_run)
plot_recruitment(Rceattle =  ss_run, add_ci = TRUE)
################################################
# Setup
################################################
library(Rceattle)
library(dplyr)
library(ggplot2)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
file = NULL,
phase = "default", # Phase the model
inits = NULL, # Initial parameters = 0
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
verbose = 1)
# Type ?fit_mod for more details
# The you can plot the model results using using
plot_biomass(Rceattle =  ss_run)
plot_recruitment(Rceattle =  ss_run, add_ci = TRUE)
# Note: fitting the model outputs the composition weights using the harmonic mean MacCallister-Ianelli method
# - setting the comp weights to the Mcallister weights and refitting the model will change the MLE based on the new weighting
ss_run$data_list$fleet_control$Comp_weights <- ss_run$data_list$fleet_control$Est_weights_mcallister
ss_run_weighted <- Rceattle::fit_mod(data_list = ss_run$data_list,
inits = ss_run$estimated_params, # Initial parameters from previous MLEs
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
verbose = 1)
# The you can plot the model results using using
plot_biomass(Rceattle =  list(ss_run, ss_run_weighted))
plot_recruitment(Rceattle =  list(ss_run, ss_run_weighted))
# For the a multispecies model starting from the single species parameters, the following can be specified to load the data:
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
# Or we can use the previous data set
BS2017MS$projyr <- 2060
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run$estimated_params, # Initial parameters from single species MLEs
file = NULL, # Don't save
estimateMode = 0, # Estimate
niter = 5, # 5 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
2060-1977
2060-1977+1
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
BS2017SS$fleet_control$Fleet_type
BS2017SS$fleet_control$Fleet_type == 1
BS2017SS$fleet_control$Weight1_Numbers2
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <-rep(1,7)
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <-rep(1,7)
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Estimate single-species and estimate M
mydata_M <- mydata
mydata_M$est_M1 <- c(1,1,1)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# For the a multispecies model starting from the single species parameters, the following can be specified to load the data:
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$est_M1 <- c(1,1,1) # Estimate residual M
BS2017MS$projyr <- 2060
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# We can plot both runs as well:
mod_list <- list(ss_run, ss_run_M, ms_run)
mod_names <- c("SS", "SS-M", "MS")
# Plot biomass trajectory
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names, add_ci = TRUE)
################################################
# Project under harvest control rules ----
################################################
# -- Constant F as a percentage of SB0
ss_run_fb0 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 1), # F that achieves 40% SB0
msmMode = 0, # Single species mode
verbose = 1)
################################################
# Project under harvest control rules ----
################################################
# -- Constant F as a percentage of SB0
ss_run_fb0 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 1), # F that achieves 40% SB0
msmMode = 0, # Single species mode
verbose = 1)
plot_biomass(list(ss_run, ss_run_fb0))
plot_biomass(list(ss_run, ss_run_fb0), incl_proj = TRUE)
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation ----
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <-rep(1,7)
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Estimate single-species and estimate M
mydata_M <- mydata
mydata_M$est_M1 <- c(1,1,1)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# For the a multispecies model starting from the single species parameters, the following can be specified to load the data:
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$est_M1 <- c(1,1,1) # Estimate residual M
BS2017MS$projyr <- 2060
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# We can plot both runs as well:
mod_list <- list(ss_run, ss_run_M, ms_run)
mod_names <- c("SS", "SS-M", "MS")
# Plot biomass trajectory
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names, add_ci = TRUE)
################################################
# Project under harvest control rules ----
################################################
# -- Constant F as a percentage of SB0
ss_run_cmsy <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 1), # F that achieves 40% SB0
msmMode = 0, # Single species mode
verbose = 1)
ms_run_cmsy <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
HCR = build_hcr(HCR = 1), # F that achieves 40% SB0
suitMode = 0, # empirical suitability
verbose = 1)
plot_biomass(list(ss_run, ss_run_fb0, ms_run_cmsy), incl_proj = TRUE, model_names = 1:4)
plot_biomass(list(ss_run, ss_run_cmsy, ms_run_cmsy), incl_proj = TRUE, model_names = 1:4)
plot_biomass(list(ss_run, ss_run_cmsy, ms_run, ms_run_cmsy), incl_proj = TRUE, model_names = 1:4)
plot_biomass(list( ms_run, ms_run_cmsy), incl_proj = TRUE, model_names = 1:4)
plot_catch(list(ss_run, ss_run_cmsy, ms_run, ms_run_cmsy), incl_proj = TRUE, model_names = 1:4)
ms_run_cmsy <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 0, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
HCR = build_hcr(HCR = 1), # F that achieves 40% SB0
suitMode = 0, # empirical suitability
verbose = 1)
BS2017MS$fleet_control$proj_F_prop <-rep(1,7)
ms_run_cmsy <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 0, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
HCR = build_hcr(HCR = 1), # F that achieves 40% SB0
suitMode = 0, # empirical suitability
verbose = 1)
plot_biomass(list(ss_run, ss_run_cmsy, ms_run, ms_run_cmsy), incl_proj = TRUE, model_names = 1:4)
plot_catch(list(ss_run, ss_run_cmsy, ms_run, ms_run_cmsy), incl_proj = TRUE, model_names = 1:4)
