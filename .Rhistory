dsem = build_DSEM(
sem = sem_iid,
family = "normal"
),
random_rec = TRUE, # Random recruitment
msmMode = 0, # Single species mode
phase = FALSE,
verbose = 1)
dsem = build_DSEM(
sem = sem_iid,
family = "normal"
)
data_list = GOApollock
dsem_settings <- dsem
debug = FALSE
# Build IID sem if NULL
if(is.null(dsem_settings$sem)){
sem = c()
for(sp in 1:data_list$nspp){
sem <- c(sem, paste0("recdevs", sp, " <-> recdevs", sp, ", 0, sigmaR", sp,", 1\n")) # No space after
}
sem <- paste0(sem, collapse = " ")
dsem_settings$sem <- sem
}
# DSEM data
dsem_data <- data_list$env_data %>%
# Adding NA in missing years (match assessment begining)
dplyr::full_join(data.frame(Year=c(data_list$styr:data_list$projyr))) %>%
dplyr::arrange(Year) %>%
dplyr::select(-Year)
# - Add column for recdev of each species
for(sp in data_list$nspp:1){
dsem_data <- dsem_data %>%
dplyr::mutate(recdevs=NA) %>%
dplyr::relocate(recdevs)
colnames(dsem_data)[1] <- paste0("recdevs", sp)
}
# DSEM family
if(length(dsem_settings$family) == 1){
dsem_settings$family <- rep(dsem_settings$family, ncol(dsem_data))
}
if(length(dsem_settings$family) != ncol(dsem_data)){
stop("Length of 'family' in 'build_DSEM' does not equal 1 or `ncol(env_data) + nspp`")
}
# Specify control (i.e. turn off estimation)
DSEMcontrol <- dsem::dsem_control(use_REML = FALSE,
run_model = FALSE,
quiet = TRUE,
getJointPrecision = TRUE,
newton_loops = 0)
# Run "dsem" to output map and parameter object
fit_dsem = dsem::dsem(sem = dsem_settings$sem,
tsdata = ts(dsem_data),
family = dsem_settings$family,
control = DSEMcontrol)
# Extract dsem map and parameter objects
fit_dsem$tmb_inputs$map$lnsigma_j <- factor(rep(NA, length=length(fit_dsem$tmb_inputs$map$lnsigma_j))) #FIXME: Not sure why we turn this off?
fit_dsem$tmb_inputs$parameters$lnsigma_j <- rep(log(0.1), length=length(fit_dsem$tmb_inputs$parameters$lnsigma_j)) #FIXME: Not sure why we turn this off?
# Create mapList object
mapList <- sapply(fit_dsem$tmb_inputs$parameters, function(x) replace(x, values = c(1:length(x))))
# - Convert dsem map-factor to map-list
for(i in 1:length(fit_dsem$tmb_inputs$map)){
parname <- names(fit_dsem$tmb_inputs$map)[i]
mapList[[parname]] <- replace(fit_dsem$tmb_inputs$parameters[[parname]], values = as.numeric(fit_dsem$tmb_inputs$map[[i]]))
}
# Debug mode
if(debug){
mapList <- sapply(mapList, function(x) factor(rep(NA, length=length(x))))
}
# Recruitment variance (turn off variance estimation for recdevs)
fit_dsem$tmb_inputs$parameters$beta_z[1:data_list$nspp] <- data_list$sigma_rec_prior
if(!data_list$random_rec){
mapList$beta_z[1:data_list$nspp] <- NA
}
# Recruitment variance (turn off variance estimation for recdevs)
fit_dsem$tmb_inputs$parameters$beta_z[1:data_list$nspp] <- data_list$sigma_rec_prior
mapList$beta_z[1:data_list$nspp] <- NA
# Map all variables and projection
if(!dsem_settings$all_vars){
# DSEM parameters
pars_off <- which(is.na(fit_dsem$sem_full$start))
mapList$beta_z[pars_off] <- NA
mapList$lnsigma_j[pars_off] <- NA
mapList$mu_j[pars_off] <- NA
# - Latent states x_tj
x_tj_off <- fit_dsem$sem_full %>%
dplyr::filter(is.na(start))
x_tj_off <- unique(c(x_tj_off$first, x_tj_off$second))
x_tj_off <- which(colnames(dsem_data) %in% x_tj_off)
mapList$x_tj[,x_tj_off] <- NA
}
if(!dsem_settings$estimate_projection){
hind_years <- data_list$styr:data_list$endyr
all_years <- data_list$styr:data_list$projyr
mapList$x_tj[length(hind_years+1):length(all_years),] <- NA # Turn off latent states for future
}
# Return
fit_dsem$tmb_inputs$map <- sapply(mapList, function(x) factor(x))
fit_dsem$mapList <- mapList
fit_dsem$sem <- dsem_settings$sem
dsem_settings$sem
fit_dsem$tmb_inputs$map$mu_j
fit_dsem$tmb_inputs$parameters$mu_j
mapList$lnsigma_j
# Code to run DSEM-linked assessment models
# NOTE: we have to phase the models to get to a better starting point
library(Rceattle)
# Model 1 ----
# Single-species GOA pollock, IID recruitment
data("GOApollock") # Single-species data. ?BS2017SS for more information on the data
GOApollock$projyr <- 2020  # Shorten proj year for quicker estimation
GOApollock$env_data <- GOApollock$env_data %>%
dplyr::mutate(ScaledBT =scale(BTempC))
model1 <- Rceattle::fit_mod(data_list = GOApollock,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = TRUE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
model1 <- Rceattle::fit_mod(data_list = GOApollock,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = TRUE, # No random recruitment
msmMode = 0, # Single species mode
phase = FALSE,
verbose = 1)
model1$data_list$dsem_settings$sem
# Model 2 ----
# IID sem, if start value is not provided, DSEM terms will not be estimated
sem_iid = "
# link, lag, param_name, start_value
#internal data relation
ScaledBT -> ScaledBT, 1, AR_BT, 0
ScaledBT -> recdevs1, 1, BT_to_R, 0
recdevs1 <-> recdevs1, 0, sigmaR1, 1
"
model2 <- Rceattle::fit_mod(data_list = GOApollock,
inits = NULL, # Initial parameters from model 1
file = NULL, # Don't save
estimateMode = 0, # Estimate
dsem = build_DSEM(
sem = sem_iid,
family = "normal"
),
random_rec = TRUE, # Random recruitment
msmMode = 0, # Single species mode
phase = FALSE,
verbose = 1)
# * Plot ----
mod_list <- list(model1, model2)
mod_names <- c("Single-species IID", "Single-species Env")
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names)
# Model 3 ----
# Three species IID model
data("GOA2018SS") # Single-species data for EBS model
GOA2018SS$projyr <- 2020  # Shorten proj year for quicker estimation
model3 <- Rceattle::fit_mod(data_list = GOA2018SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = TRUE, # No random recruitment
msmMode = 0, # Single species mode
phase = TUR,
verbose = 1)
model3 <- Rceattle::fit_mod(data_list = GOA2018SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = TRUE, # No random recruitment
msmMode = 0, # Single species mode
phase = FALSE,
verbose = 1)
# Code to run DSEM-linked assessment models
# NOTE: we have to phase the models to get to a better starting point
library(Rceattle)
# Model 1 ----
# Single-species GOA pollock, IID recruitment
data("GOApollock") # Single-species data. ?BS2017SS for more information on the data
GOApollock$projyr <- 2020  # Shorten proj year for quicker estimation
GOApollock$env_data <- GOApollock$env_data %>%
dplyr::mutate(ScaledBT =scale(BTempC))
model1 <- Rceattle::fit_mod(data_list = GOApollock,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = TRUE, # Random recruitment
msmMode = 0, # Single species mode
phase = FALSE,
verbose = 1)
model1$data_list$dsem_settings$sem
# Model 2 ----
# IID sem, if start value is not provided, DSEM terms will not be estimated
sem_iid = "
# link, lag, param_name, start_value
#internal data relation
ScaledBT -> ScaledBT, 1, AR_BT, 0
ScaledBT -> recdevs1, 1, BT_to_R, 0
recdevs1 <-> recdevs1, 0, sigmaR1, 1
"
model2 <- Rceattle::fit_mod(data_list = GOApollock,
inits = NULL, # Initial parameters from model 1
file = NULL, # Don't save
estimateMode = 0, # Estimate
dsem = build_DSEM(
sem = sem_iid,
family = "normal"
),
random_rec = TRUE, # Random recruitment
msmMode = 0, # Single species mode
phase = FALSE,
verbose = 1)
# * Plot ----
mod_list <- list(model1, model2)
mod_names <- c("Single-species IID", "Single-species Env")
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names)
# Model 3 ----
# Three species IID model
data("GOA2018SS") # Single-species data for EBS model
GOA2018SS$projyr <- 2020  # Shorten proj year for quicker estimation
model3 <- Rceattle::fit_mod(data_list = GOA2018SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = TRUE, # Random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# Model 3 ----
# Three species IID model
data("BS2017SS") # Single-species data for EBS model
BS2017SS$projyr <- 2020  # Shorten proj year for quicker estimation
model3 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = TRUE, # Random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
print(model3$data_list$dsem_settings$sem) # Default SEM
# Model 3 ----
# Three species IID model
data("BS2017SS") # Single-species data for EBS model
BS2017SS$projyr <- 2020  # Shorten proj year for quicker estimation
model3 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = TRUE, # Random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
print(model3$data_list$dsem_settings$sem) # Default SEM
model3$estimated_params$beta_z
# Model 4 ----
# Three species IID model (cod and ATF recruitment impact pollock recruitment)
sem_3spp = "
# link, lag, param_name, start_value
recdevs1 <-> recdevs1, 0, sigmaR1, 1
recdevs2 <-> recdevs2, 0, sigmaR2, 1
recdevs3 <-> recdevs3, 0, sigmaR3, 1
recdevs2 -> recdevs1, 0, R2_to_R1, 0
recdevs3 -> recdevs1, 0, R3_to_R1, 0
"
model4 <- Rceattle::fit_mod(data_list = GOA2018SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = TRUE, # Random recruitment
dsem = build_DSEM(
sem = sem_3spp,
family = "normal"
),
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# * Plot ----
mod_list <- list(model3, model4)
mod_names <- c("Three-species IID", "Three-species linked")
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names)
model4 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = TRUE, # Random recruitment
dsem = build_DSEM(
sem = sem_3spp,
family = "normal"
),
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# * Plot ----
mod_list <- list(model3, model4)
mod_names <- c("Three-species IID", "Three-species linked")
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names)
?build_DSEM
model4$estimated_params$mu_j
model4$estimated_params$x_tj
model3$estimated_params$x_tj
model4$estimated_params$delta0_j
model4$estimated_params$beta_z
plot_recruitment(Rceattle = mod_list, model_names = mod_names, incl_proj = T)
remove.packages("Rceattle")
# Code to run DSEM-linked assessment models
# NOTE: we have to phase the models to get to a better starting point
library(Rceattle)
# Model 1 ----
# Single-species GOA pollock, IID recruitment
data("GOApollock") # Single-species data. ?BS2017SS for more information on the data
GOApollock$projyr <- 2020  # Shorten proj year for quicker estimation
GOApollock$env_data <- GOApollock$env_data %>%
dplyr::mutate(ScaledBT =scale(BTempC))
model1 <- Rceattle::fit_mod(data_list = GOApollock,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = TRUE, # Random recruitment
msmMode = 0, # Single species mode
phase = FALSE,
verbose = 1)
model1$data_list$dsem_settings$sem
# Model 2 ----
# IID sem, if start value is not provided, DSEM terms will not be estimated
sem_iid = "
# link, lag, param_name, start_value
#internal data relation
ScaledBT -> ScaledBT, 1, AR_BT, 0
ScaledBT -> recdevs1, 1, BT_to_R, 0
recdevs1 <-> recdevs1, 0, sigmaR1, 1
"
model2 <- Rceattle::fit_mod(data_list = GOApollock,
inits = NULL, # Initial parameters from model 1
file = NULL, # Don't save
estimateMode = 0, # Estimate
dsem = build_DSEM(
sem = sem_iid,
family = "normal"
),
random_rec = TRUE, # Random recruitment
msmMode = 0, # Single species mode
phase = FALSE,
verbose = 1)
# * Plot ----
mod_list <- list(model1, model2)
mod_names <- c("Single-species IID", "Single-species Env")
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names)
model2$estimated_params$beta_z
model1$estimated_params$beta_z
# Model 2 ----
# IID sem, if start value is not provided, DSEM terms will not be estimated
sem_iid = "
# link, lag, param_name, start_value
#internal data relation
ScaledBT -> ScaledBT, 1, AR_BT, 0
ScaledBT -> recdevs1, 1, BT_to_R, 0
recdevs1 <-> recdevs1, 0, sigmaR1, 0.1, NA
"
model2 <- Rceattle::fit_mod(data_list = GOApollock,
inits = NULL, # Initial parameters from model 1
file = NULL, # Don't save
estimateMode = 0, # Estimate
dsem = build_DSEM(
sem = sem_iid,
family = "normal"
),
random_rec = TRUE, # Random recruitment
msmMode = 0, # Single species mode
phase = FALSE,
verbose = 1)
model1$estimated_params$beta_z
model2$estimated_params$beta_z
log(0.1)
exp(0.05231305)
model2 <- Rceattle::fit_mod(data_list = GOApollock,
inits = NULL, # Initial parameters from model 1
file = NULL, # Don't save
estimateMode = 0, # Estimate
dsem = build_DSEM(
sem = sem_iid,
family = "normal"
),
random_rec = FALSE, # Random recruitment
msmMode = 0, # Single species mode
phase = FALSE,
verbose = 1)
model2$estimated_params$beta_z
# Model 2 ----
# IID sem, if start value is not provided, DSEM terms will not be estimated
sem_iid = "
# link, lag, param_name, start_value
#internal data relation
ScaledBT -> ScaledBT, 1, AR_BT, 0
ScaledBT -> recdevs1, 1, BT_to_R, 0
recdevs1 -> recdevs1, 1, R_to_R, 0.1
recdevs1 <-> recdevs1, 0, sigmaR1, 0.1
"
model2 <- Rceattle::fit_mod(data_list = GOApollock,
inits = NULL, # Initial parameters from model 1
file = NULL, # Don't save
estimateMode = 0, # Estimate
dsem = build_DSEM(
sem = sem_iid,
family = "normal"
),
random_rec = FALSE, # Random recruitment
msmMode = 0, # Single species mode
phase = FALSE,
verbose = 1)
model2 <- Rceattle::fit_mod(data_list = GOApollock,
inits = NULL, # Initial parameters from model 1
file = NULL, # Don't save
estimateMode = 0, # Estimate
dsem = build_DSEM(
sem = sem_iid,
family = "normal"
),
random_rec = TRUE, # Random recruitment
msmMode = 0, # Single species mode
phase = FALSE,
verbose = 1)
model2$estimated_params$beta_z
# * Plot ----
mod_list <- list(model1, model2)
mod_names <- c("Single-species IID", "Single-species Env")
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names)
plot_biomass(Rceattle = mod_list, model_names = mod_names)
GOApollock$env_data
GOApollock$comp_data <- GOApollock$comp_data %>%
filter(Year < 2011)
model2 <- Rceattle::fit_mod(data_list = GOApollock,
inits = NULL, # Initial parameters from model 1
file = NULL, # Don't save
estimateMode = 0, # Estimate
dsem = build_DSEM(
sem = sem_iid,
family = "normal"
),
random_rec = TRUE, # Random recruitment
msmMode = 0, # Single species mode
phase = FALSE,
verbose = 1)
# * Plot ----
mod_list <- list(model1, model2)
mod_names <- c("Single-species IID", "Single-species Env")
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names)
check <- GOApollock$comp_data
View(check)
plot_index(mod_list)
dsem_settings <- list()
dsem_settings$family = "normal"
sem <- sem_iid
data_list <- GOA2018SS
sem
dsem_settings$sem <- sem
# DSEM data
dsem_data <- data_list$env_data %>%
# Adding NA in missing years (match assessment begining)
dplyr::full_join(data.frame(Year=c(data_list$styr:data_list$projyr)), by = join_by(Year)) %>%
dplyr::arrange(Year) %>%
dplyr::select(-Year)
# - Add column for recdev of each species
for(sp in data_list$nspp:1){
dsem_data <- dsem_data %>%
dplyr::mutate(recdevs=NA) %>%
dplyr::relocate(recdevs)
colnames(dsem_data)[1] <- paste0("recdevs", sp)
}
# DSEM family
if(length(dsem_settings$family) == 1){
dsem_settings$family <- rep(dsem_settings$family, ncol(dsem_data))
}
if(length(dsem_settings$family) != ncol(dsem_data)){
stop("Length of 'family' in 'build_DSEM' does not equal 1 or `ncol(env_data) + nspp`")
}
# Specify control (i.e. turn off estimation)
DSEMcontrol <- dsem::dsem_control(use_REML = FALSE,
run_model = FALSE,
quiet = TRUE,
getJointPrecision = TRUE,
newton_loops = 0)
# Run "dsem" to output map and parameter object
fit_dsem = dsem::dsem(sem = dsem_settings$sem,
tsdata = ts(dsem_data),
family = dsem_settings$family,
control = DSEMcontrol)
dsem_settings$family
dsem_settings$sem
model2 <- Rceattle::fit_mod(data_list = GOApollock,
inits = NULL, # Initial parameters from model 1
file = NULL, # Don't save
estimateMode = 0, # Estimate
dsem = build_DSEM(
sem = sem_iid,
all_vars = TRUE,
family = "normal"
),
random_rec = TRUE, # Random recruitment
msmMode = 0, # Single species mode
phase = FALSE,
verbose = 1)
model2$estimated_params$beta_z
