msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicCat1 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 6, # Cat 1 HCR
DynamicHCR = TRUE, # Use dynamic reference points
Flimit = 0.45, # F45%
Ptarget = 0.4, # Target is 40% SB0
Plimit = 0.1, # No fishing when SB<SB10
Pstar = 0.45,
Sigma = 0.5),
msmMode = 0, # Single species mode
verbose = 1)
# -- SESSF Tier 1
ss_run_Tier1 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 7, # Tier 1 HCR
Ftarget = 0.48, # F40%
Flimit = 0.20, # F20%
Ptarget = 0.35, # Target is 35% SSB0
Plimit = 0.20, # No fishing when B<B20
),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicTier1 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 7, # Tier 1 HCR
DynamicHCR = TRUE,
Ftarget = 0.48, # F40%
Flimit = 0.20, # F20%
Ptarget = 0.35, # Target is 35% SSB0
Plimit = 0.20, # No fishing when B<B20
),
msmMode = 0, # Single species mode
verbose = 1)
# -- Plot
mod_list <- list(ss_run, ss_run_fb0, ss_run_Fspr, ss_run_Tier3, ss_run_Cat1, ss_run_Tier1)
model_names <- c("F=0","F 40% B0", "Fspr 40%", "NPFMC Tier 3", "PFMC Cat 1", "SESSF Tier 1")
plot_biomass(mod_list, model_names = model_names, incl_proj = TRUE)
plot_ssb(mod_list, model_names = model_names, incl_proj = TRUE)
plot_recruitment(mod_list, model_names = model_names, incl_proj = TRUE)
dynamic_mod_list <- list(ss_run, ss_run_dynamicfb0, ss_run_dynamicFspr, ss_run_dynamicTier3, ss_run_dynamicCat1, ss_run_dynamicTier1)
dynamic_model_names <- c("F=0","F 40% B0", "Fspr 40%", "NPFMC Tier 3", "PFMC Cat 1", "SESSF Tier 1")
plot_biomass(dynamic_mod_list, model_names = dynamic_model_names, incl_proj = TRUE)
plot_ssb(dynamic_mod_list, model_names = dynamic_model_names, incl_proj = TRUE)
################################################
# Management strategy evaluation ----
################################################
# -- NPFMC Tier 3 HCRs
# - MS-OM: SS-EM Tier 3 HCR
mse3 <- run_mse(om = ss_run, em = ss_run_Tier3, nsim = 1, assessment_period = 1, sampling_period = 1, simulate_data = FALSE, sample_rec = FALSE)
dim(ss_run_M$estimated_params$beta_rec_pars)
dim(ss_run_M$map$mapList$beta_rec_pars)
dim(ss_run_Tier3$map$mapList$beta_rec_pars)
dim(ss_run_Tier3$estimated_params$beta_rec_pars)
# - SS-OM: SS-EM No F
mse2 <- run_mse(om = ss_run_M, em = ss_run, nsim = 1, assessment_period = 1, sampling_period = 1, simulate_data = TRUE, sample_rec = TRUE, cap = c(1500000))
# -- NPFMC Tier 3 HCRs
# - MS-OM: SS-EM Tier 3 HCR
mse3 <- run_mse(om = ss_run, em = ss_run_Tier3, nsim = 1, assessment_period = 1, sampling_period = 1, simulate_data = FALSE, sample_rec = FALSE)
library(Rceattle)
################################################
# Data ----
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
BS2017SS$fleet_control$proj_F_prop <-rep(1,7)
################################################
# Operating Models ----
################################################
# Single-species with fixed M
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# -- NPFMC Tier 3
ss_run_Tier3 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
Ftarget = 0.4, # F40%
Flimit = 0.35, # F35%
Plimit = 0.2, # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1)
# -- NPFMC Tier 3 HCRs
# - MS-OM: SS-EM Tier 3 HCR
mse3 <- run_mse(om = ss_run, em = ss_run_Tier3, nsim = 1, assessment_period = 1, sampling_period = 1, simulate_data = FALSE, sample_rec = FALSE)
om = ss_run; em = ss_run_Tier3; nsim = 1; start_sim = 1; assessment_period = 1; sampling_period = 1; simulate_data = FALSE; regenerate_past = FALSE; sample_rec = FALSE; rec_trend = 0; fut_sample = 1; cap = NULL; catch_mult = NULL; seed = 666; regenerate_seed = seed; loopnum = 1; file = NULL; dir = NULL; endyr = NA; timeout = 999
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# MSE SETUP ----
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
'%!in%' <- function(x,y)!('%in%'(x,y))
library(dplyr)
set.seed(regenerate_seed)
Rceattle_OM_list <- list()
Rceattle_EM_list <- list()
# - Set om to project from R0
om$data_list$proj_mean_rec = 0 # - Sample rec devs assuming this down the line
# - Adjust cap
if(!is.null(cap)){
if(!length(cap) %in% c(1, om$data_list$nspp)){
stop("cap is not length 1 or length nspp")
}
}
if(!is.null(catch_mult)){
if(length(catch_mult) == 1){
catch_mult = rep(catch_mult, om$data_list$nspp)
}
if(length(catch_mult) != om$data_list$nspp){
stop("catch_mult is not length 1 or length nspp")
}
}
if(sum(om$data_list$fleet_control$proj_F_prop) == 0){
stop("F prop per fllet 'proj_F_prop' is zero")
}
# - Adjust rec trend
if(length(rec_trend)==1){
rec_trend = rep(rec_trend, om$data_list$nspp)
}
# - Years for simulations
hind_yrs <- (em$data_list$styr) : em$data_list$endyr
hind_nyrs <- length(hind_yrs)
om_proj_yrs <- (om$data_list$endyr + 1) : om$data_list$projyr
om_proj_nyrs <- length(om_proj_yrs)
em_proj_yrs <- (em$data_list$endyr + 1) : em$data_list$projyr
em_proj_nyrs <- length(em_proj_yrs)
nflts = nrow(om$data_list$fleet_control)
# - N sel ages for sel coff dev
if(all(is.na(om$data_list$fleet_control$Nselages))){
nselages_om = dim(om$estimated_params$sel_coff_dev)[3]
} else {
nselages_om <- max(om$data_list$fleet_control$Nselages, na.rm = TRUE)
}
if(all(is.na(em$data_list$fleet_control$Nselages))){
nselages_em = dim(em$estimated_params$sel_coff_dev)[3]
} else {
nselages_em <- max(em$data_list$fleet_control$Nselages, na.rm = TRUE)
}
# - Assessment period
assess_yrs <- seq(from = om$data_list$endyr + assessment_period, to =  min(c(om$data_list$projyr, em$data_list$projyr, endyr), na.rm = TRUE),  by = assessment_period)
# - Data sampling period
if(length(sampling_period)==1){
sampling_period = rep(sampling_period, nflts)
}
if(nflts != nrow(em$data_list$fleet_control)){
stop("OM and EM fleets do not match or sampling period length is mispecified")
}
if(nflts != length(sampling_period)){
stop("Sampling period length is mispecified, does not match number of fleets")
}
# - Set up years of data we are sampling for each fleet
sample_yrs <- lapply(sampling_period, function(x) seq(from = em$data_list$endyr + x, to = em$data_list$projyr,  by = x))
fleet_id <- sample_yrs
for(i in 1:length(sample_yrs)){
fleet_id[[i]] <- replace(fleet_id[[i]], values = i)
}
sample_yrs = data.frame(Fleet_code = unlist(fleet_id), Year = unlist(sample_yrs))
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Regenerate past data from OM and refit EM ----
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
if(regenerate_past){
# - Simulate index and comp data and updatae EM
sim_dat <- sim_mod(om, simulate = FALSE)
em$data_list$index_data <- sim_dat$index_data
em$data_list$comp_data <- sim_dat$comp_data
# Restimate
em <- fit_mod(
data_list = em$data_list,
inits = em$estimated_params,
map =  NULL,
bounds = NULL,
file = NULL,
estimateMode = ifelse(em$data_list$estimateMode < 3, 0, em$data_list$estimateMode), # Run hindcast and projection, otherwise debug
HCR = build_hcr(HCR = em$data_list$HCR, # Tier3 HCR
DynamicHCR = em$data_list$DynamicHCR,
Ftarget = em$data_list$Ftarget,
Flimit = em$data_list$Flimit,
Ptarget = em$data_list$Ptarget,
Plimit = em$data_list$Plimit,
Alpha = em$data_list$Alpha,
Pstar = em$data_list$Pstar,
Sigma = em$data_list$Sigma,
Fmult = em$data_list$Fmult,
HCRorder = em$data_list$HCRorder
),
recFun = build_srr(srr_fun = em$data_list$srr_fun,
srr_pred_fun  = em$data_list$srr_pred_fun ,
proj_mean_rec  = em$data_list$proj_mean_rec ,
srr_meanyr = em$data_list$srr_meanyr,
srr_hat_styr = em$data_list$srr_hat_styr,
srr_hat_endyr = em$data_list$srr_hat_endyr,
srr_est_mode  = em$data_list$srr_est_mode ,
srr_prior  = em$data_list$srr_prior,
srr_prior_sd   = em$data_list$srr_prior_sd,
Bmsy_lim = em$data_list$Bmsy_lim,
srr_indices = em$data_list$srr_indices),
M1Fun =     build_M1(M1_model = em$data_list$M1_model,
M1_re = em$data_list$M1_re,
updateM1 = FALSE,
M1_use_prior = em$data_list$M1_use_prior,
M2_use_prior = em$data_list$M2_use_prior,
M_prior = em$data_list$M_prior,
M_prior_sd = em$data_list$M_prior_sd,
M1_indices = em$data_list$M1_indices),
random_rec = em$data_list$random_rec,
niter = em$data_list$niter,
msmMode = em$data_list$msmMode,
avgnMode = em$data_list$avgnMode,
suitMode = em$data_list$suitMode,
suit_styr = em$data_list$suit_styr,
suit_endyr = em$data_list$suit_endyr,
initMode = em$data_list$initMode,
phase = NULL,
loopnum = loopnum,
getsd = FALSE,
verbose = 0)
# Update avg F given model fit to regenerated data
if(em$data_list$HCR == 2){
# - Get avg F
avg_F <- exp(em$estimated_params$ln_F) # Average F from last 5 years
avg_F <- rowMeans(avg_F[,(ncol(avg_F)-4) : ncol(avg_F)])
avg_F <- data.frame(avg_F = avg_F, spp = em$data_list$fleet_control$Species)
avg_F <- avg_F %>%
group_by(spp) %>%
summarise(avg_F = sum(avg_F)) %>%
arrange(spp)
# - Update model
em <- Rceattle::fit_mod(data_list = em$data_list,
inits = em$estimated_params,
estimateMode = 2, # Don't estimate
HCR = build_hcr(HCR = 2, # Input F
Ftarget = avg_F$avg_F,
Ptarget = em$data_list$Ptarget,
Plimit = em$data_list$Plimit
),
recFun = build_srr(srr_fun = em$data_list$srr_fun,
srr_pred_fun  = em$data_list$srr_pred_fun ,
proj_mean_rec  = em$data_list$proj_mean_rec ,
srr_meanyr = em$data_list$srr_meanyr,
srr_hat_styr = em$data_list$srr_hat_styr,
srr_hat_endyr = em$data_list$srr_hat_endyr,
srr_est_mode  = em$data_list$srr_est_mode ,
srr_prior  = em$data_list$srr_prior,
srr_prior_sd   = em$data_list$srr_prior_sd,
Bmsy_lim = em$data_list$Bmsy_lim,
srr_indices = em$data_list$srr_indices),
M1Fun =     build_M1(M1_model = em$data_list$M1_model,
M1_re = em$data_list$M1_re,
updateM1 = FALSE,
M1_use_prior = em$data_list$M1_use_prior,
M2_use_prior = em$data_list$M2_use_prior,
M_prior = em$data_list$M_prior,
M_prior_sd = em$data_list$M_prior_sd,
M1_indices = em$data_list$M1_indices),
random_rec = em$data_list$random_rec,
niter = em$data_list$niter,
msmMode = em$data_list$msmMode,
avgnMode = em$data_list$avgnMode,
suitMode = em$data_list$suitMode,
suit_styr = em$data_list$suit_styr,
suit_endyr = em$data_list$suit_endyr,
initMode = em$data_list$initMode,
loopnum = loopnum,
getsd = FALSE,
verbose = 0)
}
}
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Expand OM data-dim ----
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# -- index_data
proj_srv <- om$data_list$index_data %>%
group_by(Fleet_code) %>%
slice(rep(n(),  om_proj_nyrs)) %>%
mutate(Year = -om_proj_yrs)
proj_srv$Log_sd <- proj_srv$Log_sd * 1/fut_sample
om$data_list$index_data  <- rbind(om$data_list$index_data, proj_srv)
om$data_list$index_data <- dplyr::arrange(om$data_list$index_data, Fleet_code, abs(Year))
# -- Nbyage
if(nrow(om$data_list$NByageFixed) > 0){
proj_nbyage <- om$data_list$NByageFixed %>%
group_by(Species, Sex) %>%
slice(rep(n(),  om_proj_nyrs)) %>%
mutate(Year = om_proj_yrs)
proj_nbyage <- proj_nbyage[which(om_proj_yrs %!in% om$data_list$NByageFixed$Year),] # Subset rows already forcasted
om$data_list$NByageFixed  <- rbind(om$data_list$NByageFixed, proj_nbyage)
om$data_list$NByageFixed <- dplyr::arrange(om$data_list$NByageFixed, Species, Year)
}
# -- comp_data
proj_comp <- om$data_list$comp_data %>%
group_by(Fleet_code, Sex) %>%
slice(rep(n(),  om_proj_nyrs)) %>%
mutate(Year = -om_proj_yrs)
proj_comp$Sample_size <- proj_comp$Sample_size * fut_sample # Adjust future sampling effort
om$data_list$comp_data  <- rbind(om$data_list$comp_data, proj_comp)
om$data_list$comp_data <- dplyr::arrange(om$data_list$comp_data, Fleet_code, abs(Year))
# -- emp_sel - Use terminal year
if(nrow(om$data_list$emp_sel) > 0){
proj_emp_sel <- om$data_list$emp_sel %>%
group_by(Fleet_code, Sex) %>%
slice(rep(n(),  om_proj_nyrs)) %>%
mutate(Year = om_proj_yrs)
om$data_list$emp_sel  <- rbind(om$data_list$emp_sel, proj_emp_sel)
om$data_list$emp_sel <- dplyr::arrange(om$data_list$emp_sel, Fleet_code, Year)
}
# -- weight
#FIXME ignores forecasted growth
proj_wt <- om$data_list$weight %>%
group_by(Wt_index , Sex) %>%
slice(rep(n(),  om_proj_nyrs)) %>%
mutate(Year = om_proj_yrs)
om$data_list$weight  <- rbind(om$data_list$weight, proj_wt)
om$data_list$weight <- dplyr::arrange(om$data_list$weight, Wt_index, Year)
# -- Pyrs
proj_Pyrs <- om$data_list$Pyrs %>%
group_by(Species, Sex) %>%
slice(rep(n(),  om_proj_nyrs)) %>%
mutate(Year = om_proj_yrs)
om$data_list$Pyrs  <- rbind(om$data_list$Pyrs, proj_Pyrs)
om$data_list$Pyrs <- dplyr::arrange(om$data_list$Pyrs, Species, Year)
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Expand EM data-dim ----
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#FIXME - assuming same as terminal year of hindcast
# -- EM emp_sel - Use terminal year
proj_emp_sel <- em$data_list$emp_sel %>%
group_by(Fleet_code, Sex) %>%
slice(rep(n(),  em_proj_nyrs)) %>%
mutate(Year = em_proj_yrs)
em$data_list$emp_sel  <- rbind(em$data_list$emp_sel, proj_emp_sel)
em$data_list$emp_sel <- dplyr::arrange(em$data_list$emp_sel, Fleet_code, Year)
# -- EM weight
proj_wt <- em$data_list$weight %>%
group_by(Wt_index , Sex) %>%
slice(rep(n(),  em_proj_nyrs)) %>%
mutate(Year = em_proj_yrs)
em$data_list$weight  <- rbind(em$data_list$weight, proj_wt)
em$data_list$weight <- dplyr::arrange(em$data_list$weight, Wt_index, Year)
# -- EM Pyrs
proj_Pyrs <- em$data_list$Pyrs %>%
group_by(Species, Sex) %>%
slice(rep(n(),  em_proj_nyrs)) %>%
mutate(Year = em_proj_yrs)
em$data_list$Pyrs  <- rbind(em$data_list$Pyrs, proj_Pyrs)
em$data_list$Pyrs <- dplyr::arrange(em$data_list$Pyrs, Species, Year)
sim = 1
set.seed(seed = seed + sim) # setting unique seed for each simulation
kill_sim <- list(kill_sim = FALSE, failure = NA)
# Set models objects
sim_list <- list(EM = list())# , OM = list())
sim_list$EM[[1]] <- em
em_use <- em
om_use <- om
# Replace future rec devs
#FIXME - update non-sample rec for stock recruit relationship
for(sp in 1:om_use$data_list$nspp){
# -- OMs where SR curve is estimated directly
if(om_use$data_list$srr_fun == om_use$data_list$srr_pred_fun){
if(sample_rec){ # Sample devs from hindcast
rec_dev <- sample(x = om_use$estimated_params$rec_dev[sp, 1:hind_nyrs], size = om_proj_nyrs, replace = TRUE) + log((1+(rec_trend[sp]/om_proj_nyrs) * 1:om_proj_nyrs)) # - Scale mean rec for rec trend
} else{ # Set to mean rec otherwise
rec_dev <- log(mean(om_use$quantities$R[sp,1:hind_nyrs]) * (1+(rec_trend[sp]/om_proj_nyrs) * 1:om_proj_nyrs))  - log(om_use$quantities$R0[sp]) # - Scale mean rec for rec trend
}
}
# -- OMs where SR curve is estimated as penalty (sensu Ianelli)
if(om_use$data_list$srr_fun != om_use$data_list$srr_pred_fun){
if(sample_rec){ # Sample devs from hindcast
rec_dev <- sample(x = (log(om_use$quantities$R) - log(om_use$quantities$R_hat))[sp, 1:hind_nyrs],
size = om_proj_nyrs, replace = TRUE) + log((1+(rec_trend[sp]/om_proj_nyrs) * 1:om_proj_nyrs)) # - Scale mean rec for rec trend
} else{ # Set to mean rec otherwise
rec_dev <- log(mean((log(om_use$quantities$R) - log(om_use$quantities$R_hat))[sp, 1:hind_nyrs]) * (1+(rec_trend[sp]/om_proj_nyrs) * 1:om_proj_nyrs)) # - Scale mean rec for rec trend
}
}
# - Update OM with devs
om_use$estimated_params$rec_dev[sp,om_proj_yrs - om_use$data_list$styr + 1] <- replace(
om_use$estimated_params$rec_dev[sp,om_proj_yrs - om_use$data_list$styr + 1],
values =  rec_dev)
}
k = 1
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# 1. Get recommended catch from the EM-HCR ----
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
new_years <- om_proj_yrs[which(om_proj_yrs <= assess_yrs[k] & om_proj_yrs > om_use$data_list$endyr)]
# - Get projected catch data from EM
new_catch_data <- em_use$data_list$catch_data
dat_fill_ind <- which(new_catch_data$Year %in% new_years & is.na(new_catch_data$Catch))
new_catch_data$Catch[dat_fill_ind] <- em_use$quantities$catch_hat[dat_fill_ind]
# * Catch multiplier ----
if(!is.null(catch_mult)){
new_catch_data$Catch[dat_fill_ind] <- new_catch_data$Catch[dat_fill_ind] * catch_mult[new_catch_data$Species[dat_fill_ind]]
}
# * Apply cap ----
if(!is.null(cap)){
# Applied across species
if(length(cap) == 1){
new_catch_data$Catch[dat_fill_ind] <- ifelse(sum(new_catch_data$Catch[dat_fill_ind]) > cap,
cap * new_catch_data$Catch[dat_fill_ind]/sum(new_catch_data$Catch[dat_fill_ind]),
new_catch_data$Catch[dat_fill_ind]) # FIXME: does not work for assessments that don't occur annually
} else { # Species-specific
new_catch_data$Catch[dat_fill_ind] <- ifelse(new_catch_data$Catch[dat_fill_ind] > cap[new_catch_data$Species[dat_fill_ind]], cap[new_catch_data$Species[dat_fill_ind]], new_catch_data$Catch[dat_fill_ind])
}
}
# * Exploitable biomass limit ----
# - If projected catch > exploitable biomass in OM, reduce to exploitable biomass
exploitable_biomass_data <- om_use$data_list$catch_data
exploitable_biomass_data$Catch[dat_fill_ind] <- om_use$quantities$max_catch_hat[dat_fill_ind]
new_catch_data$Catch[dat_fill_ind] <- ifelse(new_catch_data$Catch[dat_fill_ind] > exploitable_biomass_data$Catch[dat_fill_ind],
exploitable_biomass_data$Catch[dat_fill_ind],
new_catch_data$Catch[dat_fill_ind])
new_catch_switch <- sum(new_catch_data$Catch[dat_fill_ind]) #Switch to turn off re-running OM if new catch = 0
# - Update catch data in OM and EM
om_use$data_list$catch_data <- new_catch_data
em_use$data_list$catch_data <- new_catch_data
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# 2. Update the OM ----
# - Estimate Fdev and update dynamics
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# - Update endyr of OM
nyrs_hind <- om_use$data_list$endyr - om_use$data_list$styr + 1
om_use$data_list$endyr <- assess_yrs[k]
# * Update parameters ----
# -- ln_F
om_use$estimated_params$ln_F <- cbind(om_use$estimated_params$ln_F, matrix(0, nrow= nrow(om_use$estimated_params$ln_F), ncol = length(new_years)))
# -- Time-varing survey catachbilitiy - Assume last year - filled by columns
om_use$estimated_params$index_q_dev <- cbind(om_use$estimated_params$index_q_dev, matrix(om_use$estimated_params$index_q_dev[,ncol(om_use$estimated_params$index_q_dev)], nrow= nrow(om_use$estimated_params$index_q_dev), ncol = length(new_years)))
# -- Time-varing selectivity - Assume last year - filled by columns
ln_sel_slp_dev = array(0, dim = c(2, nflts, 2, nyrs_hind + length(new_years)))  # selectivity deviations paramaters for logistic
sel_inf_dev = array(0, dim = c(2, nflts, 2, nyrs_hind + length(new_years)))  # selectivity deviations paramaters for logistic
sel_coff_dev = array(0, dim = c(nflts, 2, nselages_om, nyrs_hind + length(new_years)))  # selectivity deviations paramaters for non-parameteric
ln_sel_slp_dev[,,,1:nyrs_hind] <- om_use$estimated_params$ln_sel_slp_dev
sel_inf_dev[,,,1:nyrs_hind] <- om_use$estimated_params$sel_inf_dev
sel_coff_dev[,,,1:nyrs_hind] <- om_use$estimated_params$sel_coff_dev
ln_sel_slp_dev[,,,(nyrs_hind + 1):(nyrs_hind + length(new_years))] <- ln_sel_slp_dev[,,,nyrs_hind]
sel_inf_dev[,,,(nyrs_hind + 1):(nyrs_hind + length(new_years))] <- sel_inf_dev[,,,nyrs_hind]
sel_coff_dev[,,,(nyrs_hind + 1):(nyrs_hind + length(new_years))] <- sel_coff_dev[,,,nyrs_hind]
om_use$estimated_params$ln_sel_slp_dev <- ln_sel_slp_dev
om_use$estimated_params$sel_inf_dev <- sel_inf_dev
om_use$estimated_params$sel_coff_dev <- sel_coff_dev
# * Update map ----
# -(Only new parameter we are estimating in OM is the ln_F of the new years)
om_use$map <- build_map(
data_list = om_use$data_list,
params = om_use$estimated_params,
debug = TRUE,
random_rec = om_use$data_list$random_rec)
om_use$map$mapFactor$dummy <- as.factor(NA); om_use$map$mapList$dummy <- NA
om_use$map$mapList$beta_rec_pars
om_use$estimated_params$beta_rec_pars
library(Rceattle)
################################################
# Data ----
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
BS2017SS$fleet_control$proj_F_prop <-rep(1,7)
################################################
# Operating Models ----
################################################
# Single-species with fixed M
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# -- NPFMC Tier 3
ss_run_Tier3 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
Ftarget = 0.4, # F40%
Flimit = 0.35, # F35%
Plimit = 0.2, # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1)
# -- NPFMC Tier 3 HCRs
# - MS-OM: SS-EM Tier 3 HCR
mse3 <- run_mse(om = ss_run, em = ss_run_Tier3, nsim = 1, assessment_period = 1, sampling_period = 1, simulate_data = FALSE, sample_rec = FALSE)
warnings()
plot_biomass(mse3$Sim_1$OM)
plot_biomass(list(mse3$Sim_1$OM, mse3$Sim_1$OM_no_F))
plot_depletionSSB(list(mse3$Sim_1$OM, mse3$Sim_1$OM_no_F))
plot_depletion(list(mse3$Sim_1$OM, mse3$Sim_1$OM_no_F))
plot_depletionSSB(list(mse3$Sim_1$EM))
plot_depletionSSB(mse3$Sim_1$EM)
mse3$Sim_1$OM$quantities$SB0
ss_run$quantities$SB0
ss_run_Tier3$quantities$SB0
mse3$Sim_1$OM$quantities$SB0
source("~/Documents/GitHub/Rceattle/R/11a-run_mse.R", echo=TRUE)
# -- NPFMC Tier 3 HCRs
# - MS-OM: SS-EM Tier 3 HCR
mse3 <- run_mse(om = ss_run, em = ss_run_Tier3, nsim = 1, assessment_period = 1, sampling_period = 1, simulate_data = FALSE, sample_rec = FALSE)
mse3$Sim_1$OM$quantities$SB0
plot_depletion(list(mse3$Sim_1$OM, mse3$Sim_1$OM_no_F))
plot_depletionSSB(list(mse3$Sim_1$OM, mse3$Sim_1$OM_no_F))
