# -- wt
for(flt in (unique(estimation_model$data_list$wt$Wt_index))){
wt_sub <- estimation_model$data_list$wt[which(estimation_model$data_list$wt$Wt_index == flt),]
yrs_proj <- (estimation_model$data_list$endyr + 1):estimation_model$data_list$projyr
yrs_proj <- yrs_proj[which(yrs_proj %!in% wt_sub$Year)]
nyrs_proj <- length(yrs_proj)
proj_wt <- data.frame(Wt_name = rep(wt_sub$Wt_name[1], nyrs_proj),
Wt_index = rep(flt, nyrs_proj),
Species = rep(wt_sub$Species[1], nyrs_proj),
Sex = rep(wt_sub$Sex[length(wt_sub$Sex)], nyrs_proj),
Year = yrs_proj
)
proj_comps <- data.frame(matrix(wt_sub[nrow(wt_sub), (ncol(proj_wt)+1) : ncol(wt_sub)], ncol = ncol(wt_sub) - ncol(proj_wt), nrow = nyrs_proj, byrow = TRUE))
colnames(proj_comps) <-paste0("Age", 1:ncol(proj_comps))
proj_wt <-cbind(proj_wt, proj_comps)
colnames(proj_wt) <- colnames(operating_model$data_list$wt)
estimation_model$data_list$wt <- rbind(estimation_model$data_list$wt, proj_wt)
}
estimation_model$data_list$wt <- estimation_model$data_list$wt[
with(estimation_model$data_list$wt, order(Wt_index, Year)),]
# -- Pyrs
for(flt in (unique(estimation_model$data_list$wt$Species))){
Pyrs_sub <- estimation_model$data_list$Pyrs[which(estimation_model$data_list$Pyrs$Species == flt),]
yrs_proj <- (estimation_model$data_list$endyr + 1):estimation_model$data_list$projyr
nyrs_proj <- length(yrs_proj)
proj_Pyrs <- data.frame(Species = rep(Pyrs_sub$Species[1], nyrs_proj),
Sex = rep(Pyrs_sub$Sex[length(Pyrs_sub$Sex)], nyrs_proj),
Year = yrs_proj)
proj_comps <- data.frame(matrix(Pyrs_sub[nrow(Pyrs_sub), (ncol(proj_Pyrs)+1) : ncol(Pyrs_sub)], ncol = ncol(Pyrs_sub) - ncol(proj_Pyrs), nrow = nyrs_proj, byrow = TRUE))
colnames(proj_comps) <-paste0("Age", 1:ncol(proj_comps))
proj_Pyrs <-cbind(proj_Pyrs, proj_comps)
colnames(proj_Pyrs) <- colnames(operating_model$data_list$Pyrs)
estimation_model$data_list$Pyrs <- rbind(estimation_model$data_list$Pyrs, proj_Pyrs)
}
estimation_model$data_list$Pyrs <- estimation_model$data_list$Pyrs[
with(estimation_model$data_list$Pyrs, order(Species, Year)),]
# Years for simulations
proj_yrs <- (estimation_model$data_list$endyr + 1) : estimation_model$data_list$projyr
proj_nyrs <- length(proj_yrs)
assess_yrs <- seq(from = estimation_model$data_list$endyr + assessment_period, to = estimation_model$data_list$projyr,  by = assessment_period)
sample_yrs <- seq(from = estimation_model$data_list$endyr + sampling_period, to = estimation_model$data_list$projyr,  by = sampling_period)
# Set models
Rceattle_EM_list[[sim]] <- list()
Rceattle_EM_list[[sim]][[1]] <- estimation_model
estimation_model_use <- estimation_model
operating_model_use <- operating_model
# Replace future rec_devs with numbers
if(simulate){
for(sp in 1:operating_model_use$data_list$nspp){
operating_model_use$estimated_params$rec_dev[sp,proj_yrs - operating_model_use$data_list$styr + 1] <- replace(
operating_model_use$estimated_params$rec_dev[sp,proj_yrs - operating_model_use$data_list$styr + 1],
values = rnorm( length(operating_model_use$estimated_params$rec_dev[sp,proj_yrs - operating_model_use$data_list$styr + 1]),
mean = 0,
sd = exp(operating_model_use$estimated_params$ln_rec_sigma[sp])) # Assumed value from penalized likelihood
)
}
}
# Get projected catch data from EM
new_catch_data <- estimation_model_use$data_list$fsh_biom
new_years <- proj_yrs[which(proj_yrs <= assess_yrs[k] & proj_yrs > operating_model_use$data_list$endyr)]
dat_fill_ind <- which(new_catch_data$Year %in% new_years & is.na(new_catch_data$Catch))
new_catch_data$Catch[dat_fill_ind] <- estimation_model_use$quantities$fsh_bio_hat[dat_fill_ind]
if(!is.null(cap)){
new_catch_data$Catch[dat_fill_ind] <- ifelse(new_catch_data$Catch[dat_fill_ind] > cap, cap, new_catch_data$Catch[dat_fill_ind])
}
# Update catch data in OM and EM
operating_model_use$data_list$fsh_biom <- new_catch_data
estimation_model_use$data_list$fsh_biom <- new_catch_data
# Update endyr of OM
nyrs_hind <- operating_model_use$data_list$endyr - operating_model_use$data_list$styr + 1
operating_model_use$data_list$endyr <- assess_yrs[k]
# Update parameters
# -- F_dev
operating_model_use$estimated_params$F_dev <- cbind(operating_model_use$estimated_params$F_dev, matrix(0, nrow= nrow(operating_model_use$estimated_params$F_dev), ncol = length(new_years)))
# -- Time-varing survey catachbilitiy - Assume last year - filled by columns
operating_model_use$estimated_params$ln_srv_q_dev <- cbind(operating_model_use$estimated_params$ln_srv_q_dev, matrix(operating_model_use$estimated_params$ln_srv_q_dev[,ncol(operating_model_use$estimated_params$ln_srv_q_dev)], nrow= nrow(operating_model_use$estimated_params$ln_srv_q_dev), ncol = length(new_years)))
# -- Time-varing selectivity - Assume last year - filled by columns
n_selectivities <- nrow(operating_model_use$data_list$fleet_control)
ln_sel_slp_dev = array(0, dim = c(2, n_selectivities, 2, nyrs_hind + length(new_years)))  # selectivity deviations paramaters for logistic; n = [2, nspp]
sel_inf_dev = array(0, dim = c(2, n_selectivities, 2, nyrs_hind + length(new_years)))  # selectivity deviations paramaters for logistic; n = [2, nspp]
ln_sel_slp_dev[,,,1:nyrs_hind] <- operating_model_use$estimated_params$ln_sel_slp_dev
sel_inf_dev[,,,1:nyrs_hind] <- operating_model_use$estimated_params$sel_inf_dev
ln_sel_slp_dev[,,,(nyrs_hind + 1):(nyrs_hind + length(new_years))] <- ln_sel_slp_dev[,,,nyrs_hind]
sel_inf_dev[,,,(nyrs_hind + 1):(nyrs_hind + length(new_years))] <- sel_inf_dev[,,,nyrs_hind]
operating_model_use$estimated_params$ln_sel_slp_dev <- ln_sel_slp_dev
operating_model_use$estimated_params$sel_inf_dev <- sel_inf_dev
# Update map (Only new parameter we are estimating in OM is the F_dev of the new years)
operating_model_use$map <- Rceattle::build_map(
data_list = operating_model_use$data_list,
params = operating_model_use$estimated_params,
debug = operating_model_use$data_list$debug,
random_rec = operating_model_use$data_list$random_rec)
# -- Fill in with NA's
for (i in 1:length(operating_model_use$map[[2]])) {
operating_model_use$map[[2]][[i]] <- replace(operating_model_use$map[[2]][[i]], values = rep(NA, length(operating_model_use$map[[2]][[i]])))
}
# -- Estimate terminal F for catch
new_f_ind <- (ncol(operating_model_use$map[[2]]$F_dev) - length(new_years) + 1) : ncol(operating_model_use$map[[2]]$F_dev)
operating_model_use$map[[2]]$F_dev[,new_f_ind] <- replace(operating_model_use$map[[2]]$F_dev[,new_f_ind], values = 1:length(operating_model_use$map[[2]]$F_dev[,new_f_ind]))
# --- Turn off F for surveys
for (i in 1:nrow(operating_model_use$data_list$fleet_control)) {
# Turn of F and F dev if not estimating of it is a Survey
if (operating_model_use$data_list$fleet_control$Fleet_type[i] %in% c(0, 2)) {
operating_model_use$map[[2]]$F_dev[i, ] <- NA
}
}
# -- Map out Fdev for years with 0 catch to very low number
fsh_biom <- operating_model_use$data_list$fsh_biom
fsh_ind <- fsh_biom$Fleet_code[which(fsh_biom$Catch == 0)]
yr_ind <- fsh_biom$Year[which(fsh_biom$Catch == 0)] - operating_model_use$data_list$styr + 1
operating_model_use$map[[2]]$F_dev[fsh_ind, yr_ind] <- NA
for (i in 1:length( operating_model_use$map[[2]])) {
operating_model_use$map[[1]][[i]] <- factor( operating_model_use$map[[2]][[i]])
}
operating_model_use$estimated_params$ln_FSPR <- replace(operating_model_use$estimated_params$ln_FSPR, values = rep(-10, length(operating_model_use$estimated_params$ln_FSPR)))
# Fit OM with new catch data
operating_model_use <- fit_mod(
data_list = operating_model_use$data_list,
inits = operating_model_use$estimated_params,
map =  operating_model_use$map,
bounds = NULL,
file = NULL,
debug = operating_model_use$data_list$debug,
random_rec = operating_model_use$data_list$random_rec,
niter = operating_model_use$data_list$niter,
msmMode = operating_model_use$data_list$msmMode,
avgnMode = operating_model_use$data_list$avgnMode,
minNByage = operating_model_use$data_list$debug,
suitMode = operating_model_use$data_list$suitMode,
phase = NULL,
silent = TRUE,
getsd = FALSE,
recompile = FALSE)
# Update standard error from survey for simulation
operating_model_use$data_list$srv_biom$Log_sd <- operating_model_use$quantities$srv_log_sd_hat
Rceattle <- operating_model_use
simulate = simulate
# TODO Options for simulation diet data: multinomial, sqrt-normal, dirichlet, multinomial
dat_sim <- Rceattle$data_list
# Slot 0 -- BT survey biomass -- NFMS annual BT survey
srv_biom_lse = Rceattle$quantities$srv_log_sd_hat
if (simulate) {
# Simulate
values <- exp(rnorm(length(dat_sim$srv_biom$Observation), mean = log(Rceattle$quantities$srv_bio_hat), sd = srv_biom_lse))
} else {
# Estimated value
values <- Rceattle$quantities$srv_bio_hat
}
dat_sim$srv_biom$Observation = values
# Slot 1 -- Age composition
for (obs in 1:nrow(dat_sim$comp_data)) {
sp <- dat_sim$comp_data$Species[obs]
# Age or length?
if(dat_sim$comp_data$Age0_Length1[obs] == 0){
age_length = Rceattle$data_list$nages[sp]
}
if(dat_sim$comp_data$Age0_Length1[obs] == 1){
age_length = Rceattle$data_list$nlengths[sp]
}
if (simulate) {
# Simulate
# Sex (0 = combined, 1 = female, 2 = male, 3 = joint)
#FIXME add dirichlet multinomial
# Combined or females
if(dat_sim$comp_data$Sex[obs] %in% c(0,1)){
# If the model is all combined sex, this will throw an error
if(Rceattle$data_list$nsex[sp] == 1){
Rceattle$quantities$comp_hat[obs, (age_length+1):(2*age_length)] <- 0 # Set males to 0
}
values <- rmultinom(n = 1, size = dat_sim$comp_data$Sample_size[obs], prob = Rceattle$quantities$comp_hat[obs,])
}
# Males
if(dat_sim$comp_data$Sex[obs] %in% c(2)){
Rceattle$quantities$comp_hat[obs, 1:age_length] <- 0 # Set females to 0
values <- rmultinom(n = 1, size = dat_sim$comp_data$Sample_size[obs], prob = Rceattle$quantities$comp_hat[obs,])
}
# Joint
if(dat_sim$comp_data$Sex[obs] %in% c(3)){
values <- rmultinom(n = 1, size = dat_sim$comp_data$Sample_size[obs], prob = Rceattle$quantities$comp_hat[obs,])
}
} else {
# Expected value
values <- Rceattle$quantities$comp_hat[obs, ]
}
dat_sim$comp_data[obs, 9:ncol(dat_sim$comp_data)] = values
}
obs
sp <- dat_sim$comp_data$Species[obs]
# Age or length?
if(dat_sim$comp_data$Age0_Length1[obs] == 0){
age_length = Rceattle$data_list$nages[sp]
}
if(dat_sim$comp_data$Age0_Length1[obs] == 1){
age_length = Rceattle$data_list$nlengths[sp]
}
Rceattle$quantities$comp_hat[obs,]
Rceattle$quantities$comp_hat
comp_check <- cbind(Rceattle$data_list$comp_data, Rceattle$quantities$comp_hat)
head(Rceattle$data_list$comp_data)
comp_check <- cbind(Rceattle$data_list$comp_data[,1:8], Rceattle$quantities$comp_hat)
head(comp_check)
head(comp_check,20)
comp_check[30:40,]
Rceattle$data_list$comp_data[30:40,]
plot_biomass(Rceattle)
plot_biomass(Rceattle, incl_proj = TRUE)
Rceattle$data_list$endyr
Rceattle$data_list$projyr
Rceattle$quantities$sel
Rceattle$quantities$sel[1,1,,]
Rceattle$data_list$fleet_control
dim(Rceattle$quantities$sel)
Rceattle$quantities$sel[1,1,,]
Rceattle$quantities$srv_q[1,,]
Rceattle$quantities$srv_q[1,]
Rceattle$quantities$srv_q
dim(Rceattle$quantities$srv_q)
dim(Rceattle$quantities$F_tot)
Rceattle$quantities$F_tot[1,1,,]
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2030
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0)
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
silent = TRUE)
# Estimate pollock M
mydata_M <- mydata
mydata_M$est_M1 <- c(1,0,0)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
silent = TRUE,
recompile = FALSE)
# The you can plot the model results using using
plot_biomass(Rceattle =  list(ss_run, ss_run_M), model_names = c("Fixed M", "Est M"), line_col = c(1,2))
plot_recruitment(Rceattle =  list(ss_run, ss_run_M), add_ci = TRUE)
plot_catch(Rceattle =  ss_run, incl_proj = T)
# For the a multispecies model starting from the single species parameters, the following can be specified to load the data:
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$projyr <- 2030
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
debug = 0, # Estimate
niter = 10, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
silent = TRUE,
recompile = FALSE)
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2030
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0)
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
silent = TRUE)
# Estimate pollock M
mydata_M <- mydata
mydata_M$est_M1 <- c(1,0,0)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
silent = TRUE,
recompile = FALSE)
# The you can plot the model results using using
plot_biomass(Rceattle =  list(ss_run, ss_run_M), model_names = c("Fixed M", "Est M"), line_col = c(1,2))
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2030
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0)
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
silent = TRUE)
# Estimate pollock M
mydata_M <- mydata
mydata_M$est_M1 <- c(1,0,0)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
silent = TRUE,
recompile = FALSE)
# The you can plot the model results using using
plot_biomass(Rceattle =  list(ss_run, ss_run_M), model_names = c("Fixed M", "Est M"), line_col = c(1,2))
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2030
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0)
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
silent = TRUE)
# Estimate pollock M
mydata_M <- mydata
mydata_M$est_M1 <- c(1,0,0)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
silent = TRUE,
recompile = FALSE)
# The you can plot the model results using using
plot_biomass(Rceattle =  list(ss_run, ss_run_M), model_names = c("Fixed M", "Est M"), line_col = c(1,2))
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
silent = TRUE,
recompile = FALSE)
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2030
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0)
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
silent = TRUE)
# Estimate pollock M
mydata_M <- mydata
mydata_M$est_M1 <- c(1,0,0)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
silent = TRUE,
recompile = FALSE)
# The you can plot the model results using using
plot_biomass(Rceattle =  list(ss_run, ss_run_M), model_names = c("Fixed M", "Est M"), line_col = c(1,2))
plot_recruitment(Rceattle =  list(ss_run, ss_run_M), add_ci = TRUE)
# The you can plot the model results using using
plot_biomass(Rceattle =  list(ss_run, ss_run_M), model_names = c("Fixed M", "Est M"), line_col = c(1,2))
plot_recruitment(Rceattle =  list(ss_run, ss_run_M), add_ci = TRUE)
plot_catch(Rceattle =  ss_run, incl_proj = T)
# For the a multispecies model starting from the single species parameters, the following can be specified to load the data:
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$projyr <- 2030
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
debug = 0, # Estimate
niter = 10, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
silent = TRUE,
recompile = FALSE)
# We can plot both runs as well:
mod_list <- list(ss_run, ms_run)
mod_names <- c("Single-species", "Multi-species")
# Plot biomass trajectory
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names, add_ci = TRUE)
library(Rceattle)
load("~/GitHub/RceattleRuns/GOA/Model runs/GOA_18.5.1/Models/18_5_1_Niter3_2021-06-14.RData")
mod_list_all[[1]]$data_list$projyr <- 2050
i = 1
mod_list_all[[1]]$data_list$fleet_control$proj_F_prop <- c(rep(0, 7), 1,0,0,1, 0,0,1/3,1/3,1/3)
mod_list_all[[i]]$estimated_params$proj_F_prop <- mod_list_all[[1]]$data_list$fleet_control$proj_F_prop
# for(i in 1:2){
mod_list_all[[i]]$estimated_params$rec_dev <- cbind(mod_list_all[[i]]$estimated_params$rec_dev, matrix(0, 4, 31))
map <- build_map(mod_list_all[[1]]$data_list, params = mod_list_all[[1]]$estimated_params, debug = FALSE)
# map[[2]]$ln_FSPR <- matrix(c(1:6, NA, NA), 4, 2, byrow = TRUE)
# map[[1]]$ln_FSPR <- as.factor(map[[2]]$ln_FSPR)
# map[[2]]$dummy <- NA
# map[[1]]$dummy <- as.factor(map[[2]]$dummy)
mod_check_spr <- Rceattle::fit_mod(data_list = mod_list_all[[i]]$data_list,
inits = mod_list_all[[i]]$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
map = map,
debug = 0, # Estimate
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = mod_list_all[[i]]$data_list$msmMode, # MSVPA based
suitMode = 0, # empirical suitability
phase = "default",
silent = TRUE)
mod_check_spr$identified$param_list$dummy
dim(mod_check_spr$quantities$biomassSSB)
mod_check_spr$quantities$FSPR
mod_check_spr$quantities$SB0
mod_check_spr$quantities$SB40
mod_check_spr$quantities$SB40/mod_check_spr$quantities$SB0
mod_check_spr$quantities$F35_tot
mod_check_spr$quantities$F35_tot[15,,]
dim(mod_check_spr$quantities$F35_tot)
0.209*12
usethis::use_package("ggplot2")
library(Rceattle)
