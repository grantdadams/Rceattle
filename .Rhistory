map = map$mapFactor,
random = random_vars,
silent = verbose != 2
)
}
# -- Save objects
mod_objects <-
list(
TMBfilename = TMBfilename,
initial_params = start_par,
bounds = bounds,
map = map
)
if(verbose > 0) {message(paste0("Step ",step, ": final build complete. Optimizing."))}
step = step + 1
# -- Optimize hindcast
if(estimateMode %in% c(0,1,4)){
opt = Rceattle::fit_tmb(obj = obj,
fn=obj$fn,
gr=obj$gr,
startpar=obj$par,
lower = L,
upper = U,
loopnum = loopnum,
getsd = getsd,
control = control,
getJointPrecision = getJointPrecision,
quiet = verbose == 2,
)
if(verbose > 0) {message("Step ",step, ": Final optimization complete")
step = step + 1
}
# -- Convergence warnings
if(estimateMode %in% c(0,1)){
# Bad parameter identification
if(is.null(opt$SD) & getsd){
identified <- suppressMessages(TMBhelper::check_estimability(obj))
# Make into list
identified_param_list <- obj$env$parList(identified$BadParams$Param_check)
identified_param_list <- rapply(identified_param_list,function(x) ifelse(x==0,"Not estimated",x), how = "replace")
identified_param_list <- rapply(identified_param_list,function(x) ifelse(x==1,"OK",x), how = "replace")
identified_param_list <- rapply(identified_param_list,function(x) ifelse(x==2,"BAD",x), how = "replace")
identified$param_list <- identified_param_list
mod_objects$identified <- identified
}
}
}
# -- Get MLEs
if (estimateMode > 1) { # Debugging and projection only: use initial parameters
last_par <- start_par
} else{
if(!random_rec){
last_par = try(obj$env$parList(obj$env$last.par.best)) # FIXME: maybe add obj$env$last.par.best inside?
} else {
last_par = try(obj$env$parList())
}
}
data_list$HCR
data_list_reorganized$HCR = data_list$HCR # Set HCR back to original
# -- Update map in obs
hcr_map <- build_hcr_map(data_list, map, debug = estimateMode > 3)
mod_objects$hcr_map <- hcr_map
hcr_map$mapFactor$ln_Flimit
hcr_map$mapList$ln_Flimit
check <- sum(sapply(hcr_map$mapList, function(x) sum(!is.na(x))))
if(check == 0){stop("No parameters in hcr map")}
obj = TMB::MakeADFun(
data_list_reorganized,
parameters = last_par,
DLL = TMBfilename,
map = hcr_map$mapFactor,
random = random_vars,
silent = verbose != 2
)
obj$par
# -- Optimize
opt = Rceattle::fit_tmb(obj = obj,
fn=obj$fn,
gr=obj$gr,
startpar=obj$par,
loopnum = loopnum,
getsd = getsd,
control = control,
getJointPrecision = FALSE,
quiet = verbose == 2,
)
obj$report()$quantities$DynamicSPRtarget/obj$report()$quantities$DynamicSPR0
obj$report()$DynamicSPRtarget/obj$report()$DynamicSPR0
obj$report()$DynamicSPRlimit/obj$report()$DynamicSPR0
obj$report()$SPRlimit/obj$report()$SPR0
estimateMode
last_par
obj$env$last.par.best
# Get quantities
quantities <- obj$report(obj$env$last.par.best)
quantities$DynamicFtargetSPR/quantities$DynamicSPR0
quantities$DynamicFtargetSPR
dim(\quantities$DynamicFtargetSPR)
dim(quantities$DynamicFtargetSPR)
quantities$DynamicSPRlimit/quantities$DynamicSPR0
quantities$DynamicSPRtarget/quantities$DynamicSPR0
obj = TMB::MakeADFun(
data_list_reorganized,
parameters = start_par,
DLL = TMBfilename,
map = map$mapFactor,
random = random_vars,
silent = verbose != 2
)
# -- Save objects
mod_objects <-
list(
TMBfilename = TMBfilename,
initial_params = start_par,
bounds = bounds,
map = map
)
if(verbose > 0) {message(paste0("Step ",step, ": final build complete. Optimizing."))}
step = step + 1
# -- Optimize hindcast
if(estimateMode %in% c(0,1,4)){
opt = Rceattle::fit_tmb(obj = obj,
fn=obj$fn,
gr=obj$gr,
startpar=obj$par,
lower = L,
upper = U,
loopnum = loopnum,
getsd = getsd,
control = control,
getJointPrecision = getJointPrecision,
quiet = verbose == 2,
)
if(verbose > 0) {message("Step ",step, ": Final optimization complete")
step = step + 1
}
# -- Convergence warnings
if(estimateMode %in% c(0,1)){
# Bad parameter identification
if(is.null(opt$SD) & getsd){
identified <- suppressMessages(TMBhelper::check_estimability(obj))
# Make into list
identified_param_list <- obj$env$parList(identified$BadParams$Param_check)
identified_param_list <- rapply(identified_param_list,function(x) ifelse(x==0,"Not estimated",x), how = "replace")
identified_param_list <- rapply(identified_param_list,function(x) ifelse(x==1,"OK",x), how = "replace")
identified_param_list <- rapply(identified_param_list,function(x) ifelse(x==2,"BAD",x), how = "replace")
identified$param_list <- identified_param_list
mod_objects$identified <- identified
}
}
}
# -- Get MLEs
if (estimateMode > 1) { # Debugging and projection only: use initial parameters
last_par <- start_par
} else{
if(!random_rec){
last_par = try(obj$env$parList(obj$env$last.par.best)) # FIXME: maybe add obj$env$last.par.best inside?
} else {
last_par = try(obj$env$parList())
}
}
# STEP 10 - Run HCR projections
if(estimateMode %in% c(0,2,4)){
if(data_list$HCR > 2){
data_list_reorganized$HCR = data_list$HCR # Set HCR back to original
# -- Update map in obs
hcr_map <- build_hcr_map(data_list, map, debug = estimateMode > 3)
mod_objects$hcr_map <- hcr_map
check <- sum(sapply(hcr_map$mapList, function(x) sum(!is.na(x))))
if(check == 0){stop("No parameters in hcr map")}
obj = TMB::MakeADFun(
data_list_reorganized,
parameters = last_par,
DLL = TMBfilename,
map = hcr_map$mapFactor,
random = random_vars,
silent = verbose != 2
)
# -- Optimize
opt = Rceattle::fit_tmb(obj = obj,
fn=obj$fn,
gr=obj$gr,
startpar=obj$par,
loopnum = loopnum,
getsd = getsd,
control = control,
getJointPrecision = FALSE,
quiet = verbose == 2,
)
if(verbose > 0) {message("Step ",step, ": Projections complete")}
# -- Update MLEs
if (estimateMode > 2) { # Debugging, give initial parameters
last_par <- start_par
}else{
if(!random_rec){
last_par = try(obj$env$parList(obj$env$last.par.best)) # FIXME: maybe add obj$env$last.par.best inside?
} else {
last_par = try(obj$env$parList())
}
}
}
}
# -- Save estimated parameters
mod_objects$estimated_params <- last_par
mod_objects$obj = obj
# Get quantities
quantities <- obj$report(obj$env$last.par.best)
quantities$DynamicSPRtarget/quantities$DynamicSPR0
obj$par
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <-rep(1,7)
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Estimate single-species and estimate M
mydata_M <- mydata
mydata_M$est_M1 <- c(1,1,1)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# For the a multispecies model starting from the single species parameters, the following can be specified to load the data:
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$est_M1 <- c(1,1,1) # Estimate residual M
BS2017MS$projyr <- 2060
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# We can plot both runs as well:
mod_list <- list(ss_run, ss_run_M, ms_run)
mod_names <- c("SS", "SS-M", "MS")
# Plot biomass trajectory
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names, add_ci = TRUE)
plot_selectivity(Rceattle = mod_list, model_names = mod_names)
################################################
# Alternative harvest control rules
################################################
# -- NPFMC Tier 3
ss_run_Tier3 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 3, # Tier3 HCR
FXSPRtarget = 0.4, # F40%
FXSPRlimit = 0.35, # F35%
Plimit = 0.2, # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicTier3 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 3, # Tier3 HCR
DynamicHCR = TRUE, # Use dynamic reference points
FXSPRtarget = 0.4, # F40%
FXSPRlimit = 0.35, # F35%
Plimit = 0.2, # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicTier3$quantities$DynamicSPRtarget/ss_run_dynamicTier3$quantities$DynamicSPR0
# -- PFMC Category 1
ss_run_Cat1 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 4, # Cat 1 HCR
FXSPRlimit = 0.45, # F45%
Ptarget = 0.4, # Target is 40% B0
Plimit = 0.1, # No fishing when SB<SB10
Pstar = 0.45,
Sigma = 0.5),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicCat1 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 4, # Cat 1 HCR
DynamicHCR = TRUE, # Use dynamic reference points
FXSPRlimit = 0.45, # F45%
Ptarget = 0.4, # Target is 40% SB0
Plimit = 0.1, # No fishing when SB<SB10
Pstar = 0.45,
Sigma = 0.5),
msmMode = 0, # Single species mode
verbose = 1)
# -- SESSF Tier 1
ss_run_Tier1 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 5, # Tier 1 HCR
FXSPRtarget = 0.48, # F40%
FXSPRlimit = 0.20, # F20%
Ptarget = 0.35, # Target is 35% SSB0
Plimit = 0.20, # No fishing when B<B20
),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicTier1 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 5, # Tier 1 HCR
DynamicHCR = TRUE,
FXSPRtarget = 0.48, # F40%
FXSPRlimit = 0.20, # F20%
Ptarget = 0.35, # Target is 35% SSB0
Plimit = 0.20, # No fishing when B<B20
),
msmMode = 0, # Single species mode
verbose = 1)
# -- Plot
mod_list <- list(ss_run, ss_run_Tier3, ss_run_Cat1, ss_run_Tier1)
model_names <- c("F=0", "NPFMC Tier 3", "PFMC Cat 1", "SESSF Tier 1")
plot_biomass(mod_list, model_names = model_names, incl_proj = TRUE)
plot_ssb(mod_list, model_names = model_names, incl_proj = TRUE)
mod_list <- list(ss_run, ss_run_dynamicTier3, ss_run_dynamicCat1, ss_run_dynamicTier1)
model_names <- c("F=0", "NPFMC Tier 3", "PFMC Cat 1", "SESSF Tier 1")
plot_biomass(mod_list, model_names = model_names, incl_proj = TRUE)
plot_ssb(mod_list, model_names = model_names, incl_proj = TRUE)
ss_run_dynamicTier3$quantities$DynamicSPRlimit/ss_run_dynamicTier3$quantities$DynamicSPR0
mod_list <- list(ss_run, ss_run_dynamicTier3, ss_run_dynamicCat1, ss_run_dynamicTier1)
model_names <- c("F=0", "NPFMC Tier 3", "PFMC Cat 1", "SESSF Tier 1")
plot_biomass(mod_list, model_names = model_names, incl_proj = TRUE)
plot_ssb(mod_list, model_names = model_names, incl_proj = TRUE)
ss_run_dynamicTier1 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 5, # Tier 1 HCR
DynamicHCR = TRUE,
FXSPRtarget = 0.48, # F40%
FXSPRlimit = 0.20, # F20%
Ptarget = 0.35, # Target is 35% SSB0
Plimit = 0.20, # No fishing when B<B20
),
msmMode = 0, # Single species mode
verbose = 2)
ss_run_dynamicTier3 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 3, # Tier3 HCR
DynamicHCR = TRUE, # Use dynamic reference points
FXSPRtarget = 0.4, # F40%
FXSPRlimit = 0.35, # F35%
Plimit = 0.2, # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicTier3$quantities$DynamicSPRlimit/ss_run_dynamicTier3$quantities$DynamicSPR0
ss_run_Tier3$quantities$DynamicSPRlimit/ss_run_Tier3$quantities$DynamicSPR0
ss_run$quantities$DynamicSPRlimit/ss_run$quantities$DynamicSPR0
ss_run_dynamicTier3$quantities$DynamicSPRlimit/ss_run_dynamicTier3$quantities$DynamicSPR0
ss_run$quantities$DynamicSPRlimit/ss_run$quantities$DynamicSPR0
ss_run_dynamicTier3$quantities$DynamicSPRlimit/ss_run_dynamicTier3$quantities$DynamicSPR0
devtools::document()
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <-rep(1,7)
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Estimate single-species and estimate M
mydata_M <- mydata
mydata_M$est_M1 <- c(1,1,1)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# For the a multispecies model starting from the single species parameters, the following can be specified to load the data:
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$est_M1 <- c(1,1,1) # Estimate residual M
BS2017MS$projyr <- 2060
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# We can plot both runs as well:
mod_list <- list(ss_run, ss_run_M, ms_run)
mod_names <- c("SS", "SS-M", "MS")
# Plot biomass trajectory
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names, add_ci = TRUE)
plot_selectivity(Rceattle = mod_list, model_names = mod_names)
################################################
# Alternative harvest control rules
################################################
# -- NPFMC Tier 3
ss_run_Tier3 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 3, # Tier3 HCR
FXSPRtarget = 0.4, # F40%
FXSPRlimit = 0.35, # F35%
Plimit = 0.2, # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_Tier3$quantities$DynamicSPRlimit/ss_run_Tier3$quantities$DynamicSPR0
ss_run_dynamicTier3 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 3, # Tier3 HCR
DynamicHCR = TRUE, # Use dynamic reference points
FXSPRtarget = 0.4, # F40%
FXSPRlimit = 0.35, # F35%
Plimit = 0.2, # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicTier3$quantities$DynamicSPRlimit/ss_run_dynamicTier3$quantities$DynamicSPR0
ss_run$quantities$DynamicSPRlimit/ss_run$quantities$DynamicSPR0
check <- ss_run_dynamicTier3
check$quantities$biomassSSB <- check$quantities$DynamicSPR0
plot_ssb(check)
ss_run_Tier3$quantities$SPRlimit/ss_run_Tier3$quantities$SPR0
ss_run_dynamicTier3$quantities$DynamicSPRlimit/ss_run_dynamicTier3$quantities$DynamicSPR0
check <- ss_run_dynamicTier3
check$quantities$biomassSSB <- check$quantities$DynamicSPR0
plot_ssb(check)
plot_ssb(check)
plot_ssb(check, incl_proj = TRUE)
check$quantities$biomassSSB <- check$quantities$DynamicSB0
plot_ssb(check, incl_proj = TRUE)
check$quantities$biomassSSB <- check$quantities$DynamicSPRlimit
plot_ssb(check, incl_proj = TRUE)
check$quantities$biomassSSB <- check$quantities$DynamicSPRtarget
plot_ssb(check, incl_proj = TRUE)
check$quantities$DynamicSPRtarget
check$quantities$DynamicSPRlimit
check$quantities$DynamicSPRlimit
check$quantities$DynamicSPRlimit
check$quantities$DynamicSPRlimit
check$quantities$DynamicSPRlimit
check$quantities$DynamicSPRlimit
check$quantities$DynamicSPRlimit
check$quantities$DynamicSPRlimit
check$quantities$DynamicSPRlimit == check$quantities$DynamicSPRtarget
check <- ss_run_dynamicTier3
check$quantities$biomassSSB <- check$quantities$DynamicSPR0
plot_ssb(check, incl_proj = TRUE)
check$quantities$biomassSSB <- check$quantities$DynamicSB0
plot_ssb(check, incl_proj = TRUE)
check$quantities$biomassSSB <- check$quantities$DynamicSPRlimit
plot_ssb(check, incl_proj = TRUE)
check$quantities$biomassSSB <- check$quantities$DynamicSPRtarget
plot_ssb(check, incl_proj = TRUE)
check <- ss_run_dynamicTier3
check$quantities$biomassSSB <- check$quantities$DynamicSPR0
plot_ssb(check, incl_proj = TRUE)
check$quantities$biomassSSB <- check$quantities$DynamicSB0
plot_ssb(check, incl_proj = TRUE)
check$quantities$biomassSSB <- check$quantities$DynamicSPRlimit
plot_ssb(check, incl_proj = TRUE)
