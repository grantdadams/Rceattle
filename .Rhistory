nyrs <- max(nyrs_vec)
maxyr <- max((sapply(Years, max)))
if(is.null(minyr)){minyr <- min((sapply(Years, min)))}
spp <- which(Rceattle[[1]]$data_list$estDynamics == 0)
nspp <- Rceattle[[1]]$data_list$nspp
minage <- Rceattle[[1]]$data_list$minage
species <- 1:nspp
# Get biomass
recruitment <-
array(NA, dim = c(nspp, nyrs,  length(Rceattle)))
recruitment_sd <-
array(NA, dim = c(nspp, nyrs,  length(Rceattle)))
Rceattle[[i]]$sdrep$covi = 1
recruitment[, 1:length(Years[[i]]) , i] <- Rceattle[[i]]$quantities$R[,1:nyrs_vec[i]]
sd_rec <- which(names(Rceattle[[i]]$sdrep$value) == "R")
sd_rec <- Rceattle[[i]]$sdrep$sd[sd_rec]
recruitment_sd[, , i] <-
replace(recruitment_sd[, , i], values = sd_rec[1:(nyrs_vec[i] * nspp)])
recruitment_sd[, , i]
# 95% CI
recruitment_upper <- recruitment + recruitment_sd * 1.92
recruitment_lower <- recruitment - recruitment_sd * 1.92
# Rescale
recruitment <- recruitment / 1000000
recruitment_upper <- recruitment_upper / 1000000
recruitment_lower <- recruitment_lower / 1000000
add_ci <- TRUE
# Get biomass
recruitment <-
array(NA, dim = c(nspp, nyrs,  length(Rceattle)))
recruitment_sd <-
array(NA, dim = c(nspp, nyrs,  length(Rceattle)))
for (i in 1:length(Rceattle)) {
recruitment[, 1:length(Years[[i]]) , i] <- Rceattle[[i]]$quantities$R[,1:nyrs_vec[i]]
# Get SD of rec
if (add_ci) {
sd_rec <- which(names(Rceattle[[i]]$sdrep$value) == "R")
sd_rec <- Rceattle[[i]]$sdrep$sd[sd_rec]
recruitment_sd[, , i] <-
replace(recruitment_sd[, , i], values = sd_rec[1:(nyrs_vec[i] * nspp)])
}
}
# Convert single one into a list
if(class(Rceattle) == "Rceattle"){
Rceattle <- list(Rceattle)
}
# Species names
if(is.null(spnames)){
spnames =  Rceattle[[1]]$data_list$spnames
}
# Extract data objects
Endyrs <-  sapply(Rceattle, function(x) x$data_list$endyr)
Years <- lapply(Rceattle, function(x) x$data_list$styr:x$data_list$endyr)
if(incl_proj){
Years <- lapply(Rceattle, function(x) x$data_list$styr:x$data_list$projyr)
}
max_endyr <- max(unlist(Endyrs), na.rm = TRUE)
nyrs_vec <- sapply(Years, length)
nyrs <- max(nyrs_vec)
maxyr <- max((sapply(Years, max)))
if(is.null(minyr)){minyr <- min((sapply(Years, min)))}
spp <- which(Rceattle[[1]]$data_list$estDynamics == 0)
nspp <- Rceattle[[1]]$data_list$nspp
minage <- Rceattle[[1]]$data_list$minage
if(is.null(species)){
species <- 1:nspp
}
spp <- spp[which(spp %in% species)]
# Get biomass
recruitment <-
array(NA, dim = c(nspp, nyrs,  length(Rceattle)))
recruitment_sd <-
array(NA, dim = c(nspp, nyrs,  length(Rceattle)))
for (i in 1:length(Rceattle)) {
recruitment[, 1:length(Years[[i]]) , i] <- Rceattle[[i]]$quantities$R[,1:nyrs_vec[i]]
# Get SD of rec
if (add_ci) {
sd_rec <- which(names(Rceattle[[i]]$sdrep$value) == "R")
sd_rec <- Rceattle[[i]]$sdrep$sd[sd_rec]
recruitment_sd[, , i] <-
replace(recruitment_sd[, , i], values = sd_rec[1:(nyrs_vec[i] * nspp)])
}
}
# 95% CI
recruitment_upper <- recruitment + recruitment_sd * 1.92
recruitment_lower <- recruitment - recruitment_sd * 1.92
# Rescale
recruitment <- recruitment / 1000000
recruitment_upper <- recruitment_upper / 1000000
recruitment_lower <- recruitment_lower / 1000000
nyrs_vec
#' @param lwd Line width as specified by user
#' @param right_adj How many units of the x-axis to add to the right side of the figure for fitting the legend.
#' @param mohns data.frame of mohn's rows extracted from \code{\link{retrospective}}
#' @param minyr First year to plot
#' @param save_rec
#' @param incl_proj TRUE/FALSE, include projection years
#'
#' @export
#'
#' @return Returns and saves a figure with the population trajectory.
plot_recruitment <-
function(Rceattle,
file = NULL,
model_names = NULL,
line_col = NULL,
species = NULL,
spnames = NULL,
add_ci = FALSE,
lwd = 3,
save_rec = FALSE,
right_adj = 0,
mohns = NULL,
minyr = NULL,
incl_proj = FALSE) {
# Convert single one into a list
if(class(Rceattle) == "Rceattle"){
Rceattle <- list(Rceattle)
}
# Species names
if(is.null(spnames)){
spnames =  Rceattle[[1]]$data_list$spnames
}
# Extract data objects
Endyrs <-  sapply(Rceattle, function(x) x$data_list$endyr)
Years <- lapply(Rceattle, function(x) x$data_list$styr:x$data_list$endyr)
if(incl_proj){
Years <- lapply(Rceattle, function(x) x$data_list$styr:x$data_list$projyr)
}
max_endyr <- max(unlist(Endyrs), na.rm = TRUE)
nyrs_vec <- sapply(Years, length)
nyrs <- max(nyrs_vec)
maxyr <- max((sapply(Years, max)))
if(is.null(minyr)){minyr <- min((sapply(Years, min)))}
spp <- which(Rceattle[[1]]$data_list$estDynamics == 0)
nspp <- Rceattle[[1]]$data_list$nspp
minage <- Rceattle[[1]]$data_list$minage
if(is.null(species)){
species <- 1:nspp
}
spp <- spp[which(spp %in% species)]
# Get biomass
recruitment <-
array(NA, dim = c(nspp, nyrs,  length(Rceattle)))
recruitment_sd <-
array(NA, dim = c(nspp, nyrs,  length(Rceattle)))
for (i in 1:length(Rceattle)) {
recruitment[, 1:length(Years[[i]]) , i] <- Rceattle[[i]]$quantities$R[,1:nyrs_vec[i]]
# Get SD of rec
if (add_ci) {
sd_rec <- which(names(Rceattle[[i]]$sdrep$value) == "R")
sd_rec <- Rceattle[[i]]$sdrep$sd[sd_rec]
recruitment_sd[, , i] <-
replace(recruitment_sd[, , i], values = sd_rec[1:(nyrs_vec[i] * nspp)])
}
}
# 95% CI
recruitment_upper <- recruitment + recruitment_sd * 1.92
recruitment_lower <- recruitment - recruitment_sd * 1.92
# Rescale
recruitment <- recruitment / 1000000
recruitment_upper <- recruitment_upper / 1000000
recruitment_lower <- recruitment_lower / 1000000
if (save_rec) {
for (i in 1:nspp) {
dat <- data.frame(recruitment[i, , ])
datup <- data.frame(recruitment_upper[i, , ])
datlow <- data.frame(recruitment_lower[i, , ])
dat_new <- cbind(dat[, 1], datlow[, 1], datup[, 1])
colnames(dat_new) <- rep(model_names[1], 3)
for (j in 2:ncol(dat)) {
dat_new2 <- cbind(dat[, j], datlow[, j], datup[, j])
colnames(dat_new2) <- rep(model_names[j], 3)
dat_new <- cbind(dat_new, dat_new2)
}
filename <-
paste0(file, "_recruitment_species_", i, ".csv")
write.csv(dat_new, file = filename)
}
}
# Plot limits
ymax <- c()
ymin <- c()
for (i in 1:dim(recruitment)[1]) {
if (add_ci) {
ymax[i] <- max(c(recruitment_upper[i, , ], 0), na.rm = T)
ymin[i] <- min(c(recruitment_upper[i, , ], 0), na.rm = T)
} else{
ymax[i] <- max(c(recruitment[i, , ], 0), na.rm = T)
ymin[i] <- min(c(recruitment[i, , ], 0), na.rm = T)
}
}
ymax <- ymax + 0.2 * ymax
if (is.null(line_col)) {
line_col <- rev(oce::oce.colorsViridis(length(Rceattle)))
}
# Plot trajectory
loops <- ifelse(is.null(file), 1, 2)
for (i in 1:loops) {
if (i == 2) {
filename <- paste0(file, "_recruitment_trajectory", ".png")
png(
file = filename ,
width = 7,# 169 / 25.4,
height = 6.5,# 150 / 25.4,
units = "in",
res = 300
)
}
# Plot configuration
layout(matrix(1:(length(spp) + 2), nrow = (length(spp) + 2)), heights = c(0.1, rep(1, length(spp)), 0.2))
par(
mar = c(0, 3 , 0 , 1) ,
oma = c(0 , 0 , 0 , 0),
tcl = -0.35,
mgp = c(1.75, 0.5, 0)
)
plot.new()
for (j in 1:length(spp)) {
plot(
y = NA,
x = NA,
ylim = c(ymin[spp[j]], ymax[spp[j]]),
xlim = c(minyr, maxyr + (maxyr - minyr) * right_adj),
xlab = "Year",
ylab = "Recruitment (millions)",
xaxt = c(rep("n", length(spp) - 1), "s")[j]
)
# Horizontal line at end yr
if(incl_proj){
abline(v = max_endyr, lwd  = lwd, col = "grey", lty = 2)
}
# Legends
legend("topleft",
legend = spnames[spp[j]],
bty = "n",
cex = 1)
if(!is.null(mohns)){
legend("top", paste0("Rho = ", round(mohns[3,spp[j]+1], 2) ), bty = "n", cex = 0.8) # Biomass rho
}
if (spp[j] == 1) {
if(!is.null(model_names)){
legend(
"topright",
legend = model_names,
lty = rep(1, length(line_col)),
lwd = lwd,
col = line_col,
bty = "n",
cex = 0.72
)
}
}
# Credible interval
if (add_ci) {
for (k in 1:dim(recruitment)[3]) {
polygon(
x = c(Years[[k]], rev(Years[[k]])),
y = c(recruitment_upper[spp[j], 1:length(Years[[k]]), k], rev(recruitment_lower[spp[j], 1:length(Years[[k]]), k])),
col = adjustcolor( line_col[k], alpha.f = 0.4),
border = NA
) # 95% CI
}
}
# Mean recruitment
for (k in 1:dim(recruitment)[3]) {
lines(
x = Years[[k]],
y = recruitment[spp[j], 1:length(Years[[k]]), k],
lty = 1,
lwd = lwd,
col = line_col[k]
) # Median
}
}
if (i == 2) {
dev.off()
}
}
}
plot_recruitment(Rceattle, add_ci = TRUE)
sd_rec <- which(names(Rceattle[[i]]$sdrep$value) == "R")
sd_rec <- Rceattle[[i]]$sdrep$sd[sd_rec]
recruitment_sd[, , i] <-
replace(recruitment_sd[, , i], values = sd_rec[1:(nyrs_vec[i] * nspp)])
i
sd_rec[1:(nyrs_vec[i] * nspp)]
length(sd_rec[1:(nyrs_vec[i] * nspp)])
length(recruitment_sd[, , i])
i = 1
# Years
sub_rel_proj_yrs <- (max_styr - Rceattle[[i]]$data_list$styr + 1) : (min_projyr - Rceattle[[i]]$data_list$styr + 1) # Find years of overlap
# Extract Rec, SSB, B
# - R
sd_rec <- array(NA, dim = c(nspp, nyrs[i]))
mu_rec <- array(NA, dim = c(nspp, nyrs[i]))
rec_rows <- which(names(Rceattle[[i]]$sdrep$value) == "R")
sd_rec <- replace(sd_rec, values = Rceattle[[i]]$sdrep$sd[rec_rows])[,sub_rel_proj_yrs]
mu_rec <- replace(mu_rec, values = Rceattle[[i]]$sdrep$value[rec_rows])[,sub_rel_proj_yrs]
# Convert single one into a list
if(class(Rceattle) == "Rceattle"){
stop("Only one model provided")
}
if(is.null(weights)){
weights = rep(1/length(Rceattle), length(Rceattle))
}
weights <- weights/sum(weights)
# Extract number of species of each model
nspp <- sapply(Rceattle, function(x) x$data_list$nspp)
nspp <- unique(nspp)
if(length(nspp) > 1){stop("Number of species does not match across models")}
# Extract timespan of each model
years <- sapply(Rceattle, function(x) x$data_list$styr:x$data_list$projyr)
endyrs <- sapply(Rceattle, function(x) x$data_list$endyr)
styrs <- sapply(Rceattle, function(x) x$data_list$styr)
projyrs <- sapply(Rceattle, function(x) x$data_list$projyr)
nyrs <- sapply(years, length)
min_projyr <- min(projyrs, na.rm = TRUE) # Find coverage across all models
min_hindyr <- min(endyrs, na.rm = TRUE) # Find coverage across all models
max_styr <- max(styrs, na.rm = TRUE)
# Initialize model average object
mod_avg <- Rceattle[[which(nyrs == min(nyrs))[1]]] # Copy a model of the smallest length to fill in
mod_avg_rel_proj_yrs <- (max_styr - mod_avg$data_list$styr + 1) : (min_projyr - mod_avg$data_list$styr + 1) # Find years of overlap
mod_avg_rel_hind_yrs <- (max_styr - mod_avg$data_list$styr + 1) : (min_hindyr - mod_avg$data_list$styr + 1) # Find years of overlap
mod_avg$estimated_params <- mod_avg$initial_params <- mod_avg$opt <- mod_avg$run_time <- mod_avg$obj <- mod_avg$map <- mod_avg$bounds <- NULL
# -- Set all quantities to zero
for(i in 1:length(mod_avg$quantities)){
mod_avg$quantities[[i]] <- replace(mod_avg$quantities[[i]], values = rep(0, length(mod_avg$quantities[[i]])))
}
weights <- round(weights * nboot)
nrows <- 1:sum(weights)
rowid <- rep(1:length(weights), weights)
# List to save samples of SSB, B, and R
recruitment <-
array(NA, dim = c(nspp, length(mod_avg_rel_proj_yrs),  sum(weights)))
biomassSSB <-
array(NA, dim = c(nspp, length(mod_avg_rel_proj_yrs),  sum(weights)))
biomass <-
array(NA, dim = c(nspp, length(mod_avg_rel_proj_yrs),  sum(weights)))
weights
# Years
sub_rel_proj_yrs <- (max_styr - Rceattle[[i]]$data_list$styr + 1) : (min_projyr - Rceattle[[i]]$data_list$styr + 1) # Find years of overlap
length(Rceattle)
i
i = 1
# Years
sub_rel_proj_yrs <- (max_styr - Rceattle[[i]]$data_list$styr + 1) : (min_projyr - Rceattle[[i]]$data_list$styr + 1) # Find years of overlap
# Extract Rec, SSB, B
# - R
sd_rec <- array(NA, dim = c(nspp, nyrs[i]))
mu_rec <- array(NA, dim = c(nspp, nyrs[i]))
rec_rows <- which(names(Rceattle[[i]]$sdrep$value) == "R")
sd_rec <- replace(sd_rec, values = Rceattle[[i]]$sdrep$sd[rec_rows])[,sub_rel_proj_yrs]
mu_rec <- replace(mu_rec, values = Rceattle[[i]]$sdrep$value[rec_rows])[,sub_rel_proj_yrs]
rec_samples <- MASS::mvrnorm(weights[i], mu = mu_rec, Sigma = diag(sd_rec))
mu_rec
rec_samples <- MASS::mvrnorm(weights[i], mu = c(mu_rec), Sigma = c(diag(sd_rec)))
diag(sd_rec)
sd_rec
rec_samples <- MASS::mvrnorm(weights[i], mu = c(mu_rec), Sigma = diag(c(sd_rec)))
rec_samples
diag(c(sd_rec))
nyrs_vec
weights[i]
weights <- weights * 10
nrows <- 1:sum(weights)
rowid <- rep(1:length(weights), weights)
# List to save samples of SSB, B, and R
recruitment <-
array(NA, dim = c(nspp, length(mod_avg_rel_proj_yrs),  sum(weights)))
biomassSSB <-
array(NA, dim = c(nspp, length(mod_avg_rel_proj_yrs),  sum(weights)))
biomass <-
array(NA, dim = c(nspp, length(mod_avg_rel_proj_yrs),  sum(weights)))
i
# Years
sub_rel_proj_yrs <- (max_styr - Rceattle[[i]]$data_list$styr + 1) : (min_projyr - Rceattle[[i]]$data_list$styr + 1) # Find years of overlap
# Extract Rec, SSB, B
# - R
sd_rec <- array(NA, dim = c(nspp, nyrs[i]))
mu_rec <- array(NA, dim = c(nspp, nyrs[i]))
rec_rows <- which(names(Rceattle[[i]]$sdrep$value) == "R")
sd_rec <- replace(sd_rec, values = Rceattle[[i]]$sdrep$sd[rec_rows])[,sub_rel_proj_yrs] # Remove years not shared across models
mu_rec <- replace(mu_rec, values = Rceattle[[i]]$sdrep$value[rec_rows])[,sub_rel_proj_yrs] # Remove years not shared across models
samples_rec <- MASS::mvrnorm(weights[i], mu = c(mu_rec), Sigma = diag(c(sd_rec)))
# - B
sd_biomass <- array(NA, dim = c(nspp, nyrs[i]))
mu_biomass <- array(NA, dim = c(nspp, nyrs[i]))
biomass_rows <- which(names(Rceattle[[i]]$sdrep$value) == "biomass")
sd_biomass <- replace(sd_biomass, values = Rceattle[[i]]$sdrep$sd[biomass_rows])[,sub_rel_proj_yrs] # Remove years not shared across models
mu_biomass <- replace(mu_biomass, values = Rceattle[[i]]$sdrep$value[biomass_rows])[,sub_rel_proj_yrs] # Remove years not shared across models
samples_biomass <- MASS::mvrnorm(weights[i], mu = c(mu_biomass), Sigma = diag(c(sd_biomass)))
# - SSB
sd_biomassSSB <- array(NA, dim = c(nspp, nyrs[i]))
mu_biomassSSB <- array(NA, dim = c(nspp, nyrs[i]))
ssb_rows <- which(names(Rceattle[[i]]$sdrep$value) == "biomassSSB")
sd_biomassSSB <- replace(sd_biomassSSB, values = Rceattle[[i]]$sdrep$sd[ssb_rows])[,sub_rel_proj_yrs] # Remove years not shared across models
mu_biomassSSB <- replace(mu_biomassSSB, values = Rceattle[[i]]$sdrep$value[ssb_rows])[,sub_rel_proj_yrs] # Remove years not shared across models
samples_biomassSSB <- MASS::mvrnorm(weights[i], mu = c(mu_biomassSSB), Sigma = diag(c(sd_biomassSSB)))
# Extract R, B, and SSB and assign to objects
recruitment[1:nspp, 1:length(mod_avg_rel_proj_yrs), nrows[which(rowid == i)]] <- samples_rec
biomassSSB[1:nspp, 1:length(mod_avg_rel_proj_yrs), nrows[which(rowid == i)]] <- samples_biomass
biomass[1:nspp, 1:length(mod_avg_rel_proj_yrs), nrows[which(rowid == i)]] <- samples_biomassSSB
recruitment[,,1]
recruitment[,1,]
recruitment[1,,]
head(samples_rec)
# Extract R, B, and SSB and assign to objects
recruitment[1:nspp, 1:length(mod_avg_rel_proj_yrs), nrows[which(rowid == i)]] <- c(samples_rec)
recruitment[,,1]
samples_biomassSSB
mu_biomassSSB
Rceattle[[i]]$sdrep$value[ssb_rows]
c(mu_biomassSSB)
samples_biomassSSB
colMeans(samples_biomassSSB)
c(mu_biomassSSB)
nboot
weights
weights <- round(weights * nboot)
nrows <- 1:sum(weights)
rowid <- rep(1:length(weights), weights)
# List to save samples of SSB, B, and R
samples_rec <- list()
samples_biomassSSB <- list()
samples_biomass <- list()
# Loop across models
for(i in 1:length(Rceattle)){
# Years
sub_rel_proj_yrs <- (max_styr - Rceattle[[i]]$data_list$styr + 1) : (min_projyr - Rceattle[[i]]$data_list$styr + 1) # Find years of overlap
# Extract Rec, SSB, B
# - R
sd_rec <- array(NA, dim = c(nspp, nyrs[i]))
mu_rec <- array(NA, dim = c(nspp, nyrs[i]))
rec_rows <- which(names(Rceattle[[i]]$sdrep$value) == "R")
sd_rec <- replace(sd_rec, values = Rceattle[[i]]$sdrep$sd[rec_rows])[,sub_rel_proj_yrs] # Remove years not shared across models
mu_rec <- replace(mu_rec, values = Rceattle[[i]]$sdrep$value[rec_rows])[,sub_rel_proj_yrs] # Remove years not shared across models
samples_rec[[i]] <- MASS::mvrnorm(weights[i], mu = c(mu_rec), Sigma = diag(c(sd_rec)))
# - B
sd_biomass <- array(NA, dim = c(nspp, nyrs[i]))
mu_biomass <- array(NA, dim = c(nspp, nyrs[i]))
biomass_rows <- which(names(Rceattle[[i]]$sdrep$value) == "biomass")
sd_biomass <- replace(sd_biomass, values = Rceattle[[i]]$sdrep$sd[biomass_rows])[,sub_rel_proj_yrs] # Remove years not shared across models
mu_biomass <- replace(mu_biomass, values = Rceattle[[i]]$sdrep$value[biomass_rows])[,sub_rel_proj_yrs] # Remove years not shared across models
samples_biomass[[i]] <- MASS::mvrnorm(weights[i], mu = c(mu_biomass), Sigma = diag(c(sd_biomass)))
# - SSB
sd_biomassSSB <- array(NA, dim = c(nspp, nyrs[i]))
mu_biomassSSB <- array(NA, dim = c(nspp, nyrs[i]))
ssb_rows <- which(names(Rceattle[[i]]$sdrep$value) == "biomassSSB")
sd_biomassSSB <- replace(sd_biomassSSB, values = Rceattle[[i]]$sdrep$sd[ssb_rows])[,sub_rel_proj_yrs] # Remove years not shared across models
mu_biomassSSB <- replace(mu_biomassSSB, values = Rceattle[[i]]$sdrep$value[ssb_rows])[,sub_rel_proj_yrs] # Remove years not shared across models
samples_biomassSSB[[i]] <- MASS::mvrnorm(weights[i], mu = c(mu_biomassSSB), Sigma = diag(c(sd_biomassSSB)))
}
samples_biomassSSB[[i]]
sapply(samples_biomassSSB, dim)
# - Save samples
mod_avg$asymptotic_samples <- list(recruitment = do.call(cbind, samples_rec),
biomassSSB = do.call(cbind, samples_biomassSSB),
biomass = do.call(cbind, samples_biomass))
mod_avg$asymptotic_samples$recruitment
dim(mod_avg$asymptotic_samples)
sapply(samples_rec, dim)
# - Save samples
mod_avg$asymptotic_samples <- list(recruitment = do.call(rbind, samples_rec),
biomassSSB = do.call(rbind, samples_biomassSSB),
biomass = do.call(rbind, samples_biomass))
mod_avg$asymptotic_samples$recruitment
# - Calculate SD
# -- R
rec_rows <- which(names(mod_avg$sdrep$value) == "R")
mod_avg$sdrep$sd[rec_rows] <- sqrt(sapply(mod_avg$asymptotic_samples$recruitment, var))
mod_avg$sdrep$value[rec_rows] <- colMeans(mod_avg$asymptotic_samples$recruitment)
# -- B
biomass_rows <- which(names(mod_avg$sdrep$value) == "biomass")
mod_avg$sdrep$sd[biomass_rows] <- sqrt(sapply(mod_avg$asymptotic_samples$biomass, var))
mod_avg$sdrep$value[biomass_rows] <- colMeans(mod_avg$asymptotic_samples$biomass)
# -- SSB
ssb_rows <- which(names(mod_avg$sdrep$value) == "biomassSSB")
sqrt(sapply(mod_avg$asymptotic_samples$biomassSSB, var))
sapply(mod_avg$asymptotic_samples$biomassSSB, var)
dim(od_avg$asymptotic_samples$biomassSSB)
dim(mod_avg$asymptotic_samples$biomassSSB)
sapply(mod_avg$asymptotic_samples$biomassSSB, 2, var)
mod_avg$sdrep$sd[ssb_rows] <- sqrt(apply(mod_avg$asymptotic_samples$biomassSSB, 2, var))
sqrt(apply(mod_avg$asymptotic_samples$biomassSSB, 2, var))
# - Calculate SD
# -- R
rec_rows <- which(names(mod_avg$sdrep$value) == "R")
mod_avg$sdrep$sd[rec_rows] <- sqrt(apply(mod_avg$asymptotic_samples$recruitment, 2, var))
mod_avg$sdrep$value[rec_rows] <- colMeans(mod_avg$asymptotic_samples$recruitment)
# -- B
biomass_rows <- which(names(mod_avg$sdrep$value) == "biomass")
mod_avg$sdrep$sd[biomass_rows] <- sqrt(apply(mod_avg$asymptotic_samples$biomass, 2, var))
mod_avg$sdrep$value[biomass_rows] <- colMeans(mod_avg$asymptotic_samples$biomass)
# -- SSB
ssb_rows <- which(names(mod_avg$sdrep$value) == "biomassSSB")
mod_avg$sdrep$sd[ssb_rows] <- sqrt(apply(mod_avg$asymptotic_samples$biomassSSB, 2, var))
mod_avg$sdrep$value[ssb_rows] <- colMeans(mod_avg$asymptotic_samples$biomassSSB)
mod_avg$sdrep$sd[ssb_rows]
setwd("~/GitHub/Rceattle")
devtools::document()
devtools::document()
devtools::document()
library(Rceattle)
library(Rceattle)
devtools::document()
library(Rceattle)
devtools::document()
setwd("~/GitHub/Rceattle")
devtools::document()
devtools::document()
library(Rceattle)
