# -- Map out natural mortality parameters
map_list$ln_M1 <- replace(map_list$ln_M1,
values = rep(NA, length(map_list$ln_M1)))
map_list$M1_beta <- replace(map_list$M1_beta,
values = rep(NA, length(map_list$M1_beta)))
map_list$ln_M1_dev <- replace(map_list$ln_M1_dev,
values = rep(NA, length(map_list$ln_M1_dev)))
map_list$M1_dev_ln_sd <- replace(map_list$M1_dev_ln_sd,
values = rep(NA, length(map_list$M1_dev_ln_sd)))
map_list$M1_rho <- replace(map_list$M1_rho,
values = rep(NA, length(map_list$M1_rho)))
# - Random effects
# -- Females
map_list$ln_M1_dev[sp,1, 1:data_list$nages[sp],] <- M1_dev_ind + 1:data_list$nages[sp]
M1_dev_ind = M1_dev_ind + data_list$nages[sp]
# -- Males
map_list$ln_M1_dev[sp,2, 1:data_list$nages[sp],] <- M1_dev_ind + 1:data_list$nages[sp]
M1_dev_ind = M1_dev_ind + data_list$nages[sp]
# - Standard deviation
map_list$M1_dev_ln_sd[sp,1,1] = M1_dev_ln_sd_ind; M1_dev_ln_sd_ind = M1_dev_ln_sd_ind+1 # Females
map_list$M1_dev_ln_sd[sp,2,1] = M1_dev_ln_sd_ind; M1_dev_ln_sd_ind = M1_dev_ln_sd_ind+1 # Males
map_list$M1_dev_ln_sd[sp,,]
map_list$ln_M1_dev[sp, 1, 1:data_list$nages[sp],]
map_list$ln_M1_dev[sp, 2, 1:data_list$nages[sp],]
map_list$ln_M1_dev[sp, 2, ,]
# - Random effects
map_list$ln_M1_dev[sp,1,,1:nyrs_hind] <- M1_dev_ind + 1:nyrs_hind
map_list$ln_M1_dev[sp,2,,] <- map_list$ln_M1_dev[sp,1,,]
map_list$ln_M1_dev[sp, 2, ,]
nyrs_hind
M1_dev_ind = 0
# - Random effects
map_list$ln_M1_dev[sp,1,1:data_list$nages[sp], 1:nyrs_hind] <- rep(M1_dev_ind + 1:nyrs_hind, each = data_list$nages[sp])
map_list$ln_M1_dev[sp,2,,] <- map_list$ln_M1_dev[sp,1,,]
map_list$ln_M1_dev[sp,2,,]
# - Standard deviation
map_list$M1_dev_ln_sd[sp,,2] = M1_dev_ln_sd_ind
# - Random effects
# -- Females
map_list$ln_M1_dev[sp,1, 1:data_list$nages[sp], 1:nyrs_hind] <- rep(M1_dev_ind + 1:nyrs_hind, each = data_list$nages[sp])
M1_dev_ind = M1_dev_ind + data_list$nages[sp]
# -- Males
map_list$ln_M1_dev[sp,2, 1:data_list$nages[sp], 1:nyrs_hind] <- rep(M1_dev_ind + 1:nyrs_hind, each = data_list$nages[sp])
M1_dev_ind = M1_dev_ind + nyrs_hind
# - Standard deviation
map_list$M1_dev_ln_sd[sp,1,2] = M1_dev_ln_sd_ind; M1_dev_ln_sd_ind = M1_dev_ln_sd_ind+1 # Females
map_list$M1_dev_ln_sd[sp,2,2] = M1_dev_ln_sd_ind; M1_dev_ln_sd_ind = M1_dev_ln_sd_ind+1 # Males
map_list$M1_dev_ln_sd
map_list$M1_dev_ln_sd[sp,,]
map_list$ln_M1_dev[sp,2,,]
# -- Map out natural mortality parameters
map_list$ln_M1 <- replace(map_list$ln_M1,
values = rep(NA, length(map_list$ln_M1)))
map_list$M1_beta <- replace(map_list$M1_beta,
values = rep(NA, length(map_list$M1_beta)))
map_list$ln_M1_dev <- replace(map_list$ln_M1_dev,
values = rep(NA, length(map_list$ln_M1_dev)))
map_list$M1_dev_ln_sd <- replace(map_list$M1_dev_ln_sd,
values = rep(NA, length(map_list$M1_dev_ln_sd)))
map_list$M1_rho <- replace(map_list$M1_rho,
values = rep(NA, length(map_list$M1_rho)))
# - Random effects
# -- Females
map_list$ln_M1_dev[sp,1, 1:data_list$nages[sp], 1:nyrs_hind] <- rep(M1_dev_ind + 1:nyrs_hind, each = data_list$nages[sp])
M1_dev_ind = M1_dev_ind + nyrs_hind
# -- Males
map_list$ln_M1_dev[sp,2, 1:data_list$nages[sp], 1:nyrs_hind] <- rep(M1_dev_ind + 1:nyrs_hind, each = data_list$nages[sp])
M1_dev_ind = M1_dev_ind + nyrs_hind
# - Standard deviation
map_list$M1_dev_ln_sd[sp,1,2] = M1_dev_ln_sd_ind; M1_dev_ln_sd_ind = M1_dev_ln_sd_ind+1 # Females
map_list$M1_dev_ln_sd[sp,2,2] = M1_dev_ln_sd_ind; M1_dev_ln_sd_ind = M1_dev_ln_sd_ind+1 # Males
map_list$M1_dev_ln_sd[sp,,]
map_list$ln_M1_dev[sp,2,,]
map_list$ln_M1_dev[sp,1,,]
map_list$M1_dev_ln_sd[sp,,]
# - Standard deviation (shared across sexes)
map_list$M1_dev_ln_sd[sp,1,] = M1_dev_ln_sd_ind + 1:2
map_list$M1_dev_ln_sd[sp,2,] =  map_list$M1_dev_ln_sd[sp,1,]
map_list$M1_dev_ln_sd[sp,,]
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
nages = 10
current_size = 500;
temp = 0;
temp2 = exp(-0.2)
temp1 = 0;
temp3 = 550 - current_size;
temp4 = 1;
for(a in 0:nages) {
div_age = a/nages
temp = temp + temp4*(current_size + div_age * temp3)
temp1 = temp1 + temp4
temp4 = temp4 * temp2
}
temp/temp1;
nages = 10
current_size = 500;
temp = 0;
temp2 = exp(-0.2)
temp1 = 0;
temp3 = 500 - current_size;
temp4 = 1;
for(a in 0:nages) {
div_age = a/nages
temp = temp + temp4*(current_size + div_age * temp3)
temp1 = temp1 + temp4
temp4 = temp4 * temp2
}
temp/temp1;
nages = 10
current_size = 500;
temp = 0;
temp2 = exp(-0.2)
temp1 = 0;
temp3 = 550 - current_size;
temp4 = 1;
for(a in 0:nages) {
div_age = a/nages
temp = temp + temp4*(current_size + div_age * temp3)
temp1 = temp1 + temp4
temp4 = temp4 * temp2
}
temp/temp1;
temp3
a = 1
nages = 10
current_size = 500;
temp = 0;
temp2 = exp(-0.2)
temp1 = 0;
temp3 = 550 - current_size;
temp4 = 1;
nages = 10
current_size = 500;
temp = 0;
temp2 = exp(-0.2)
temp1 = 0;
temp3 = 550 - current_size;
temp4 = 1;
for(a in 0:nages) {
print(paste0("AGE", a))
div_age = a/nages
print(paste0("div_age", div_age))
temp = temp + temp4*(current_size + div_age * temp3)
print(paste0("temp", temp))
temp1 = temp1 + temp4
print(paste0("temp1", temp))
temp4 = temp4 * temp2
print(paste0("temp4", temp))
}
temp/temp1;
nages = 10
current_size = 500;
temp = 0;
temp2 = exp(-0.2)
temp1 = 0;
temp3 = 550 - current_size;
temp4 = 1;
for(a in 0:nages) {
print(paste("AGE", a))
div_age = a/nages
print(paste("div_age", div_age)))
nages = 10
current_size = 500;
temp = 0;
temp2 = exp(-0.2)
temp1 = 0;
temp3 = 550 - current_size;
temp4 = 1;
for(a in 0:nages) {
print(paste("AGE", a))
div_age = a/nages
print(paste("div_age", div_age))
temp = temp + temp4*(current_size + div_age * temp3)
print(paste("temp", round(temp)))
temp1 = temp1 + temp4
print(paste("temp1", round(temp)))
temp4 = temp4 * temp2
print(paste("temp4", round(temp)))
}
temp/temp1;
nages = 10
current_size = 500;
temp = 0;
temp2 = exp(-0.2)
temp1 = 0;
temp3 = 550 - current_size;
temp4 = 1;
for(a in 0:nages) {
print(paste("AGE", a))
div_age = a/nages
print(paste("div_age", div_age))
temp = temp + temp4*(current_size + div_age * temp3)
print(paste("temp", round(temp)))
temp1 = temp1 + temp4
print(paste("temp1", round(temp1)))
temp4 = temp4 * temp2
print(paste("temp4", round(temp4)))
}
temp/temp1;
temp1
temp
temp4
temp1
nages = 10
current_size = 500;
temp = 0;
temp2 = exp(-0.2)
temp1 = 0;
temp3 = 550 - current_size;
temp4 = 1;
for(a in 0:nages) {
print(paste("AGE", a))
div_age = a/nages
print(paste("div_age", div_age))
temp[a+1] = temp[a] + temp4[a]*(current_size + div_age * temp3)
print(paste("temp", round(temp)))
temp[a+1] = temp[a] + temp4[a]
print(paste("temp1", round(temp[a+1])))
temp4[a+1] = temp4[a] * temp2
print(paste("temp4", round(temp4[a])))
}
current_size
temp4
nages = 10
current_size = 500;
temp = 0;
temp2 = exp(-0.2)
temp1 = 0;
temp3 = 550 - current_size;
temp4 = 1;
for(a in 1:nages) {
print(paste("AGE", a))
div_age = a/nages
print(paste("div_age", div_age))
temp[a+1] = temp[a] + temp4[a]*(current_size + div_age * temp3)
print(paste("temp", round(temp)))
temp[a+1] = temp[a] + temp4[a]
print(paste("temp1", round(temp[a+1])))
temp4[a+1] = temp4[a] * temp2
print(paste("temp4", round(temp4[a])))
}
temp/temp1;
nages = 10
current_size = 500;
temp = 0;
temp2 = exp(-0.2)
temp1 = 0;
temp3 = 550 - current_size;
temp4 = 1;
for(a in 0:nages) {
print(paste("AGE", a))
div_age = a/nages
print(paste("div_age", div_age))
temp = temp + temp4*(current_size + div_age * temp3)
print(paste("temp", round(temp)))
temp1 = temp1 + temp4
print(paste("temp1", round(temp1)))
temp4 = temp4 * temp2
print(paste("temp4", round(temp4)))
}
temp/temp1;
nages = 10
current_size = 500;
temp = 0;
temp2 = exp(-0.2)
temp1 = 0;
temp3 = 550 - current_size;
temp4 = 1;
for(a in 1:nages) {
print(paste("AGE", a))
div_age = a/nages
print(paste("div_age", div_age))
temp = temp + temp4*(current_size + div_age * temp3)
print(paste("temp", round(temp)))
temp1 = temp1 + temp4
print(paste("temp1", round(temp1)))
temp4 = temp4 * temp2
print(paste("temp4", round(temp4)))
}
temp/temp1;
1-exp(0.3)
remove.packages("Rceattle")
remove.packages("Rceattle")
# Grant Adams, Kirstin Holsman, Andre Punt - April 2019
# Code to run Bering Sea CEATTLE model in TMB
# Citation:
# Holsman, K. K., Ianelli, J., Aydin, K., Punt, A. E., and Moffitt, E. A. 2015. A comparison of fisheries biological reference points estimated from temperature-specific multi-species and single-species climate-enhanced stock assessment models. Deep-Sea Research Part II: Topical Studies in Oceanography, 134: 360â€“378.
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# Single-species, but estimate M
ss_run_M <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
M1Fun = build_M1(M1_model = 1,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
plot_biomass(ss_run_M, add_ci = TRUE)
# Load old model
load("inst/extdata/CEATTLE_classic_ss.Rdata")
# Load data and set up inits
library(Rceattle)
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$srr_prior_mean <- 9
BS2017SS$initMode  <- 1
inits <- build_params(BS2017SS)
# - Update population dynamics from previous parameters
inits$init_dev <- CEATTLE_classic_SS$estimated_params$init_dev
inits$rec_dev[,1:39] <- CEATTLE_classic_SS$estimated_params$rec_dev
inits$rec_pars[,1] <- CEATTLE_classic_SS$estimated_params$ln_mn_rec
inits$ln_F[1:3, 1:39] <- CEATTLE_classic_SS$estimated_params$F_dev[,1:39] + CEATTLE_classic_SS$estimated_params$ln_mean_F
inits$sel_coff[1:3,1,] <- CEATTLE_classic_SS$estimated_params$fsh_sel_coff
ss_run_old_params <- Rceattle::fit_mod(data_list = BS2017SS,
inits = inits, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 3, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# - Estimate instead
ss_run_new <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# Previous time series
ss_run_old <- ss_run_new
ss_run_old$quantities$R[,1:39] <- CEATTLE_classic_SS$quantities$R[,1:39]
ss_run_old$quantities$biomass[,1:39] <- CEATTLE_classic_SS$quantities$biomass
ss_run_old$quantities$ssb[,1:39] <- CEATTLE_classic_SS$quantities$biomassSSB
# Plot
plot_recruitment(list(ss_run_old_params, ss_run_old), model_names = 1:2)
plot_biomass(list(ss_run_old_params, ss_run_old), model_names = 1:2)
plot_ssb(list(ss_run_old_params, ss_run_old), model_names = 1:2)
plot_index(list(ss_run_old_params, ss_run_old), model_names = 1:2)
plot_recruitment(list(ss_run_new, ss_run_old_params, ss_run_old), model_names = 1:3)
plot_biomass(list(ss_run_new, ss_run_old_params, ss_run_old), model_names = 1:3)
plot_ssb(list(ss_run_new, ss_run_old_params, ss_run_old), model_names = 1:3)
# Load old model
library(Rceattle)
load("inst/extdata/CEATTLE_classic_MS.Rdata")
# Load data and set up inits
data("BS2017SS")
data("BS2017MS")
BS2017MS$srr_prior_mean <- 9
BS2017MS$initMode  <- 1
inits <- build_params(BS2017MS)
# - Update population dynamics from old parameters
inits$init_dev[,1:20] <- CEATTLE_classic_MS$estimated_params$init_dev
inits$rec_dev[,1:39] <- CEATTLE_classic_MS$estimated_params$rec_dev
inits$rec_pars[,1] <- CEATTLE_classic_MS$estimated_params$ln_mn_rec
inits$ln_F[1:3, 1:39] <- CEATTLE_classic_MS$estimated_params$F_dev[,1:39] + CEATTLE_classic_MS$estimated_params$ln_mean_F
# -- Sel
inits$sel_coff[1:3,1,] <- CEATTLE_classic_MS$estimated_params$fsh_sel_coff
inits$sel_inf[1,4:6,1] <- CEATTLE_classic_MS$estimated_params$srv_sel_inf[1,]
inits$ln_sel_slp[1,4:6,1] <- log(CEATTLE_classic_MS$estimated_params$srv_sel_slp[1,])
inits$index_ln_q[4:6] <- CEATTLE_classic_MS$estimated_params$log_srv_q
inits$index_ln_q[7] <- CEATTLE_classic_MS$estimated_params$log_eit_q # Need to scale by max sel because selectivity is rescaled to max = 1 in the CPP
# - Update diet data
BS2017MS_new <- BS2017MS
BS2017MS_new$diet_data <- as.data.frame(BS2017MS_new$diet_data)
for(i in 1:nrow(BS2017MS_new$diet_data)){
BS2017MS_new$diet_data$Stomach_proportion_by_weight[i] <- CEATTLE_classic_MS$data_list$UobsAge[
BS2017MS_new$diet_data$Pred[i], BS2017MS_new$diet_data$Prey[i],
BS2017MS_new$diet_data$Pred_age[i], BS2017MS_new$diet_data$Prey_age[i]
]
}
# - Update foraging data
BS2017MS_new$Pyrs <- as.data.frame(BS2017MS_new$Pyrs)
BS2017MS_new$Pyrs[,4:ncol(BS2017MS_new$Pyrs)] <- rbind(CEATTLE_classic_MS$data_list$Pyrs[-40,,1],
CEATTLE_classic_MS$data_list$Pyrs[-40,,2],
CEATTLE_classic_MS$data_list$Pyrs[-40,,3])
ms_run_old_params <- Rceattle::fit_mod(
data_list = BS2017MS_new,
inits = inits, # Initial parameters from old model
M1Fun = build_M1(M1_model = 0,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 3, # Fix at parameter values
niter = 10, # iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
#  Fit models
ss_run_new <- Rceattle::fit_mod(
data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
ms_run_old$quantities$index_hat <- c(CEATTLE_classic_MS$quantities$srv_bio_hat[1,1:36],
CEATTLE_classic_MS$quantities$srv_bio_hat[2,1:36],
CEATTLE_classic_MS$quantities$srv_bio_hat[3,1:36],
CEATTLE_classic_MS$quantities$eit_hat[1:20])
fsh_bio$Pred <- ms_run_old$quantities$catch_hat
fsh_bio$CatchOld <- NA
fsh_bio$CatchOld[which(fsh_bio$Year < 2018)] <- c(CEATTLE_classic_MS$quantities$tc_biom_hat[1,],
CEATTLE_classic_MS$quantities$tc_biom_hat[2,],
CEATTLE_classic_MS$quantities$tc_biom_hat[3,])
ms_run_old$quantities$catch_hat <- fsh_bio$CatchOld
# Sel
round(ms_run_old_params$quantities$sel[,1,,1], 5)
round(CEATTLE_classic_MS$quantities$fsh_sel, 5)
round(CEATTLE_classic_MS$quantities$srv_sel, 5)
ms_run_old_params$quantities$sel[1:3,1,,1] - CEATTLE_classic_MS$quantities$fsh_sel
ms_run_old_params$quantities$sel[4:6,1,,1] - CEATTLE_classic_MS$quantities$srv_sel
# Plot
plot_recruitment(list(ms_run_old_params, ms_run_old))
plot_biomass(list(ms_run_old_params, ms_run_old))
plot_ssb(list(ms_run_old_params, ms_run_old))
#  Fit models
ss_run_new <- Rceattle::fit_mod(
data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# - Multi-species
ms_run_new <- Rceattle::fit_mod(
data_list = BS2017MS_new,
inits = ss_run_new$estimated_params, # Initial parameters from single species ests
M1Fun = build_M1(M1_model = 0,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 0, # Estimate
niter = 10, # 3 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# Previous time series
ms_run_old <- ms_run_new
ms_run_old$quantities$R[,1:39] <- CEATTLE_classic_MS$quantities$R[,1:39]
ms_run_old$quantities$biomass[,1:39] <- CEATTLE_classic_MS$quantities$biomass
ms_run_old$quantities$ssb[,1:39] <- CEATTLE_classic_MS$quantities$biomassSSB
ms_run_old$quantities$index_hat <- c(CEATTLE_classic_MS$quantities$srv_bio_hat[1,1:36],
CEATTLE_classic_MS$quantities$srv_bio_hat[2,1:36],
CEATTLE_classic_MS$quantities$srv_bio_hat[3,1:36],
CEATTLE_classic_MS$quantities$eit_hat[1:20])
fsh_bio <- ms_run_old$data_list$catch_data
fsh_bio$Pred <- ms_run_old$quantities$catch_hat
fsh_bio$CatchOld <- NA
fsh_bio$CatchOld[which(fsh_bio$Year < 2018)] <- c(CEATTLE_classic_MS$quantities$tc_biom_hat[1,],
CEATTLE_classic_MS$quantities$tc_biom_hat[2,],
CEATTLE_classic_MS$quantities$tc_biom_hat[3,])
ms_run_old$quantities$catch_hat <- fsh_bio$CatchOld
# Sel
round(ms_run_old_params$quantities$sel[,1,,1], 5)
round(CEATTLE_classic_MS$quantities$fsh_sel, 5)
round(CEATTLE_classic_MS$quantities$srv_sel, 5)
ms_run_old_params$quantities$sel[1:3,1,,1] - CEATTLE_classic_MS$quantities$fsh_sel
ms_run_old_params$quantities$sel[4:6,1,,1] - CEATTLE_classic_MS$quantities$srv_sel
# Plot
plot_recruitment(list(ms_run_old_params, ms_run_old))
plot_biomass(list(ms_run_old_params, ms_run_old))
plot_ssb(list(ms_run_old_params, ms_run_old))
plot_index(list(ms_run_old_params, ms_run_old), model_names = c(1,2))
plot_catch(list(ms_run_old_params, ms_run_old))
plot_recruitment(list(ms_run_new, ms_run_old_params, ms_run_old))
plot_biomass(list(ms_run_new, ms_run_old_params, ms_run_old))
plot_ssb(list(ms_run_new, ms_run_old_params, ms_run_old))
ms_run_old_params
plot_catch(ms_run_old_params)
plot_ssb(list(ms_run_new, ms_run_old_params, ms_run_old))
plot_ssb(list(ms_run_new, ms_run_old))
