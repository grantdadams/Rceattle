# Code to run Bering Sea CEATTLE model in TMB
# Citation:
# Holsman, K. K., Ianelli, J., Aydin, K., Punt, A. E., and Moffitt, E. A. 2015. A comparison of fisheries biological reference points estimated from temperature-specific multi-species and single-species climate-enhanced stock assessment models. Deep-Sea Research Part II: Topical Studies in Oceanography, 134: 360–378.
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# Single-species, but estimate M
ss_run_M <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
M1Fun = build_M1(M1_model = 1,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
plot_biomass(ss_run_M, add_ci = TRUE)
# - Multi-species
# For the a multispecies model we from the single species parameters.
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run$estimated_params, # Initial parameters from single species ests
M1Fun = build_M1(M1_model = 1,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 0, # Estimate
niter = 3, # 3 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
plot_biomass(ms_run, add_ci = TRUE)
################################################
# Plotting
################################################
# We can plot all runs
mod_list <- list(ss_run, ss_run_M, ms_run)
mod_names <- c("Single-species", "Single-species estimate M", "Multi-species")
# Plot biomass trajectory
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_depletionSSB(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names, add_ci = TRUE)
# Plot mortality and predation
plot_b_eaten(Rceattle = mod_list, model_names = mod_names) # Biomass eaten as prey
plot_b_eaten_prop(Rceattle = mod_list, model_names = mod_names) # Biomass eaten as prey by each predator
plot_mortality(Rceattle = ms_run, type = 3) # Mortality-at-age time series
inits = ms_run$estimated_params
#####################################################################
# FIX SUITABILITY AND SUM across prey ages (NEW PART)
# Create initial parameter list:
test_data<-BS2017MS
inits = ms_run$estimated_params
map = ms_run$map # gam_a, gam_b, and log_phi are turned off here
ms_run$map$mapList$log_gam_a
# Create a list prey size preference
# Set weight ratio parameters
inits$log_gam_a = c(-6.61, -3.91, -3.46)  # Mean log weight ratio
inits$log_gam_b = c(1.99, 1.69, 1.89)  # Standard deviation of log weight ratio f
test_data$diet_data$Prey_age <- -999 # Set prey age to negative values to sum across ages
a<- test_data$diet_data
head(a)
test_data_sum<- test_data$diet_data %>%
group_by(Pred, Prey, Pred_sex, Prey_sex, Pred_age, Year, Sample_size) %>% # Sum across prey ages
summarise(Stomach_proportion_by_weight = sum(Stomach_proportion_by_weight))
head(test_data_sum)
# Create a list prey size preference
# Set weight ratio parameters
inits$log_gam_a = c(-6.61, -3.91, -3.46)  # Mean log weight ratio
inits$log_gam_b = c(1.99, 1.69, 1.89)  # Standard deviation of log weight ratio f
head(test_data$diet_data)
test_data_sum<- test_data$diet_data %>%
group_by(Pred, Prey, Pred_sex, Prey_sex, Pred_age, Year, Sample_size) %>% # Sum across prey ages
summarise(Stomach_proportion_by_weight = sum(Stomach_proportion_by_weight)) %>%
mutate(Prey_age = -999) %>% # Set prey age to negative values to sum across ages
dplyr::select(Pred, Prey, Pred_sex, Prey_sex, Pred_age, Prey_age, Year, Sample_size)
head(test_data_sum)
test_data_sum<- test_data$diet_data %>%
group_by(Pred, Prey, Pred_sex, Prey_sex, Pred_age, Year, Sample_size) %>% # Sum across prey ages
summarise(Stomach_proportion_by_weight = sum(Stomach_proportion_by_weight)) %>%
mutate(Prey_age = -999) %>% # Set prey age to negative values to sum across ages
dplyr::select(Pred, Prey, Pred_sex, Prey_sex, Pred_age, Prey_age, Year, Sample_size, Stomach_proportion_by_weight)
head(test_data_sum)
test_data$diet_data<- test_data_sum #plug in the new data
# Set vulnerability matrix
inits$log_phi #Currently all set to 0.5 (keep it)
map$mapFactor$log_phi
map$mapList$log_phi # log_phi is currently turned off
inits$log_phi #Currently all set to 0.5 (keep it)
map$mapList$log_phi <- inits$log_phi # If we set this, the log_phi is not gonna be estimated. Should I do this or not?
map$mapFactor$log_phi <- factor(map$mapList$log_phi) #If I do the above, then I should also do this.
map$mapFactor$log_phi
1:length(map$mapList$log_phi)
map$mapList$log_phi[] <- 1:length(map$mapList$log_phi)
map$mapList$log_phi
#####################################################################
# FIX SUITABILITY AND SUM across prey ages (NEW PART)
# Create initial parameter list:
test_data<-BS2017MS
inits = ms_run$estimated_params
map = ms_run$map # gam_a, gam_b, and log_phi are turned off here
ms_run$map$mapList$log_gam_a # gam_a is currently turned off and will not be estimated
# Create a list prey size preference
# Set weight ratio parameters
inits$log_gam_a = c(-6.61, -3.91, -3.46)  # Mean log weight ratio
inits$log_gam_b = c(1.99, 1.69, 1.89)  # Standard deviation of log weight ratio f
head(test_data$diet_data)
test_data_sum<- test_data$diet_data %>%
group_by(Pred, Prey, Pred_sex, Prey_sex, Pred_age, Year, Sample_size) %>% # Sum across prey ages (removed "Prey_age")
summarise(Stomach_proportion_by_weight = sum(Stomach_proportion_by_weight)) %>%
mutate(Prey_age = -999) %>% # Set prey age to negative values to sum across ages
dplyr::select(Pred, Prey, Pred_sex, Prey_sex, Pred_age, Prey_age, Year, Sample_size, Stomach_proportion_by_weight)
head(test_data_sum)
test_data$diet_data<- test_data_sum # Plug in the new data
# Set vulnerability matrix
inits$log_phi #Currently all set to 0.5 (keep it)
map$mapList$log_phi[] <- 1:length(map$mapList$log_phi) # Unique number for each parameter
map$mapFactor$log_phi <- factor(map$mapList$log_phi)
run_ms_LN <- Rceattle::fit_mod(data_list = test_data,
inits = inits, # Initial parameters from single species ests
map = map,
M1Fun = build_M1(M1_model = 1,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 0, # Estimate
niter = 3, # 3 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 4, # empirical suitability
verbose = 1)
run_ms_LN$data_list$Diet_comp_weights
# Grant Adams, Kirstin Holsman, Andre Punt - April 2019
# Code to run Bering Sea CEATTLE model in TMB
# Citation:
# Holsman, K. K., Ianelli, J., Aydin, K., Punt, A. E., and Moffitt, E. A. 2015. A comparison of fisheries biological reference points estimated from temperature-specific multi-species and single-species climate-enhanced stock assessment models. Deep-Sea Research Part II: Topical Studies in Oceanography, 134: 360–378.
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# Single-species, but estimate M
ss_run_M <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
M1Fun = build_M1(M1_model = 1,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
plot_biomass(ss_run_M, add_ci = TRUE)
# - Multi-species
# For the a multispecies model we from the single species parameters.
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run$estimated_params, # Initial parameters from single species ests
M1Fun = build_M1(M1_model = 1,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 0, # Estimate
niter = 3, # 3 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
plot_biomass(ms_run, add_ci = TRUE)
################################################
# Plotting
################################################
# We can plot all runs
mod_list <- list(ss_run, ss_run_M, ms_run)
mod_names <- c("Single-species", "Single-species estimate M", "Multi-species")
# Plot biomass trajectory
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_depletionSSB(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names, add_ci = TRUE)
# Plot mortality and predation
plot_b_eaten(Rceattle = mod_list, model_names = mod_names) # Biomass eaten as prey
plot_b_eaten_prop(Rceattle = mod_list, model_names = mod_names) # Biomass eaten as prey by each predator
plot_mortality(Rceattle = ms_run, type = 3) # Mortality-at-age time series
# Load old model
library(Rceattle)
load("inst/extdata/CEATTLE_classic_MS.Rdata")
# Load data and set up inits
data("BS2017SS")
data("BS2017MS")
BS2017MS$srr_prior_mean <- 9
BS2017MS$initMode  <- 1
# BS2017MS$M1_base[,-c(1:2)] <- CEATTLE_classic_MS$quantities$M1 # + 0.0001 is in the old one
inits <- build_params(BS2017MS)
# - Update population dynamics from old parameters
inits$init_dev[,1:20] <- CEATTLE_classic_MS$estimated_params$init_dev
inits$rec_dev[,1:39] <- CEATTLE_classic_MS$estimated_params$rec_dev
inits$rec_pars[,1] <- CEATTLE_classic_MS$estimated_params$ln_mn_rec
inits$ln_F[1:3, 1:39] <- CEATTLE_classic_MS$estimated_params$F_dev[,1:39] + CEATTLE_classic_MS$estimated_params$ln_mean_F
# -- Sel
inits$sel_coff[1:3,1,] <- CEATTLE_classic_MS$estimated_params$fsh_sel_coff
inits$sel_inf[1,4:6,1] <- CEATTLE_classic_MS$estimated_params$srv_sel_inf[1,]
inits$ln_sel_slp[1,4:6,1] <- log(CEATTLE_classic_MS$estimated_params$srv_sel_slp[1,])
inits$index_ln_q[4:6] <- CEATTLE_classic_MS$estimated_params$log_srv_q
inits$index_ln_q[7] <- CEATTLE_classic_MS$estimated_params$log_eit_q # Need to scale by max sel because selectivity is rescaled to max = 1 in the CPP
# - Update diet data
BS2017MS_new <- BS2017MS
BS2017MS_new$diet_data <- as.data.frame(BS2017MS_new$diet_data)
for(i in 1:nrow(BS2017MS_new$diet_data)){
BS2017MS_new$diet_data$Stomach_proportion_by_weight[i] <- CEATTLE_classic_MS$data_list$UobsAge[
BS2017MS_new$diet_data$Pred[i], BS2017MS_new$diet_data$Prey[i],
BS2017MS_new$diet_data$Pred_age[i], BS2017MS_new$diet_data$Prey_age[i]
]
}
# - Update foraging data
BS2017MS_new$Pyrs <- as.data.frame(BS2017MS_new$Pyrs)
BS2017MS_new$Pyrs[,4:ncol(BS2017MS_new$Pyrs)] <- rbind(CEATTLE_classic_MS$data_list$Pyrs[-40,,1],
CEATTLE_classic_MS$data_list$Pyrs[-40,,2],
CEATTLE_classic_MS$data_list$Pyrs[-40,,3])
ms_run_old_params <- Rceattle::fit_mod(
data_list = BS2017MS_new,
inits = inits, # Initial parameters from old model
M1Fun = build_M1(M1_model = 0,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 3, # Fix at parameter values
niter = 10, # iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
#  Fit models
ss_run_new <- Rceattle::fit_mod(
data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# - Multi-species
ms_run_new <- Rceattle::fit_mod(
data_list = BS2017MS_new,
inits = ss_run_new$estimated_params, # Initial parameters from single species ests
M1Fun = build_M1(M1_model = 0,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 0, # Estimate
niter = 10, # 3 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# Previous time series
ms_run_old <- ms_run_new
ms_run_old$quantities$R[,1:39] <- CEATTLE_classic_MS$quantities$R[,1:39]
ms_run_old$quantities$biomass[,1:39] <- CEATTLE_classic_MS$quantities$biomass
ms_run_old$quantities$ssb[,1:39] <- CEATTLE_classic_MS$quantities$biomassSSB
ms_run_old$quantities$index_hat <- c(CEATTLE_classic_MS$quantities$srv_bio_hat[1,1:36],
CEATTLE_classic_MS$quantities$srv_bio_hat[2,1:36],
CEATTLE_classic_MS$quantities$srv_bio_hat[3,1:36],
CEATTLE_classic_MS$quantities$eit_hat[1:20])
fsh_bio <- ms_run_old$data_list$catch_data
fsh_bio$Pred <- ms_run_old$quantities$catch_hat
fsh_bio$CatchOld <- NA
fsh_bio$CatchOld[which(fsh_bio$Year < 2018)] <- c(CEATTLE_classic_MS$quantities$tc_biom_hat[1,],
CEATTLE_classic_MS$quantities$tc_biom_hat[2,],
CEATTLE_classic_MS$quantities$tc_biom_hat[3,])
ms_run_old$quantities$catch_hat <- fsh_bio$CatchOld
# Sel
round(ms_run_old_params$quantities$sel[,1,,1], 5)
round(CEATTLE_classic_MS$quantities$fsh_sel, 5)
round(CEATTLE_classic_MS$quantities$srv_sel, 5)
ms_run_old_params$quantities$sel[1:3,1,,1] - CEATTLE_classic_MS$quantities$fsh_sel
ms_run_old_params$quantities$sel[4:6,1,,1] - CEATTLE_classic_MS$quantities$srv_sel
# Plot
plot_recruitment(list(ms_run_old_params, ms_run_old))
plot_recruitment(list(ms_run_new, ms_run_old_params, ms_run_old))
plot_biomass(list(ms_run_new, ms_run_old_params, ms_run_old))
plot_ssb(list(ms_run_new, ms_run_old_params, ms_run_old))
plot_recruitment(list(ms_run_new, ms_run_old_params, ms_run_old))
plot_biomass(list(ms_run_new, ms_run_old_params, ms_run_old))
plot_ssb(list(ms_run_new, ms_run_old_params, ms_run_old))
# Code to run Gulf of Alaska CEATTLE model in TMB
# Citation:
# Adams, G. D., Holsman, K. K., Barbeaux, S. J., Dorn, M. W., Ianelli, J. N., Spies, I., ... & Punt, A. E. (2022). An ensemble approach to understand predation mortality for groundfish in the Gulf of Alaska. Fisheries Research, 251, 106303.
library(Rceattle)
library(dplyr)
################################################
# Data
################################################
# Example
# To run the 2018 single species assessment for the Gulf of Alaska, a data file must first be loaded:
data("GOA2018SS") # Single-species data. ?BS2017SS for more information on the data
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
# GOA2018SS$fleet_control$proj_F_prop <- rep(1, nrow(GOA2018SS$fleet_control))
ss_run <- Rceattle::fit_mod(data_list = GOA2018SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
plot_f(ss_run)
remove.packages("Rceattle")
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
################################################
# Estimation ----
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# Single-species, but estimate M
ss_run_M <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
M1Fun = build_M1(M1_model = 1,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# - Multi-species
# For the a multispecies model we from the single species parameters.
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run$estimated_params, # Initial parameters from single species ests
M1Fun = build_M1(M1_model = 1,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 0, # Estimate
niter = 3, # 3 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
#####################################################################
# FIX SUITABILITY AND SUM across prey ages (NEW PART)
# Create initial parameter list:
test_data <- BS2017MS
inits = ms_run$estimated_params
map = ms_run$map # gam_a, gam_b, and log_phi are turned off here
ms_run$map$mapList$log_gam_a
# Create a list prey size preference
# Set weight ratio parameters
inits$log_gam_a = c(-6.61, -3.91, -3.46)  # Mean log weight ratio
inits$log_gam_b = c(1.99, 1.69, 1.89)  # Standard deviation of log weight ratio f
test_data$diet_data$Prey_age <- -999 # Set prey age to negative values to sum across ages
a<- test_data$diet_data
head(a)
test_data_sum<- test_data$diet_data %>%
group_by(Pred, Prey, Pred_sex, Prey_sex, Pred_age, Prey_age, Year, Sample_size) %>%
summarise(Stomach_proportion_by_weight = sum(Stomach_proportion_by_weight))
head(test_data_sum)
test_data$diet_data<- test_data_sum #plug in the new data
# Set vulnerability matrix
inits$log_phi #Currently all set to 0.5 (keep it)
# Do this to estimate vulnerability (log_phi) :
map$mapList$log_phi[] <- 1:length(map$mapList$log_phi) # Unique number for each parameter
map$mapFactor$log_phi <- factor(map$mapList$log_phi)
#map$mapList$log_phi <- inits$log_phi # If we set this, the log_phi is not gonna be estimated. Should I do this or not?
#map$mapFactor$log_phi <- factor(map$mapList$log_phi) #If I do the above, then I should also do this.
#I did both and they gave different results. If we do not set #map$mapList$log_phi <- inits$log_phi , the estimated log_phi = 1.649402, and it shouldn't be above 1, right?
run_ms_LN <- Rceattle::fit_mod(data_list = test_data,
inits = inits, # Initial parameters from single species ests
map = map,
M1Fun = build_M1(M1_model = 1,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 0, # Estimate
niter = 3, # 3 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
loopnum = 5,
suitMode = 4, # empirical suitability
verbose = 1)
run_ms_LN$quantities$jnll_comp
run_ms_LN$data_list$Diet_weights_mcallister # Three values
run_ms_LN$quantities$vulnerability #Now it is 0.31 for all spss
## MODEL RE-Weigthing
# Access the calculated weights
run_ms_LN$data_list$Diet_comp_weights
mcallister_weights <- run_ms_LN$data_list$Diet_weights_mcallister
# Use the calculated weights for re-running
test_data$Diet_comp_weights <- run_ms_LN$data_list$Diet_weights_mcallister
inits$diet_comp_weights<- run_ms_LN$data_list$Diet_weights_mcallister #If I don't reset inits, the model give me the same mcallister weight, so I guess I have to do this so we initiate form previous mcallister weight instead of 1?
# Re-run the model with updated weights
run_ms_LN_rw <- Rceattle::fit_mod(data_list = test_data,
inits = inits, # Initial parameters from multispecies ests
map = map,
M1Fun = build_M1(M1_model = 1,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 0, # Estimate
niter = 3, # 3 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 4, # empirical suitability
verbose = 1)
## MODEL RE-Weigthing 2 ##################################################
# Access the calculated weights
run_ms_LN_rw$data_list$Diet_comp_weights
mcallister_weights <- run_ms_LN_rw$data_list$Diet_weights_mcallister
# Use the calculated weights for re-running
test_data$Diet_comp_weights <- run_ms_LN_rw$data_list$Diet_weights_mcallister #Increase for testing effect
inits$diet_comp_weights<- run_ms_LN_rw$data_list$Diet_weights_mcallister
# Re-run the model with updated weights
run_ms_LN_rw2 <- Rceattle::fit_mod(data_list = test_data,
inits = inits, # Initial parameters from multispecies ests
map = map,
M1Fun = build_M1(M1_model = 1,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 0, # Estimate
niter = 3, # 3 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 4, # empirical suitability
verbose = 1)
# JNLL
run_ms_LN_rw2$quantities$jnll_comp ##Nothing changes
run_ms_LN_rw2$quantities$vulnerability
run_ms_LN_rw2$data_list$Diet_weights_mcallister #nothing changes.
run_ms_LN_rw2$data_list$Diet_comp_weights #same as mcallister
run_ms_LN_rw2$estimated_params$diet_comp_weights #same as mcallister
run_ms_LN_rw$estimated_params$diet_comp_weights #same as mcallister
run_ms_LN$estimated_params$diet_comp_weights #same as mcallister
# Plot
mod_list <- list(ms_run, run_ms_LN, run_ms_LN_rw, run_ms_LN_rw2)
mod_names <- c("Multi-species", "Multi-species_LN", "run_ms_LN_rw", "run_ms_LN_rw2")
plot_biomass(ms_run, add_ci = TRUE)
plot_biomass(run_ms_LN, add_ci = TRUE) # Doesnt work because its not converged
