quantity[is.infinite(quantity)] <- NA # for dynamicB0
## Get confidence intervals
# - Single model
if(!mse){
quantity_upper95 <- quantity + quantity_sd * 1.92
quantity_lower95 <- quantity - quantity_sd * 1.92
quantity_upper50 <- quantity + quantity_sd * 0.674
quantity_lower50 <- quantity - quantity_sd * 0.674
}
# - MSE objects
if(mse){
ptarget <- ptarget[1,]
plimit <- plimit[1,]
# -- Get quantiles and mean across simulations
quantity_upper95 <- apply( quantity[,,1:nmse], c(1,2), function(x) quantile(x, probs = 0.975, na.rm = TRUE) )
quantity_lower95 <- apply( quantity[,,1:nmse], c(1,2), function(x) quantile(x, probs = 0.025, na.rm = TRUE) )
quantity_upper50 <- apply( quantity[,,1:nmse], c(1,2), function(x) quantile(x, probs = 0.75, na.rm = TRUE) )
quantity_lower50 <- apply( quantity[,,1:nmse], c(1,2), function(x) quantile(x, probs = 0.25, na.rm = TRUE) )
# -- Put back in array for indexing below
if(is.null(reference)){
quantity <- array(apply( quantity[,,1:nmse], c(1,2), mean ), dim = c(nspp, nyrs,  1))
quantity_upper95 <- array(quantity_upper95, dim = c(nspp, nyrs,  1))
quantity_lower95 <- array(quantity_lower95, dim = c(nspp, nyrs,  1))
quantity_upper50 <- array(quantity_upper50, dim = c(nspp, nyrs,  1))
quantity_lower50<- array(quantity_lower50, dim = c(nspp, nyrs,  1))
} else {
quantity_upper95 <- array(c(quantity_upper95, quantity[,,nmse+1]), dim = c(nspp, nyrs,  2))
quantity_lower95 <- array(c(quantity_lower95, quantity[,,nmse+1]), dim = c(nspp, nyrs,  2))
quantity_upper50 <- array(c(quantity_upper50, quantity[,,nmse+1]), dim = c(nspp, nyrs,  2))
quantity_lower50<- array(c(quantity_lower50, quantity[,,nmse+1]), dim = c(nspp, nyrs,  2))
quantity <- array(c(apply( quantity[,,1:nmse], c(1,2), mean ), quantity[,,nmse+1]), dim = c(nspp, nyrs,  2))
}
}
# # - Model Average
# for (i in 1:length(Rceattle)) {
#   if(mod_avg[i]){
#     quantity[,,i] <- qlnorm(0.5, meanlog = log_quantity_mu[,,i], sdlog = log_quantity_sd[,,i]) / 1000000
#     quantity_upper95[,,i] <- qlnorm(0.975, meanlog = log_quantity_mu[,,i], sdlog = log_quantity_sd[,,i]) / 1000000
#     quantity_lower95[,,i] <- qlnorm(0.025, meanlog = log_quantity_mu[,,i], sdlog = log_quantity_sd[,,i]) / 1000000
#   }
# }
## Save
if (save) {
for (i in 1:nspp) {
dat <- data.frame(quantity[i, , ])
datup <- data.frame(quantity_upper95[i, , ])
datlow <- data.frame(quantity_lower95[i, , ])
dat_new <- cbind(dat[, 1], datlow[, 1], datup[, 1])
colnames(dat_new) <- rep(model_names[1], 3)
for (j in 2:ncol(dat)) {
dat_new2 <- cbind(dat[, j], datlow[, j], datup[, j])
colnames(dat_new2) <- rep(model_names[j], 3)
dat_new <- cbind(dat_new, dat_new2)
}
write.csv(dat_new, file = paste0(file, "_depletionssb_species_", i, ".csv"))
}
}
## Plot limits
ymax <- c()
ymin <- c()
for (sp in 1:nspp) {
if (add_ci & (estDynamics[sp] == 0)) {
ymax[sp] <- max(c(quantity_upper95[sp, , ], 0), na.rm = T)
ymin[sp] <- min(c(quantity_upper95[sp, , ], 0), na.rm = T)
} else{
ymax[sp] <- max(c(quantity[sp, , ], 0), na.rm = T)
ymin[sp] <- min(c(quantity[sp, , ], 0), na.rm = T)
}
}
ymax <- ymax * top_adj
if (is.null(line_col)) {
if(!mse){
line_col <- rev(oce::oce.colorsViridis(length(Rceattle)))
}
if(mse){
line_col <- 1
}
}
if(!is.null(reference)){
line_col <- c(line_col, 1)
}
# Plot trajectory
loops <- ifelse(is.null(file), 1, 2)
for (i in 1:loops) {
if (i == 2) {
filename <- paste0(file, "_depletionssb_trajectory", ".png")
png(
file = filename ,
width = width,# 169 / 25.4,
height = height,# 150 / 25.4,
units = "in",
res = 300
)
}
# Plot configuration
layout(matrix(1:(length(spp) + 2), nrow = (length(spp) + 2)), heights = c(0.1, rep(1, length(spp)), 0.2))
par(
mar = c(0, 3 , 0 , 1) ,
oma = c(0 , 0 , 0 , 0),
tcl = -0.35,
mgp = c(1.75, 0.5, 0)
)
plot.new()
for (j in 1:length(spp)) {
plot(
y = NA,
x = NA,
ylim = c(ymin[spp[j]], ymax[spp[j]]),
xlim = c(minyr, maxyr + (maxyr - minyr) * right_adj),
xlab = "Year",
ylab = "SSB depletion",
xaxt = c(rep("n", length(spp) - 1), "s")[j]
)
# Horizontal line at end yr
if(incl_proj){
abline(v = Rceattle[[length(Rceattle)]]$data_list$meanyr, lwd  = lwd, col = "grey", lty = 2)
}
# Legends
legend("topleft",
legend = spnames[spp[j]],
bty = "n",
cex = 1)
if (spp[j] == 1) {
if(!is.null(model_names)){
legend(
"topright",
legend = model_names,
lty = rep(1, length(line_col)),
lwd = lwd,
col = line_col,
bty = "n",
cex = mod_cex
)
}
}
# Credible interval
if(estDynamics[spp[j]] == 0){
if (add_ci) {
for (k in 1:dim(quantity)[3]) {
# - 95% CI
polygon(
x = c(Years[[k]], rev(Years[[k]])),
y = c(quantity_upper95[spp[j], 1:length(Years[[k]]), k], rev(quantity_lower95[spp[j], 1:length(Years[[k]]), k])),
col = adjustcolor( line_col[k], alpha.f = alpha/2),
border = NA
)
# - 50% CI
if(mse){
polygon(
x = c(Years[[k]], rev(Years[[k]])),
y = c(quantity_upper50[spp[j], 1:length(Years[[k]]), k], rev(quantity_lower50[spp[j], 1:length(Years[[k]]), k])),
col = adjustcolor( line_col[k], alpha.f = alpha),
border = NA
)
}
}
}
}
# Mean quantity
for (k in 1:dim(quantity)[3]) {
lines(
x = Years[[k]],
y = quantity[spp[j], 1:length(Years[[k]]), k],
lty = ifelse(!is.null(reference) == TRUE & mse == TRUE, c(1,2)[k], 1),
lwd = lwd,
col = line_col[k]
) # Median
# Ptarget and plimit
abline(h= ptarget[spp[j]], lwd = lwd/2, col = "blue")
abline(h= plimit[spp[j]], lwd = lwd/2, col = "red")
}
}
if (i == 2) {
dev.off()
}
}
}
plot_depletionSSB(Rceattle = mod_list, model_names = mod_names)
# We can plot both runs as well:
mod_list <- list(ss_run, ss_run_M, ms_run)
mod_names <- c("SS", "SS-M", "MS")
# Plot biomass trajectory
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names, add_ci = TRUE)
################################################
# Alternative harvest control rules
################################################
# -- Constant F as a percentage of SB0
ss_run_fb0 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 3, # Constant F HCR
DynamicHCR = FALSE, # Use dynamic reference points
FsprTarget = 0.4), # F that achieves 40% SB0
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicfb0 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 3, # Constant F HCR
DynamicHCR = TRUE, # Use dynamic reference points
FsprTarget = 0.4), # F that achieves 40% SB0
msmMode = 0, # Single species mode
verbose = 1)
# -- Constant Fspr
ss_run_Fspr <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 4, # Tier3 HCR
FsprTarget = 0.4 # F40%
),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicFspr <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 4, # Tier3 HCR
DynamicHCR = TRUE, # Use dynamic reference points
FsprTarget = 0.4 # F40%
),
msmMode = 0, # Single species mode
verbose = 1)
# -- NPFMC Tier 3
ss_run_Tier3 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
FsprTarget = 0.4, # F40%
FsprLimit = 0.35, # F35%
Plimit = 0.2, # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicTier3 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
DynamicHCR = TRUE, # Use dynamic reference points
FsprTarget = 0.4, # F40%
FsprLimit = 0.35, # F35%
Plimit = 0.2, # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1)
# -- PFMC Category 1
ss_run_Cat1 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 6, # Cat 1 HCR
FsprLimit = 0.45, # F45%
Ptarget = 0.4, # Target is 40% B0
Plimit = 0.1, # No fishing when SB<SB10
Pstar = 0.45,
Sigma = 0.5),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicCat1 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 6, # Cat 1 HCR
DynamicHCR = TRUE, # Use dynamic reference points
FsprLimit = 0.45, # F45%
Ptarget = 0.4, # Target is 40% SB0
Plimit = 0.1, # No fishing when SB<SB10
Pstar = 0.45,
Sigma = 0.5),
msmMode = 0, # Single species mode
verbose = 1)
# -- SESSF Tier 1
ss_run_Tier1 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 7, # Tier 1 HCR
FsprTarget = 0.48, # F40%
FsprLimit = 0.20, # F20%
Ptarget = 0.35, # Target is 35% SSB0
Plimit = 0.20, # No fishing when B<B20
),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicTier1 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 7, # Tier 1 HCR
DynamicHCR = TRUE,
FsprTarget = 0.48, # F40%
FsprLimit = 0.20, # F20%
Ptarget = 0.35, # Target is 35% SSB0
Plimit = 0.20, # No fishing when B<B20
),
msmMode = 0, # Single species mode
verbose = 1)
# -- Plot
mod_list <- list(ss_run, ss_run_fb0, ss_run_Fspr, ss_run_Tier3, ss_run_Cat1, ss_run_Tier1)
model_names <- c("F=0","F 40% B0", "Fspr 40%", "NPFMC Tier 3", "PFMC Cat 1", "SESSF Tier 1")
plot_biomass(mod_list, model_names = model_names, incl_proj = TRUE, add_ci = TRUE)
plot_biomass(mod_list, model_names = model_names, incl_proj = TRUE)
plot_ssb(mod_list, model_names = model_names, incl_proj = TRUE)
plot_ssb(mod_list, model_names = model_names, incl_proj = TRUE, add_ci = TRUE)
plot_ssb(mod_list, model_names = model_names,  add_ci = TRUE)
ss_run_Tier3$sdrep
plot_recruitment(mod_list, model_names = model_names, incl_proj = TRUE)
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <-rep(1,7)
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Estimate single-species and estimate M
mydata_M <- mydata
mydata_M$est_M1 <- c(1,1,1)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# For the a multispecies model starting from the single species parameters, the following can be specified to load the data:
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$est_M1 <- c(1,1,1) # Estimate residual M
BS2017MS$projyr <- 2060
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# We can plot both runs as well:
mod_list <- list(ss_run, ss_run_M, ms_run)
mod_names <- c("SS", "SS-M", "MS")
# Plot biomass trajectory
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names, add_ci = TRUE)
################################################
# Alternative harvest control rules
################################################
# -- Constant F as a percentage of SB0
ss_run_fb0 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 3, # Constant F HCR
DynamicHCR = FALSE, # Use dynamic reference points
FsprTarget = 0.4), # F that achieves 40% SB0
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicfb0 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 3, # Constant F HCR
DynamicHCR = TRUE, # Use dynamic reference points
FsprTarget = 0.4), # F that achieves 40% SB0
msmMode = 0, # Single species mode
verbose = 1)
# -- Constant Fspr
ss_run_Fspr <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 4, # Tier3 HCR
FsprTarget = 0.4 # F40%
),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicFspr <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 4, # Tier3 HCR
DynamicHCR = TRUE, # Use dynamic reference points
FsprTarget = 0.4 # F40%
),
msmMode = 0, # Single species mode
verbose = 1)
# -- NPFMC Tier 3
ss_run_Tier3 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
FsprTarget = 0.4, # F40%
FsprLimit = 0.35, # F35%
Plimit = 0.2, # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicTier3 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
DynamicHCR = TRUE, # Use dynamic reference points
FsprTarget = 0.4, # F40%
FsprLimit = 0.35, # F35%
Plimit = 0.2, # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1)
# -- PFMC Category 1
ss_run_Cat1 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 6, # Cat 1 HCR
FsprLimit = 0.45, # F45%
Ptarget = 0.4, # Target is 40% B0
Plimit = 0.1, # No fishing when SB<SB10
Pstar = 0.45,
Sigma = 0.5),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicCat1 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 6, # Cat 1 HCR
DynamicHCR = TRUE, # Use dynamic reference points
FsprLimit = 0.45, # F45%
Ptarget = 0.4, # Target is 40% SB0
Plimit = 0.1, # No fishing when SB<SB10
Pstar = 0.45,
Sigma = 0.5),
msmMode = 0, # Single species mode
verbose = 1)
# -- SESSF Tier 1
ss_run_Tier1 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 7, # Tier 1 HCR
FsprTarget = 0.48, # F40%
FsprLimit = 0.20, # F20%
Ptarget = 0.35, # Target is 35% SSB0
Plimit = 0.20, # No fishing when B<B20
),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_dynamicTier1 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 0, # Run projection only
HCR = build_hcr(HCR = 7, # Tier 1 HCR
DynamicHCR = TRUE,
FsprTarget = 0.48, # F40%
FsprLimit = 0.20, # F20%
Ptarget = 0.35, # Target is 35% SSB0
Plimit = 0.20, # No fishing when B<B20
),
msmMode = 0, # Single species mode
verbose = 1)
# -- Plot
mod_list <- list(ss_run, ss_run_fb0, ss_run_Fspr, ss_run_Tier3, ss_run_Cat1, ss_run_Tier1)
model_names <- c("F=0","F 40% B0", "Fspr 40%", "NPFMC Tier 3", "PFMC Cat 1", "SESSF Tier 1")
plot_biomass(mod_list, model_names = model_names, incl_proj = TRUE)
plot_ssb(mod_list, model_names = model_names, incl_proj = TRUE)
plot_recruitment(mod_list, model_names = model_names, incl_proj = TRUE)
plot_ssb(mod_list, model_names = model_names, incl_proj = TRUE, add_ci = TRUE)
plot_recruitment(mod_list, model_names = model_names, incl_proj = TRUE, add_ci = TRUE)
plot_biomass(mod_list, model_names = model_names, incl_proj = TRUE, add_ci = TRUE)
plot_biomass(mod_list, model_names = model_names, incl_proj = TRUE)
plot_ssb(mod_list, model_names = model_names, incl_proj = TRUE)
devtools::document()
library(Rceattle)
# Grant Adams, Kirstin Holsman, Andre Punt - April 2019
# Code to run Bering Sea CEATTLE model in TMB
# Citation:
# Holsman, K. K., Ianelli, J., Aydin, K., Punt, A. E., and Moffitt, E. A. 2015. A comparison of fisheries biological reference points estimated from temperature-specific multi-species and single-species climate-enhanced stock assessment models. Deep-Sea Research Part II: Topical Studies in Oceanography, 134: 360–378.
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
plot_biomass(ss_run, add_ci = TRUE)
