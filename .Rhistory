curve(msvpa_fun(AvgN = x), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2), from = 0, to = 10)
msvpa_fun <- function(wt = 10, u = 0.15, B0 = 5000, AvgN = 1000, AvgNPred = 1, ration = 5, h = 1){
# Step 2 - Get the percent other food in stomachs: (1 - sum(U)) / biomass of other food
of_stomkir <- (1-sum(u)) / Bo
# Stomach proportion: U/Biomass and sum(U/Biomass)
stom_div_bio2 <- u / ( AvgN^h * wt )
suma_suit <- stom_div_bio2
# Step 3 - Suitability: (U/Biomass) / (sum(U/Biomass) + (1 - sum(U)) / biomass of other food)
suit_main <- stom_div_bio2 / (suma_suit + of_stomkir)
suit_other <- 1 - suit_main
# Step 4 - Available food: (sum(suitability * biomass) + biomass of other prey * (1 - sum(suitability))) / nyrs
avail_food = suit_main * AvgN^h * wt  + Bo*(1 - (suit_main))
# Step 5 -  Calculate M2: N * suitability * ration / available food
M2 = AvgNPred * ration * suit_main / avail_food * AvgN^(h-1)
B_eaten = AvgNPred * ration * suit_main / avail_food * AvgN^h
return(B_eaten)
}
avgN = 1:10000
holling1 <- msvpa_fun(AvgN = avgN)
holling2 <- msvpa_fun(AvgN = avgN, h = 2)
curve(msvpa_fun(AvgN = x), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2), from = 0, to = 10)
msvpa_fun <- function(wt = 10, u = 0.15, B0 = 5000, AvgN = 1000, AvgNPred = 1, ration = 5, h = 1){
# Step 2 - Get the percent other food in stomachs: (1 - sum(U)) / biomass of other food
of_stomkir <- (1-sum(u)) / Bo
# Stomach proportion: U/Biomass and sum(U/Biomass)
stom_div_bio2 <- u / ( AvgN^h * wt )
suma_suit <- stom_div_bio2
# Step 3 - Suitability: (U/Biomass) / (sum(U/Biomass) + (1 - sum(U)) / biomass of other food)
suit_main <- stom_div_bio2 / (suma_suit + of_stomkir)
suit_other <- 1 - suit_main
# Step 4 - Available food: (sum(suitability * biomass) + biomass of other prey * (1 - sum(suitability))) / nyrs
avail_food = suit_main * AvgN * wt  + Bo*(1 - suit_main)
# Step 5 -  Calculate M2: N * suitability * ration / available food
B_eaten = suit_main * AvgN^(h) * wt / (suit_main * AvgN * wt  + Bo*(1 - suit_main)) * AvgNPred * ration
# B_eaten = AvgNPred * ration * suit_main / avail_food * AvgN^h
return(B_eaten)
}
curve(msvpa_fun(AvgN = x), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2), from = 0, to = 10)
msvpa_fun <- function(wt = 10, u = 0.15, B0 = 500, AvgN = 1000, AvgNPred = 1, ration = 5, h = 1){
# Step 2 - Get the percent other food in stomachs: (1 - sum(U)) / biomass of other food
of_stomkir <- (1-sum(u)) / Bo
# Stomach proportion: U/Biomass and sum(U/Biomass)
stom_div_bio2 <- u / ( AvgN^h * wt )
suma_suit <- stom_div_bio2
# Step 3 - Suitability: (U/Biomass) / (sum(U/Biomass) + (1 - sum(U)) / biomass of other food)
suit_main <- stom_div_bio2 / (suma_suit + of_stomkir)
suit_other <- 1 - suit_main
# Step 4 - Available food: (sum(suitability * biomass) + biomass of other prey * (1 - sum(suitability))) / nyrs
avail_food = suit_main * AvgN * wt  + Bo*(1 - suit_main)
# Step 5 -  Calculate M2: N * suitability * ration / available food
B_eaten = suit_main * AvgN^(h) * wt / (suit_main * AvgN * wt  + Bo*(1 - suit_main)) * AvgNPred * ration
# B_eaten = AvgNPred * ration * suit_main / avail_food * AvgN^h
return(B_eaten)
}
curve(msvpa_fun(AvgN = x), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2), from = 0, to = 10)
msvpa_fun <- function(wt = 10, u = 0.15, B0 = 50, AvgN = 1000, AvgNPred = 1, ration = 5, h = 1){
# Step 2 - Get the percent other food in stomachs: (1 - sum(U)) / biomass of other food
of_stomkir <- (1-sum(u)) / Bo
# Stomach proportion: U/Biomass and sum(U/Biomass)
stom_div_bio2 <- u / ( AvgN^h * wt )
suma_suit <- stom_div_bio2
# Step 3 - Suitability: (U/Biomass) / (sum(U/Biomass) + (1 - sum(U)) / biomass of other food)
suit_main <- stom_div_bio2 / (suma_suit + of_stomkir)
suit_other <- 1 - suit_main
# Step 4 - Available food: (sum(suitability * biomass) + biomass of other prey * (1 - sum(suitability))) / nyrs
avail_food = suit_main * AvgN * wt  + Bo*(1 - suit_main)
# Step 5 -  Calculate M2: N * suitability * ration / available food
B_eaten = suit_main * AvgN^(h) * wt / (suit_main * AvgN * wt  + Bo*(1 - suit_main)) * AvgNPred * ration
# B_eaten = AvgNPred * ration * suit_main / avail_food * AvgN^h
return(B_eaten)
}
curve(msvpa_fun(AvgN = x), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2), from = 0, to = 10)
msvpa_fun <- function(wt = 10, u = 0.15, B0 = 5, AvgN = 1000, AvgNPred = 1, ration = 5, h = 1){
# Step 2 - Get the percent other food in stomachs: (1 - sum(U)) / biomass of other food
of_stomkir <- (1-sum(u)) / Bo
# Stomach proportion: U/Biomass and sum(U/Biomass)
stom_div_bio2 <- u / ( AvgN^h * wt )
suma_suit <- stom_div_bio2
# Step 3 - Suitability: (U/Biomass) / (sum(U/Biomass) + (1 - sum(U)) / biomass of other food)
suit_main <- stom_div_bio2 / (suma_suit + of_stomkir)
suit_other <- 1 - suit_main
# Step 4 - Available food: (sum(suitability * biomass) + biomass of other prey * (1 - sum(suitability))) / nyrs
avail_food = suit_main * AvgN * wt  + Bo*(1 - suit_main)
# Step 5 -  Calculate M2: N * suitability * ration / available food
B_eaten = suit_main * AvgN^(h) * wt / (suit_main * AvgN * wt  + Bo*(1 - suit_main)) * AvgNPred * ration
# B_eaten = AvgNPred * ration * suit_main / avail_food * AvgN^h
return(B_eaten)
}
curve(msvpa_fun(AvgN = x), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2), from = 0, to = 10)
curve(msvpa_fun(AvgN = x, h = 2), from = 0, to = 100)
msvpa_fun <- function(wt = 10, u = 0.15, B0 = 500, AvgN = 1000, AvgNPred = 1, ration = 5, h = 1){
# Step 2 - Get the percent other food in stomachs: (1 - sum(U)) / biomass of other food
of_stomkir <- (1-sum(u)) / Bo
# Stomach proportion: U/Biomass and sum(U/Biomass)
stom_div_bio2 <- u / ( AvgN^h * wt )
suma_suit <- stom_div_bio2
# Step 3 - Suitability: (U/Biomass) / (sum(U/Biomass) + (1 - sum(U)) / biomass of other food)
suit_main <- stom_div_bio2 / (suma_suit + of_stomkir)
suit_other <- 1 - suit_main
# Step 4 - Available food: (sum(suitability * biomass) + biomass of other prey * (1 - sum(suitability))) / nyrs
avail_food = suit_main * AvgN * wt  + Bo*(1 - suit_main)
# Step 5 -  Calculate M2: N * suitability * ration / available food
B_eaten = suit_main * AvgN^(h) * wt / (suit_main * AvgN * wt  + Bo*(1 - suit_main)) * AvgNPred * ration
# B_eaten = AvgNPred * ration * suit_main / avail_food * AvgN^h
return(B_eaten)
}
curve(msvpa_fun(AvgN = x), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2), from = 0, to = 100)
msvpa_fun <- function(wt = 10, u = 0.15, B0 = 500, AvgN = 1000, AvgNPred = 100, ration = 5, h = 1){
# Step 2 - Get the percent other food in stomachs: (1 - sum(U)) / biomass of other food
of_stomkir <- (1-sum(u)) / Bo
# Stomach proportion: U/Biomass and sum(U/Biomass)
stom_div_bio2 <- u / ( AvgN^h * wt )
suma_suit <- stom_div_bio2
# Step 3 - Suitability: (U/Biomass) / (sum(U/Biomass) + (1 - sum(U)) / biomass of other food)
suit_main <- stom_div_bio2 / (suma_suit + of_stomkir)
suit_other <- 1 - suit_main
# Step 4 - Available food: (sum(suitability * biomass) + biomass of other prey * (1 - sum(suitability))) / nyrs
avail_food = suit_main * AvgN * wt  + Bo*(1 - suit_main)
# Step 5 -  Calculate M2: N * suitability * ration / available food
B_eaten = suit_main * AvgN^(h) * wt / (suit_main * AvgN * wt  + Bo*(1 - suit_main)) * AvgNPred * ration
# B_eaten = AvgNPred * ration * suit_main / avail_food * AvgN^h
return(B_eaten)
}
curve(msvpa_fun(AvgN = x), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2), from = 0, to = 100)
msvpa_fun()
msvpa_fun(h = 2)
msvpa_fun(h = 2, AvgNPred = 5)
msvpa_fun(h = 2, AvgNPred = 15)
msvpa_fun(h = 2, AvgNPred = 16)
curve(msvpa_fun(AvgN = x, h = 2), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2, AvgNPred  =1 ), from = 0, to = 100, add = TRUE)
msvpa_fun <- function(wt = 10, u = 0.15, B0 = 500, AvgN = 1000, AvgNPred = 100, ration = 5, h = 1){
# Step 2 - Get the percent other food in stomachs: (1 - sum(U)) / biomass of other food
of_stomkir <- (1-sum(u)) / Bo
# Stomach proportion: U/Biomass and sum(U/Biomass)
stom_div_bio2 <- u / ( AvgN^h * wt )
suma_suit <- stom_div_bio2
# Step 3 - Suitability: (U/Biomass) / (sum(U/Biomass) + (1 - sum(U)) / biomass of other food)
suit_main <- stom_div_bio2 / (suma_suit + of_stomkir)
suit_other <- 1 - suit_main
# Step 4 - Available food: (sum(suitability * biomass) + biomass of other prey * (1 - sum(suitability))) / nyrs
avail_food = suit_main * AvgN * wt  + Bo*(1 - suit_main)
# Step 5 -  Calculate M2: N * suitability * ration / available food
B_eaten = suit_main * AvgN^(h) * wt / (suit_main * AvgN * wt  + Bo*(1 - suit_main)) * AvgNPred * ration
# B_eaten = AvgNPred * ration * suit_main / avail_food * AvgN^h
return(B_eaten)
}
curve(msvpa_fun(AvgN = x), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2, AvgNPred  = 1 ), from = 0, to = 100, add = TRUE)
msvpa_fun(AvgN = x)
msvpa_fun(h = 2, AvgNPred = 5)
msvpa_fun(h = 2, AvgNPred = 5, AvgN = 1:1000)
msvpa_fun(h = 2, AvgNPred = 5, AvgN = seq(from = 0, to =3, 1000))
msvpa_fun(h = 2, AvgNPred = 5, AvgN = seq(from = 0, to =3, length.out =  1000))
AvgN = seq(from = 0, to =3, length.out =  1000)
Holling2 <- msvpa_fun(h = 2, AvgNPred = 5, AvgN = AvgN)
plot(y = Holling2, x = AvgN)
Holling2 <- msvpa_fun(h = 2, AvgNPred = 10, AvgN = AvgN)
plot(y = Holling2, x = AvgN)
Holling2 <- msvpa_fun(h = 2, AvgNPred = 1, AvgN = AvgN)
plot(y = Holling2, x = AvgN)
msvpa_fun <- function(wt = 10, u = 0.15, B0 = 500, AvgN = 1000, AvgNPred = 100, ration = 5, h = 1){
# Step 2 - Get the percent other food in stomachs: (1 - sum(U)) / biomass of other food
of_stomkir <- (1-sum(u)) / Bo
# Stomach proportion: U/Biomass and sum(U/Biomass)
stom_div_bio2 <- u / ( AvgN^h * wt )
suma_suit <- stom_div_bio2
# Step 3 - Suitability: (U/Biomass) / (sum(U/Biomass) + (1 - sum(U)) / biomass of other food)
suit_main <- stom_div_bio2 / (suma_suit + of_stomkir)
suit_other <- 1 - suit_main
# Step 4 - Available food: (sum(suitability * biomass) + biomass of other prey * (1 - sum(suitability))) / nyrs
avail_food = suit_main * AvgN * wt  + Bo*(1 - suit_main)
# Step 5 -  Calculate M2: N * suitability * ration / available food
B_eaten = suit_main * AvgN^(h) * wt / (suit_main * AvgN^h * wt  + Bo*(1 - suit_main)) * AvgNPred * ration
# B_eaten = AvgNPred * ration * suit_main / avail_food * AvgN^h
return(B_eaten)
}
AvgN = seq(from = 0, to =3, length.out =  1000)
Holling2 <- msvpa_fun(h = 2, AvgNPred = 1, AvgN = AvgN)
plot(y = Holling2, x = AvgN)
msvpa_fun <- function(wt = 10, u = 0.15, B0 = 500, AvgN = 1000, AvgNPred = 100, ration = 5, h = 1){
# Step 2 - Get the percent other food in stomachs: (1 - sum(U)) / biomass of other food
of_stomkir <- (1-sum(u)) / Bo
# Stomach proportion: U/Biomass and sum(U/Biomass)
stom_div_bio2 <- u / ( AvgN * wt )
suma_suit <- stom_div_bio2
# Step 3 - Suitability: (U/Biomass) / (sum(U/Biomass) + (1 - sum(U)) / biomass of other food)
suit_main <- stom_div_bio2 / (suma_suit + of_stomkir)
suit_other <- 1 - suit_main
# Step 4 - Available food: (sum(suitability * biomass) + biomass of other prey * (1 - sum(suitability))) / nyrs
avail_food = suit_main * AvgN * wt  + Bo*(1 - suit_main)
# Step 5 -  Calculate M2: N * suitability * ration / available food
B_eaten = suit_main * AvgN^(h) * wt / (suit_main * AvgN ^* wt  + Bo*(1 - suit_main)) * AvgNPred * ration
# B_eaten = AvgNPred * ration * suit_main / avail_food * AvgN^h
return(B_eaten)
}
curve(msvpa_fun(AvgN = x), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2, AvgNPred  = 1 ), from = 0, to = 100, add = TRUE)
AvgN = seq(from = 0, to =3, length.out =  1000)
Holling2 <- msvpa_fun(h = 2, AvgNPred = 1, AvgN = AvgN)
plot(y = Holling2, x = AvgN)
msvpa_fun <- function(wt = 10, u = 0.15, B0 = 500, AvgN = 1000, AvgNPred = 100, ration = 5, h = 1){
# Step 2 - Get the percent other food in stomachs: (1 - sum(U)) / biomass of other food
of_stomkir <- (1-sum(u)) / Bo
# Stomach proportion: U/Biomass and sum(U/Biomass)
stom_div_bio2 <- u / ( AvgN^h * wt )
suma_suit <- stom_div_bio2
# Step 3 - Suitability: (U/Biomass) / (sum(U/Biomass) + (1 - sum(U)) / biomass of other food)
suit_main <- stom_div_bio2 / (suma_suit + of_stomkir)
suit_other <- 1 - suit_main
# Step 4 - Available food: (sum(suitability * biomass) + biomass of other prey * (1 - sum(suitability))) / nyrs
avail_food = suit_main * AvgN * wt  + Bo*(1 - suit_main)
# Step 5 -  Calculate M2: N * suitability * ration / available food
B_eaten = suit_main * AvgN^(h) * wt / (suit_main * AvgN * wt  + Bo*(1 - suit_main)) * AvgNPred * ration
# B_eaten = AvgNPred * ration * suit_main / avail_food * AvgN^h
return(B_eaten)
}
curve(msvpa_fun(AvgN = x), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2), from = 0, to = 100)
curve(msvpa_fun(AvgN = x, h = 2, AvgNPred  = 1 ), from = 0, to = 100, add = TRUE)
AvgN = seq(from = 0, to =3, length.out =  1000)
Holling2 <- msvpa_fun(h = 2, AvgNPred = 5, AvgN = AvgN)
plot(y = Holling2, x = AvgN)
library(Rceattle)
library(testthat)
library(devtools)
use_package("testthat")
usethis::use_test("name")
data(BS2017SS) # ?BS2017SS for more information on the data
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = 1, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
verbose = 1)
ss_run$quantities$biomassSSB
ss_run$quantities$biomassSSB[,1]
ss_run$quantities$biomassSSB[,10
]
ss_run$quantities$biomassSSB[,10] == c("164.4717", "553.5195", "578.1277")
round(ss_run$quantities$biomassSSB[,10],4) == c("164.4717", "553.5195", "578.1277")
round(ss_run$quantities$biomassSSB[1,10],4) == 164.4717
\library(testthat)
library(testthat)
expect_equal(round(ss_run$quantities$biomassSSB[1,10],4) == 164.4717)
expect_equal(round(ss_run$quantities$biomassSSB[1,10],4), 164.4717)
expect_equal(round(ss_run$quantities$biomassSSB[2,10],4), 553.5195)
expect_equal(round(ss_run$quantities$biomassSSB[3,10],4), 578.1277)
expect_equal(round(ss_run$quantities$biomassSSB[3,10],4), 57.1277)
data(BS2017SS) # ?BS2017SS for more information on the data
ms_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = 1, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 1, # Single species mode
niter = 3,
verbose = 1)
ms_run$quantities$biomassSSB[,10]
ms_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = 2, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 1, # Single species mode
niter = 3,
verbose = 1)
ms_run$quantities$biomassSSB[,10]
ms_run$quantities$biomassSSB[,2]
expect_equal(round(ms_run$quantities$biomassSSB[1,2],4), 84.7607)
expect_equal(round(ms_run$quantities$biomassSSB[2,2],4), 6434.2651)
expect_equal(round(ms_run$quantities$biomassSSB[3,2],4), 11153.5178)
ms_run$quantities$biomassSSB[2,2]
round(ms_run$quantities$biomassSSB[2,2],4)
expect_equal(round(ms_run$quantities$biomassSSB[2,2],4), 6434.265)
expect_equal(round(ms_run$quantities$biomassSSB[2,2],4), 6434.2652)
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = 1, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
verbose = 0)
expect_equal(round(ss_run$quantities$biomassSSB[1,10],4), 164.4717)
expect_equal(round(ss_run$quantities$biomassSSB[2,10],4), 553.5195)
expect_equal(round(ss_run$quantities$biomassSSB[3,10],4), 578.1277)
data(BS2017SS) # ?BS2017SS for more information on the data
ms_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = 1, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 1, # Single species mode
niter = 3,
verbose = 0)
expect_equal(round(ms_run$quantities$biomassSSB[1,2],4), 84.7607)
expect_equal(round(ms_run$quantities$biomassSSB[2,2],4), 6434.2652)
expect_equal(round(ms_run$quantities$biomassSSB[3,2],4), 11153.5178)
devtools::document()
library(Rceattle)
library(Rceattle)
usethis::use_testthat()
library(Rceattle)
library(Rceattle)
usethis::use_package("dplyr")
library(Rceattle)
devtools::document()
devtools::document()
devtools::document()
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <-rep(1,7)
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# The you can plot the model results using using
plot_biomass(Rceattle =  ss_run, incl_proj = T)
plot_recruitment(Rceattle =  ss_run, add_ci = TRUE)
plot_catch(Rceattle =  ss_run, incl_proj = FALSE)
# Estimate M
mydata_M <- mydata
mydata_M$est_M1 <- c(1,1,1)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# For the a multispecies model starting from the single species parameters, the following can be specified to load the data:
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$est_M1 <- c(1,1,1)
BS2017MS$projyr <- 2060
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
debug = 0, # Estimate
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# We can plot both runs as well:
mod_list <- list(ss_run, ms_run)
mod_names <- c("SS", "MS")
# Plot biomass trajectory
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names, add_ci = TRUE)
plot_selectivity(Rceattle = mod_list, model_names = mod_names)
mydata$fleet_control$Selectivity
mydata$fleet_control$Selectivity[1] = 5
ss_run2 <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
ss_run2 <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 2)
mydata$fleet_control
mydata$fleet_control$Selectivity[1] = 5
mydata$fleet_control$Time_varying_sel [1] = 0
mydata$fleet_control$Sel_sd_prior[1] = NA
ss_run2 <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 2)
# The you can plot the model results using using
plot_biomass(Rceattle =  ss_run2, incl_proj = T)
# The you can plot the model results using using
plot_biomass(Rceattle =  ss_run2, incl_proj = T)
# The you can plot the model results using using
plot_biomass(Rceattle =  list(ss_run,ss_run2), incl_proj = F)
NA == NA
NA %in% NA
NA %in% c(NA,0)
devtools::document()
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
devtools::document()
data(BS2017SS) # ?BS2017SS for more information on the data
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = 1, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
verbose = 0)
expect_equal(round(ss_run$quantities$biomassSSB[1,10],4), 164.4717)
library(testthat)
testthat::expect_equal(round(ss_run$quantities$biomassSSB[1,10],4), 164.4717)
testthat::expect_equal(round(ss_run$quantities$biomassSSB[2,10],4), 553.5195)
testthat::expect_equal(round(ss_run$quantities$biomassSSB[3,10],4), 578.1277)
testthat::expect_equal(round(ss_run$quantities$biomassSSB[3,10],4), 1)
data(BS2017SS) # ?BS2017SS for more information on the data
ms_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = 1, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 1, # Single species mode
niter = 3,
verbose = 0)
testthat::expect_equal(round(ms_run$quantities$biomassSSB[1,2],4), 84.7607)
testthat::expect_equal(round(ms_run$quantities$biomassSSB[2,2],4), 6434.2652)
testthat::expect_equal(round(ms_run$quantities$biomassSSB[3,2],4), 11153.5178)
data(BS2017SS) # ?BS2017SS for more information on the data
ms_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
debug = 1, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 1, # Single species mode
niter = 3,
verbose = 0)
testthat::expect_equal(round(ms_run$quantities$biomassSSB[1,2],4), 84.7607)
testthat::expect_equal(round(ms_run$quantities$biomassSSB[2,2],4), 6434.2652)
round(ms_run$quantities$biomassSSB[2,2],4)
round(ms_run$quantities$biomassSSB[3,2],4)
testthat::expect_equal(round(ms_run$quantities$biomassSSB[3,2],4), 11153.5178)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2030
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
mydata$est_M1 <- c(0,0,0)
################################################
# Estimation
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$projyr <- 2100
mydata$fleet_control$proj_F_prop <- c(rep(1,3), rep(0,4))
ss_run2 <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = "ss_run", # Don't save
debug = FALSE, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
load("~/GitHub/Rceattle/ss_run.RData")
plot_biomass(list(ss_run2, ss_run))
plot_biomass(list(ss_run2, mod_objects))
library(Rceattle)
library(Rceattle)
library(Rceattle)
