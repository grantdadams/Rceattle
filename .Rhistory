random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # Empirical suitability
verbose = 1)
model_list <- list(model_1, model_2, model_3, model_4)
model_names <- list("single-spp", "Single-spp M", "Single-spp M - RE", "Multi-spp")
plot_biomass(model_list, model_names = model_names, incl_proj = TRUE, add_ci = TRUE)
plot_recruitment(model_list, model_names = model_names, incl_proj = TRUE, add_ci = TRUE)
plot_ssb(model_list, model_names = model_names, incl_proj = TRUE, add_ci = TRUE)
plot_depletion(model_list, model_names = model_names)
model_4$data_list$HCRorder
model_4$data_list$HCR
devtools::document()
library(Rceattle)
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
model_1 <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Penalized likelihood
phase = TRUE,
verbose = 1)
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
model_1 <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Penalized likelihood
phase = TRUE,
verbose = 1)
model_2 <- Rceattle::fit_mod(data_list = mydata,
inits = model_1$estimated_params, # Start estimation at model 1's MLEs
file = NULL, # Don't save
estimateMode = 0, # Estimate
M1Fun = build_M1(M1_model = 1, # Estimate sex-invariant M
M1_use_prior = FALSE,
M2_use_prior = FALSE),
random_rec = FALSE, # Penalized likelihood
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
model_3 <- Rceattle::fit_mod(data_list = mydata,
inits = model_2$estimated_params, # Start estimation at model 2's MLEs
file = NULL, # Don't save
estimateMode = 0, # Estimate
M1Fun = build_M1(M1_model = 1,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
random_rec = TRUE, # Random recruitment
msmMode = 0, # Single species mode
phase = FALSE,
verbose = 1)
model_4 <- Rceattle::fit_mod(data_list = BS2017MS,
inits = model_2$estimated_params, # Initial parameters from single species estimates
M1Fun = build_M1(M1_model = 1,
updateM1 = TRUE,
M1_use_prior = FALSE,
M2_use_prior = FALSE),
file = NULL, # Don't save
estimateMode = 0, # Estimate
niter = 3, # 3 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # Empirical suitability
verbose = 1)
# Evaluate 1 model
model_1$opt$AIC # AIC
model_1$opt$objective # Negative log-likelihood
model_1$quantities$jnll_comp # Negative log-likelihood components
# Compare AIC across penalized likelihood models
sapply(list(model_1, model_2, model_4), function(x) x$opt$AIC)
model_list <- list(model_1, model_2, model_3, model_4)
model_names <- list("single-spp", "Single-spp M", "Single-spp M - RE", "Multi-spp")
# Biomass
plot_biomass(model_list, model_names = model_names, incl_proj = TRUE, add_ci = TRUE)
# Recruitment
plot_recruitment(model_list, model_names = model_names, incl_proj = TRUE, add_ci = TRUE)
# SSB
plot_ssb(model_list, model_names = model_names, incl_proj = TRUE, add_ci = TRUE)
# Biomass depletion
plot_depletion(model_list, model_names = model_names, incl_proj = FALSE, add_ci = FALSE)
# SSB depletion
plot_depletion(model_list, model_names = model_names, incl_proj = FALSE, add_ci = FALSE)
# Selectivity
plot_selectivity(model_2)
# Plot composition fit
plot_comp(model_2)
# Plot index
plot_index(model_list) # - All models
# Plot catch data
plot_catch(model_list)
names(model_1)
model_1$data_list$fleet_control
library(Rceattle)
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
model_1 <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Penalized likelihood
phase = TRUE,
verbose = 1)
mydata$fleet_control
# Grant Adams, Kirstin Holsman, Andre Punt - April 2019
# Code to run Bering Sea CEATTLE model in TMB
# Citation:
# Holsman, K. K., Ianelli, J., Aydin, K., Punt, A. E., and Moffitt, E. A. 2015. A comparison of fisheries biological reference points estimated from temperature-specific multi-species and single-species climate-enhanced stock assessment models. Deep-Sea Research Part II: Topical Studies in Oceanography, 134: 360–378.
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
library(TMB)
# Grant Adams, Kirstin Holsman, Andre Punt - April 2019
# Code to run Bering Sea CEATTLE model in TMB
# Citation:
# Holsman, K. K., Ianelli, J., Aydin, K., Punt, A. E., and Moffitt, E. A. 2015. A comparison of fisheries biological reference points estimated from temperature-specific multi-species and single-species climate-enhanced stock assessment models. Deep-Sea Research Part II: Topical Studies in Oceanography, 134: 360–378.
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# Grant Adams, Kirstin Holsman, Andre Punt - April 2019
# Code to run Bering Sea CEATTLE model in TMB
# Citation:
# Holsman, K. K., Ianelli, J., Aydin, K., Punt, A. E., and Moffitt, E. A. 2015. A comparison of fisheries biological reference points estimated from temperature-specific multi-species and single-species climate-enhanced stock assessment models. Deep-Sea Research Part II: Topical Studies in Oceanography, 134: 360–378.
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
# Code to run Gulf of Alaska CEATTLE model in TMB
# Citation:
# Adams, G. D., Holsman, K. K., Barbeaux, S. J., Dorn, M. W., Ianelli, J. N., Spies, I., ... & Punt, A. E. (2022). An ensemble approach to understand predation mortality for groundfish in the Gulf of Alaska. Fisheries Research, 251, 106303.
library(Rceattle)
library(dplyr)
################################################
# Data
################################################
# Example
# To run the 2018 single species assessment for the Gulf of Alaska, a data file must first be loaded:
data("GOA2018SS") # Single-species data. ?BS2017SS for more information on the data
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
# GOA2018SS$fleet_control$proj_F_prop <- rep(1, nrow(GOA2018SS$fleet_control))
ss_run <- Rceattle::fit_mod(data_list = GOA2018SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
ss_run$identified
ss_run$identified$BadParams
check <- ss_run$identified$BadParams
View(check)
ss_run$identified$param_list$sel_inf
ss_run$identified$param_list$sel_inf[1,,]
ss_run$identified$param_list$sel_inf[2,,]
ss_run$data_list$fleet_control
ss_run$map$mapList$sel_inf[,8]
ss_run$map$mapList$sel_inf[,8,]
ss_run$map$mapList$ln_sel_slp[,8,]
ss_run$map$mapList$ln_sel_slp[,7,]
map <- build_map(ss_run$data_list, ss_run$estimated_params)
map$mapList$sel_inf[,8,]
map$mapList$sel_inf[8,,]
map$mapList$sel_inf[,,1]
ss_run$data_list$fleet_control[,1:8]
debug = FALSE
random_rec = FALSE
random_sel = FALSE
params <- ss_run$estimated_params
data_list = ss_run$data_list
# functions
'%!in%' <- function(x,y)!('%in%'(x,y))
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# -- Setup
# Get year objects
nyrs_hind <- data_list$endyr - data_list$styr + 1
nyrs_proj <- data_list$projyr - data_list$styr + 1
yrs_proj <- (nyrs_hind + 1):nyrs_proj
yrs_hind <- 1:nyrs_hind
if(nyrs_hind == nyrs_proj){
yrs_proj = NULL
}
# Convert parameters to map object and
# - Set each item in map_list to seperate value
map_list <- sapply(params, function(x) replace(x, values = c(1:length(x))))
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Base population dynamics ----
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# -- 1.1. Map out future fishing mortality and sex ratio variance
map_list$proj_F_prop <- map_list$proj_F_prop * NA
map_list$sex_ratio_ln_sd <- map_list$sex_ratio_ln_sd * NA
# -- 1.2. Map out future recruitment deviations
map_list$rec_dev[, yrs_proj] <- as.numeric(replace(map_list$rec_dev[, yrs_proj],
values = rep(NA, length(map_list$rec_dev[, yrs_proj]))))
# -- Map out first year rec devs if estimating initial abundance as free parameters
if(data_list$initMode == 0){
map_list$rec_dev[, 1] <- NA
}
# -- Map out initial devs if starting at equilibrium with no devs
if(data_list$initMode == 1){
map_list$init_dev[] <- NA
}
# -- Map out initial F if starting at equilibrium
if(data_list$initMode != 3){
map_list$ln_Finit <- rep(NA, data_list$nspp)
}
# -- FSPR mapped out
map_list$ln_Flimit <- rep(NA, data_list$nspp)
map_list$ln_Ftarget <- rep(NA, data_list$nspp)
# -- 1.4. Map out initial population deviations not to be estimated - map out last age and ages not seen
for(sp in 1:data_list$nspp) {
if(data_list$initMode > 1){ # Unfinished or fished equilibrium
if((data_list$nages[sp] - 1) < ncol(map_list$init_dev)) {
map_list$init_dev[sp, (data_list$nages[sp]):ncol(map_list$init_dev)] <- NA
}
}else{ # Free parameters
if((data_list$nages[sp]) < ncol(map_list$init_dev)) {
map_list$init_dev[sp, (data_list$nages[sp]+1):ncol(map_list$init_dev)] <- NA
}
}
}
# -- 1.5. Map out natural mortality
M1_ind = 1 # Generic ind for looping
for(sp in 1:data_list$nspp){
# Dim = nspp, nsex (2), nages
# Turn off all
map_list$ln_M1[sp,,] <- NA
# Turn on
# - M1_model = 1: sex- and age-invariant M1
if(data_list$M1_model[sp] == 1){
map_list$ln_M1[sp,,1:data_list$nages[sp]] <- M1_ind
M1_ind = M1_ind + 1
}
# - M1_model = 2: sex-specific, age-invariant M1
if(data_list$M1_model[sp] == 2){
if(data_list$nsex[sp] == 1){ # One sex population
map_list$ln_M1[sp,,1:data_list$nages[sp]] <- M1_ind
M1_ind = M1_ind + 1
}
if(data_list$nsex[sp] == 2){ # Two sex population
map_list$ln_M1[sp,1,1:data_list$nages[sp]] <- M1_ind # Females
map_list$ln_M1[sp,2,1:data_list$nages[sp]] <- M1_ind + 1 # Males
M1_ind = M1_ind + 2
}
}
# - M1_model = 3: sex-specific, age-specific M1
if(data_list$M1_model[sp] == 3){
if(data_list$nsex[sp] == 1){ # One sex population
map_list$ln_M1[sp,1,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp] - 1) # Females (one-sex though)
map_list$ln_M1[sp,2,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp] - 1) # Males (one-sex though)
M1_ind = M1_ind + data_list$nages[sp]
}
if(data_list$nsex[sp] == 2){ # Two sex population
# Females
map_list$ln_M1[sp,1,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp] - 1)
M1_ind = M1_ind + data_list$nages[sp]
# Males
map_list$ln_M1[sp,2,1:data_list$nages[sp]] <- M1_ind: (M1_ind + data_list$nages[sp] - 1)
M1_ind = M1_ind + data_list$nages[sp]
}
}
}
# -- Selectivity  inds
ind_coff <- 1
ind_dev_coff <- 1
ind_slp <- 1
ind_inf <- 1
ind_inf_re <- 1
ind_slp_re <- 1
# -- Map out parameters
# - non-parametric
map_list$sel_coff <- replace(map_list$sel_coff, values = rep(NA, length(map_list$sel_coff)))
map_list$sel_coff_dev <- replace(map_list$sel_coff_dev, values = rep(NA, length(map_list$sel_coff_dev)))
# - logistic and double logistic
map_list$ln_sel_slp <- replace(map_list$ln_sel_slp, values = rep(NA, length(map_list$ln_sel_slp)))
map_list$sel_inf <- replace(map_list$sel_inf, values = rep(NA, length(map_list$sel_inf)))
map_list$ln_sel_slp_dev <- replace(map_list$ln_sel_slp_dev, values = rep(NA, length(map_list$ln_sel_slp_dev)))
map_list$sel_inf_dev <- replace(map_list$sel_inf_dev, values = rep(NA, length(map_list$sel_inf_dev)))
# - time-varying selectivity variance
map_list$sel_dev_ln_sd <- map_list$sel_dev_ln_sd * NA
# - non-parametric selectivity penalties. Leaving as parameters in case we want to estimate down the line
map_list$sel_curve_pen <- map_list$sel_curve_pen * NA
# -- Turn on parameters
# --- Variance of random effects for selectivity deviates (turn on sigma)
if(random_sel){
for (i in 1:nrow(data_list$fleet_control)) {
flt = data_list$fleet_control$Fleet_code[i]
# - Logisitc, Double Logistic, Descending Logistic, and Hake Non-parametric
if (data_list$fleet_control$Selectivity[i] %in% c(1,3,4,5) & data_list$fleet_control$Time_varying_sel[i] %in% c(1,2,4,5)) {
map_list$sel_dev_ln_sd[flt] <- flt
}
}
}
i = 8
flt = data_list$fleet_control$Fleet_code[i]
flt
# -- Turn off sex-specific parameters if 1 sex model
spp <- data_list$fleet_control$Species[i]
nsex <- data_list$nsex[spp]
data_list$fleet_control$Fleet_type[i]
# * 1) Logitistic ----
# - sel_type = 1
if (data_list$fleet_control$Selectivity[i] == 1) {
# Turn on slp and asymptote for each sex
for(sex in 1:nsex){
map_list$ln_sel_slp[1, flt, sex] <- ind_slp; ind_slp = ind_slp + 1
map_list$sel_inf[1, flt, sex] <- ind_inf; ind_inf = ind_inf + 1
}
# Turn on time-varying parameters
# ** Random walk or deviate
if(data_list$fleet_control$Time_varying_sel[i] %in% c(1,2,4)){
for(sex in 1:nsex){
map_list$ln_sel_slp_dev[1, flt, sex, yrs_hind] <- ind_slp + 1:length(yrs_hind) - 1
map_list$sel_inf_dev[1, flt, sex, yrs_hind] <- ind_inf + 1:length(yrs_hind) - 1
ind_slp <- ind_slp + length(yrs_hind)
ind_inf <- ind_inf + length(yrs_hind)
}
}
# Turn off mean-params for random walk
# - Ascending
if(data_list$fleet_control$Time_varying_sel[i] == 4){
map_list$ln_sel_slp[, flt,] <- NA
map_list$sel_inf[, flt,] <- NA
}
# ** Selectivity blocks
if(data_list$fleet_control$Time_varying_sel[i] == 3){
# If a fishery use the years from the fishery
if(data_list$fleet_control$Fleet_type[i] == 1){
catch_data <- data_list$catch_data[which(data_list$catch_data$Fleet_code == flt),]
Selectivity_block <- catch_data$Selectivity_block
biom_yrs <- catch_data$Year - data_list$styr + 1
Selectivity_block <- Selectivity_block[which(biom_yrs <= nyrs_hind)]
biom_yrs <- biom_yrs[which(biom_yrs <= nyrs_hind)]
}
# if a survey use the survey years
if(data_list$fleet_control$Fleet_type[i] == 2){
index_data <- data_list$index_data[which(data_list$index_data$Fleet_code == flt),]
Selectivity_block <- index_data$Selectivity_block
biom_yrs <- index_data$Year - data_list$styr + 1
Selectivity_block <- Selectivity_block[which(biom_yrs <= nyrs_hind)]
biom_yrs <- biom_yrs[which(biom_yrs <= nyrs_hind)]
}
# Turn on selectivity blocks
for(sex in 1:nsex){
map_list$ln_sel_slp_dev[1, flt, sex, biom_yrs] <- Selectivity_block - 1 + ind_slp
map_list$sel_inf_dev[1, flt, sex, biom_yrs] <- Selectivity_block - 1 + ind_inf
ind_slp <- ind_slp + max(Selectivity_block)
ind_inf <- ind_inf + max(Selectivity_block)
}
}
}
data_list$fleet_control$Selectivity
data_list$fleet_control$Selectivity[i]
# * 2) Non-parametric ----
# - sel_type = 2 (Ianelli et al 20??)
if(data_list$fleet_control$Selectivity[i] == 2){ # Non-parametric at age
# Ages to turn on
# Age_first_selected until (age_first_selected + nselages)
if(is.na(data_list$fleet_control$Age_first_selected[i])){data_list$fleet_control$Age_first_selected[i] = data_list$minage[spp]}
ages_on <- (data_list$fleet_control$Age_first_selected[i] - data_list$minage[spp] + 1):data_list$fleet_control$Nselages[i]
# Turn on parameters for each sex
for(sex in 1:nsex){
map_list$sel_coff[flt, sex, ages_on] <- ind_coff + ages_on; ind_coff = ind_coff + max(ages_on)
# --time-varying deviates
if(data_list$fleet_control$Time_varying_sel[i] == 1){
map_list$sel_coff_dev[flt,sex, ages_on, yrs_hind] <- ind_dev_coff + 1:(length(ages_on) * length(yrs_hind))
ind_dev_coff = ind_dev_coff + (length(ages_on) * length(yrs_hind))
}
}
}
data_list$fleet_control$Selectivity[i] == 3
map_list$ln_sel_slp
sex
nsex
j=1
sex=1
map_list$ln_sel_slp[j, flt, sex] <- ind_slp; ind_slp = ind_slp + 1
map_list$sel_inf[j, flt, sex] <- ind_inf; ind_inf = ind_inf + 1
map_list$ln_sel_slp[j, flt, sex]
map_list$sel_inf[j, flt, sex]
j=2
map_list$ln_sel_slp[j, flt, sex] <- ind_slp; ind_slp = ind_slp + 1
map_list$sel_inf[j, flt, sex] <- ind_inf; ind_inf = ind_inf + 1
map_list$sel_inf[j, flt, sex]
map_list$sel_inf[, flt, sex]
# -- Time varying parameters
# Penalized likelihood or random walk
if(data_list$fleet_control$Time_varying_sel[i] %in% c(1,2,4,5)){
for(j in 1:2){
for(sex in 1:nsex){
map_list$ln_sel_slp_dev[j, flt, sex,yrs_hind] <- ind_slp + 1:length(yrs_hind) - 1
map_list$sel_inf_dev[j, flt, sex,yrs_hind] <- ind_inf + 1:length(yrs_hind) - 1
ind_slp <- ind_slp + length(yrs_hind)
ind_inf <- ind_inf + length(yrs_hind)
}
}
# If only doing the ascending portion
if(data_list$fleet_control$Time_varying_sel[i] %in% c(5)){
map_list$ln_sel_slp_dev[2, flt, ,] <- NA
map_list$sel_inf_dev[2, flt, ,] <- NA
}
}
data_list$fleet_control$Time_varying_sel[i]
plot_selectivity(ss_run)
params$sel_inf[,8,]
# Code to run Gulf of Alaska CEATTLE model in TMB
# Citation:
# Adams, G. D., Holsman, K. K., Barbeaux, S. J., Dorn, M. W., Ianelli, J. N., Spies, I., ... & Punt, A. E. (2022). An ensemble approach to understand predation mortality for groundfish in the Gulf of Alaska. Fisheries Research, 251, 106303.
library(Rceattle)
library(dplyr)
################################################
# Data
################################################
# Example
# To run the 2018 single species assessment for the Gulf of Alaska, a data file must first be loaded:
data("GOA2018SS") # Single-species data. ?BS2017SS for more information on the data
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
# GOA2018SS$fleet_control$proj_F_prop <- rep(1, nrow(GOA2018SS$fleet_control))
ss_run <- Rceattle::fit_mod(data_list = GOA2018SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
ss_run$estimated_params$sel_inf[,8,]
ss_run$identified$param_list$sel_inf
plot_selectivity(ss_run)
