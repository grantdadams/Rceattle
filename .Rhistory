ZAA[y,] <- FAA[y,] + M
# Calculate catch
CAA[y,] <- FAA[y,] / ZAA[y,] * NAA[y,] * (1 - exp(-ZAA[y,]))
# Project survivors
if(y < n_yrs) {
for(a in 1:(n_ages-1)) {
NAA[y+1, a+1] <- NAA[y, a] * exp(-ZAA[y, a])
}
# Plus group
NAA[y+1, n_ages] <- NAA[y+1, n_ages] + NAA[y, n_ages] * exp(-ZAA[y, n_ages])
}
# Calculate annual metrics
Total_Biom[y] <- sum(NAA[y,] * WAA)
SSB[y] <- sum(NAA[y,] * WAA * MatAA) * 0.5
Catch[y] <- sum(CAA[y,] * WAA)
}
# Observation model
ObsCatch <- Catch * rlnorm(n_yrs, 0, sigma_catch)
# Survey observations
SrvIdx <- srv_q * Total_Biom * rlnorm(n_yrs, 0, sigma_srv)
# Age composition data (simplified multinomial)
ObsFishAges <- array(0, dim=c(n_yrs, n_ages))
ObsSrvAges <- array(0, dim=c(n_yrs, n_ages))
for(y in 1:n_yrs) {
# Fishery ages
ObsFishAges[y,] <- rmultinom(1, fish_ISS, CAA[y,])
# Survey ages
ObsSrvAges[y,] <- rmultinom(1, srv_ISS, NAA[y,] * srv_sel)
}
# Return list of true and observed values
return(list(
NAA = NAA,
CAA = CAA,
FAA = FAA,
SSB = SSB,
Total_Biom = Total_Biom,
Catch = Catch,
ObsCatch = ObsCatch,
SrvIdx = SrvIdx,
ObsFishAges = ObsFishAges,
ObsSrvAges = ObsSrvAges,
fish_sel = fish_sel,
srv_sel = srv_sel,
WAA = WAA,
MatAA = MatAA,
M = M,
srv_q = srv_q,
rec_devs = rec_devs,
init_devs = init_devs
))
}
# Set up simulation -------------------------------------------------------------
years <- 1:20
ages <- 1:15
WAA <- 2 / (1 + exp(-0.8 * (ages - 3)))
MatAA <- 1 / (1 + exp(-1 * (ages - 5)))
sigma_R <- 0.3
sigma_Catch <- 0.001
sigma_SrvIdx <- 0.3
Fmort <- c(seq(0.02, 0.3, length.out = 10), seq(0.3, 0.05, length.out = 10))
# First, simulate some data for the model
sim <- sim_pop_model(years = years,
ages = ages,
WAA = WAA,
MatAA = MatAA,
mean_Rec = 50,
sigma_R = sigma_R,
sigma_catch = sigma_Catch,
sigma_srv = sigma_SrvIdx,
fish_ISS = 1e5,
srv_ISS = 1e5,
M = 0.3,
fish_sel = 1 / (1 + exp(-2.5 * (ages - 6))),
srv_sel = 1 / (1 + exp(-2 * (ages - 3))),
Fmort = Fmort,
srv_q = 1)
# Set up Rceattle data -------------------------------------------------------------
library(Rceattle)
data("GOAcod")
simData <- GOAcod
# * Data controls ----
simData$nspp <- 1
simData$styr <- 1
simData$endyr <- 20
simData$projyr <- 30
simData$nsex <- 1
simData$nages <- 15
simData$minage <- 1
simData$nlengths <- 15
simData$pop_wt_index <- 1
simData$ssb_wt_index <- 1
simData$pop_age_transition_index <- 1
# * Fleet control ----
simData$fleet_control <- simData$fleet_control[c(1,3),] # BT and Trawl Fishery are both simple logistic
simData$fleet_control$Fleet_name <- c("Survey", "Fishery")
simData$fleet_control$Fleet_code <- 1:2
simData$fleet_control$Selectivity_index <- 1:2
simData$fleet_control$Weight_index <- 1
# * Index data ----
simData$index_data <- data.frame(Fleet_name = "Survey",
Fleet_code = 1,
Species = 1,
Year = 1:20,
Month = 0,
Selectivity_block = 1,
Q_block = 1,
Observation = sim$SrvIdx,
Log_sd = sigma_SrvIdx)
# * Catch data ----
simData$catch_data <- data.frame(Fleet_name = "Fishery",
Fleet_code = 2,
Species = 1,
Year = 1:20,
Month = 0,
Selectivity_block = 1,
Catch = sim$ObsCatch,
Log_sd = sigma_Catch)
# * Comp data ----
# - Index
tmp <- sim$ObsSrvAges
colnames(tmp) <- paste0("Comp_",1:15)
index_comp <- cbind(data.frame(Fleet_name = "Survey",
Fleet_code = 1,
Species = 1,
Sex = 0,
Age0_Length1 = 0,
Year = 1:20,
Month = 0,
Sample_size = rowSums(tmp)),
tmp
)
# - Fishery
tmp <- sim$ObsFishAges
colnames(tmp) <- paste0("Comp_",1:15)
fishery_comp <- cbind(data.frame(Fleet_name = "Fishery",
Fleet_code = 2,
Species = 1,
Sex = 0,
Age0_Length1 = 0,
Year = 1:20,
Month = 0,
Sample_size = rowSums(tmp)),
tmp
)
simData$comp_data <- rbind(index_comp, fishery_comp)
# * Empirical selectivity ----
simData$emp_sel[] <- NA
# * Fixed numbers ----
simData$NByageFixed[] <- NA
# * Age transition matrix ----
tmp <- as.data.frame(diag(1,15))
colnames(tmp) <- paste0("Length_",1:15)
simData$age_trans_matrix <- cbind(data.frame(Age_transition_name = "Base",
Age_transition_index = 1,
Species = 1,
Sex = 0,
Age = 1:15),
tmp
)
# * Age error ----
tmp <- as.data.frame(diag(1,15))
colnames(tmp) <- paste0("Obs_age",1:15)
simData$age_error <- cbind(data.frame(Species = 1,
True_age = 1:15),
tmp
)
# * Weight-at-age ----
WAA <- as.data.frame(matrix(WAA, ncol = 15))
colnames(WAA) <- paste0("Age",1:15)
simData$wt <- cbind(data.frame(Wt_name = "Base",
Wt_index = 1,
Species = 1,
Sex = 0,
Year = 0),
WAA
)
# * Maturity ----
MatAA <- as.data.frame(matrix(MatAA, ncol = 15))
colnames(MatAA) <- paste0("Age",1:15)
simData$pmature <- cbind(data.frame(Species = 1),
MatAA
)
# * Sex ratio ----
sexratio <- as.data.frame(matrix(0.5, ncol = 15))
colnames(sexratio) <- paste0("Age",1:15)
simData$sex_ratio <- cbind(data.frame(Species = 1),
sexratio
)
# * Mortality ----
mort <- as.data.frame(matrix(0.3, ncol = 15))
colnames(mort) <- paste0("Age",1:15)
simData$M1_base <- cbind(data.frame(Species = 1,
Sex = 0),
mort
)
# * Environmental data ----
simData$env_data <- data.frame(Year = 1:20,
EnvData = 1)
# * Relative foraging rate (days) ----
pyrs <- as.data.frame(matrix(1, nrow = 20, ncol = 15))
colnames(pyrs) <- paste0("Age",1:15)
simData$Pyrs <- cbind(data.frame(Species = 1,
Sex = 0,
Year = 1:20),
pyrs
)
# Fit Rceattle -------------------------------------------------------------
ss_run <- Rceattle::fit_mod(data_list = simData,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
plot(x = sim$SSB, y = ss_run$quantities$ssb[1,1:20]); abline(1,1)
plot(x = sim$Total_Biom, y = ss_run$quantities$biomass[1,1:20]); abline(1,1)
plot(x = sim$NAA[1:20,1], y = ss_run$quantities$R[1,1:20]); abline(1,1)
plot(x = sim$SSB, y = ss_run$quantities$ssb[1,1:20]); abline(1,1)
plot(x = sim$Total_Biom, y = ss_run$quantities$biomass[1,1:20]); abline(1,1)
plot(x = sim$Total_Biom, y = ss_run$quantities$biomass[1,1:20], ylab = "Ceattle biomass", xlab = "Truebiomass"); abline(1,1)
plot(x = sim$Total_Biom, y = ss_run$quantities$biomass[1,1:20], ylab = "Rceattle biomass", xlab = "Truebiomass"); abline(1,1)
plot(x = sim$Total_Biom, y = ss_run$quantities$biomass[1,1:20], ylab = "Rceattle biomass", xlab = "True biomass"); abline(1,1)
?matrix
check <- matrix(1:12, 3, 4, dimnames = list(paste0("Age",1:3), paste0("Length", 1:4)))
check
library(Rceattle)
data("BS2017SS")
data_list <- BS2017SS
# -- 1.0. Population scalar/ sex ratio variance
param_list$ln_pop_scalar = matrix(0, nrow = data_list$nspp, ncol = max(data_list$nages),
dimnames = list(data_list$spnames, paste0("Age",1:max(data_list$nages)))
)
param_list <- list()
nyrs_hind <- data_list$endyr - data_list$styr + 1
nyrs_proj <- data_list$projyr - data_list$styr + 1
param_list$dummy = 0  # Variable to test derived quantities given input parameters; n = [1]
# -- 1.0. Population scalar/ sex ratio variance
param_list$ln_pop_scalar = matrix(0, nrow = data_list$nspp, ncol = max(data_list$nages),
dimnames = list(data_list$spnames, paste0("Age",1:max(data_list$nages)))
)
param_list$ln_pop_scalar
# - Dimensions
param_list <- list()
yrs_hind <- data_list$styr:data_list$endyr
yrs_proj <- data_list$styr:data_list$projyr
nyrs_hind <- length(yrs_hind)
nyrs_proj <- length(yrs_proj)
#---------------------------------------------------------------------
# Step 1 -- Specify parameter names and dimensions used in TMB
#---------------------------------------------------------------------
param_list$dummy = 0  # Variable to test derived quantities given input parameters; n = [1]
# -- 1.0. Population scalar
param_list$ln_pop_scalar = matrix(0, nrow = data_list$nspp, ncol = max(data_list$nages),
dimnames = list(data_list$spnames, paste0("Age",1:max(data_list$nages))))
# -- 1.1. Recruitment parameters
# - Stock recruit parameters
param_list$rec_pars = matrix(9, nrow = data_list$nspp, ncol = 3,
dimnames = list(data_list$spnames, c("R0", "Alpha", "Beta")))  # col 1 = mean rec, col 2 = alpha from srr curve, col 3 = beta from srr curve
param_list$rec_pars[,3] <- log(3) # Starting low here for beta
param_list$rec_pars[,2] <- log(data_list$srr_prior)
data_list$srr_prior
if(!is.null(data_list$srr_prior)){
param_list$rec_pars[,2] <- log(data_list$srr_prior)
}
if(data_list$srr_est_mode == 3){
param_list$rec_pars[,2] <- 3
}
data_list$srr_est_mode
if(!is.null(data_list$srr_prior)){
param_list$rec_pars[,2] <- log(data_list$srr_prior)
if(data_list$srr_est_mode == 3){
param_list$rec_pars[,2] <- 3
}
}
# -- 1.3. Initial age-structure parameters
param_list$init_dev = matrix(0, nrow = data_list$nspp, ncol = max(data_list$nages),
dimnames = list(data_list$spnames, paste0("Age",1:max(data_list$nages))))
for(sp in 1:data_list$nspp){
if(data_list$initMode == 0){ # Estimate as free parameters (fill in ages above max age with -999)
if(data_list$nages[sp] != max(data_list$nages)){
param_list$init_dev[sp,(data_list$nages[sp]+1):max(data_list$nages)] = -999
}
}
if(data_list$initMode > 0){ # Estimate as devs (fill in ages above max age - 1 with -999)
param_list$init_dev[sp,data_list$nages[sp]:max(data_list$nages)] = -999
}
}
# -- 1.3. Initial age-structure parameters
param_list$init_dev = matrix(0, nrow = data_list$nspp, ncol = max(data_list$nages),
dimnames = list(data_list$spnames, paste0("Age",1:max(data_list$nages))))
if(!is.null(data_list$initMode)){
for(sp in 1:data_list$nspp){
if(data_list$initMode == 0){ # Estimate as free parameters (fill in ages above max age with -999)
if(data_list$nages[sp] != max(data_list$nages)){
param_list$init_dev[sp,(data_list$nages[sp]+1):max(data_list$nages)] = -999
}
}
if(data_list$initMode > 0){ # Estimate as devs (fill in ages above max age - 1 with -999)
param_list$init_dev[sp,data_list$nages[sp]:max(data_list$nages)] = -999
}
}
}
# - Rec devs
param_list$rec_dev = matrix(0, nrow = data_list$nspp, ncol = nyrs_proj,
dimnames = list(data_list$spnames, yrs_proj))  # Annual recruitment deviation; n = [nspp, nyrs_hind]
param_list$R_ln_sd = log(as.numeric(data_list$sigma_rec_prior))  # Standard deviation of recruitment deviations; n = [1, nspp]
names(param_list$R_ln_sd) <- data_list$spnames
param_list$R_ln_sd
?array
max_age <- max(data_list$nages, na.rm = T)
# -- 1.4. Residual natural mortality
m1 <- array(0, dim = c(data_list$nspp, 2, max_age),
dimnames = list(data_list$spnames, c("Sex combines/females", "males"), paste0("Age", 1:max_age))) # Set up array
m1
colnames(data_list$env_data)
colnames(data_list$env_data)[-1]
# - Dimensions
param_list <- list()
max_age <- max(data_list$nages, na.rm = T)
max_sex <- max(data_list$nsex, na.rm = T)
yrs_hind <- data_list$styr:data_list$endyr
yrs_proj <- data_list$styr:data_list$projyr
nyrs_hind <- length(yrs_hind)
nyrs_proj <- length(yrs_proj)
#---------------------------------------------------------------------
# 1. Population dynamics parameters
#---------------------------------------------------------------------
param_list$dummy = 0  # Variable to test derived quantities given input parameters; n = [1]
# -- 1.0. Population scalar
param_list$ln_pop_scalar = matrix(0, nrow = data_list$nspp, ncol = max_age,
dimnames = list(data_list$spnames, paste0("Age", 1:max_age)))
# -- 1.1. Recruitment parameters
# - Stock recruit parameters
param_list$rec_pars = matrix(9, nrow = data_list$nspp, ncol = 3,
dimnames = list(data_list$spnames, c("R0", "Alpha", "Beta")))  # col 1 = mean rec, col 2 = alpha from srr curve, col 3 = beta from srr curve
param_list$rec_pars[,3] <- log(3) # Starting low here for beta
param_list$rec_pars[,2] <- 3
if(!is.null(data_list$srr_prior)){
param_list$rec_pars[,2] <- log(data_list$srr_prior)
} else{
print("Warnings: alpha was not set to `srr_prior` from `build_srr`")
}
# - Rec devs
param_list$rec_dev = matrix(0, nrow = data_list$nspp, ncol = nyrs_proj,
dimnames = list(data_list$spnames, yrs_proj))  # Annual recruitment deviation; n = [nspp, nyrs_hind]
param_list$R_ln_sd = log(as.numeric(data_list$sigma_rec_prior))  # Standard deviation of recruitment deviations; n = [1, nspp]
names(param_list$R_ln_sd) <- data_list$spnames
# - Env regression parameters for recruitment
param_list$beta_rec_pars <- matrix(0, nrow = data_list$nspp, ncol = length(data_list$srr_env_indices))
# -- 1.3. Initial age-structure parameters
param_list$init_dev = matrix(0, nrow = data_list$nspp, ncol = max_age,
dimnames = list(data_list$spnames, paste0("Age", 1:max_age)))
if(!is.null(data_list$initMode)){
for(sp in 1:data_list$nspp){
# Fill in ages above max age with -999
if(data_list$nages[sp] != max_age){
param_list$init_dev[sp,(data_list$nages[sp]+1):max_age] = -999
}
# Estimate as devs (fill in ages above max age w/ -999)
if(data_list$initMode > 0){
param_list$init_dev[sp,data_list$nages[sp]] = -999
}
}
}
# -- 1.4. Residual natural mortality
m1 <- array(0, dim = c(data_list$nspp, 2, max_age),
dimnames = list(data_list$spnames, c("Sex combines/females", "males"), paste0("Age", 1:max_age))) # Set up array
# Initialize from inputs
for (i in 1:nrow(data_list$M1_base)) {
sp <- as.numeric(as.character(data_list$M1_base$Species[i]))
sex <- as.numeric(as.character(data_list$M1_base$Sex[i]))
# Fill in M1 array from fixed values for each sex
if(sex == 0){ sex = c(1, 2)} # If sex = combined/both males and females, fill in both dimensions
for(j in 1:length(sex)){
m1[sp, sex[j], 1:max(data_list$nages, na.rm = T)] <- as.numeric(data_list$M1_base[i,(1:max(data_list$nages, na.rm = T)) + 2])
}
}
param_list$ln_M1 <- log(m1)
# param_list$sex_ratio_ln_sd = log(data_list$sex_ratio_sigma)
# -- 1.5. fishing mortality parameters
# - Mean F
#FIXME: get rid of
param_list$ln_mean_F = rep(-0.8, nrow(data_list$fleet_control))  # Log mean fishing mortality; n = [1, nspp]
names(param_list$ln_mean_F) <- data_list$fleet_control$Fleet_name
# Future fishing mortality limit
param_list$ln_Flimit = rep(0, data_list$nspp)
names(param_list$ln_Flimit) <- data_list$spnames
# - Future fishing mortality target
param_list$ln_Ftarget = rep(0, data_list$nspp)
names(param_list$ln_Ftarget) <- data_list$spnames
# - Initial F when population is not at equilibrium
param_list$ln_Finit = rep(-10, data_list$nspp)
names(param_list$ln_Finit) <- data_list$spnames
# - Proportion of future fishing mortality for projections for each fleet
param_list$proj_F_prop = data_list$fleet_control$proj_F_prop
names(param_list$proj_F_prop) <- data_list$fleet_control$Fleet_name
# - Annual fishing mortality deviations
param_list$F_dev = matrix(0, nrow = nrow(data_list$fleet_control), ncol = nyrs_hind,
dimnames = list(data_list$fleet_control$Fleet_name, yrs_hind))
# -- Make ln_mean_F very low if the fleet is turned off or not a fishery
for (i in 1:nrow(data_list$fleet_control)) {
# Turn of F and F dev if not estimating
if (data_list$fleet_control$Fleet_type[i] %in% c(0,2)) {
param_list$ln_mean_F[i] <- -999
}
}
# -- Set Fdev for years with 0 catch to very low number
catch_data <- data_list$catch_data
fsh_ind <- catch_data$Fleet_code[which(catch_data$Catch == 0)]
yr_ind <- catch_data$Year[which(catch_data$Catch == 0)] - data_list$styr + 1
for(i in 1:length(fsh_ind)){
param_list$F_dev[fsh_ind[i], yr_ind[i]] <- -999
}
#---------------------------------------------------------------------
# 2. Observation model parameters
#---------------------------------------------------------------------
# -- 2.1. Index catchability parameters
# - Catchability on log scale
param_list$index_ln_q = log(data_list$fleet_control$Q_prior)
names(param_list$index_ln_q) <- data_list$fleet_control$Fleet_name
# - Regression coefficients for environment-q linkage
param_list$index_q_beta = matrix(0, nrow = nrow(data_list$fleet_control), ncol = ncol(data_list$env_data) - 1,
dimnames = list(data_list$fleet_control$Fleet_name, colnames(data_list$env_data)[-1]))
# - Rho for environment-q linkage (sensu GOA Pollock)
param_list$index_q_rho = rep(0, nrow(data_list$fleet_control))
names(param_list$index_q_rho) <- data_list$fleet_control$Fleet_name
# param_list$index_q_pow = rep(0, nrow(data_list$fleet_control))
# - Annual index catchability deviations
param_list$index_q_dev = matrix(0, nrow = nrow(data_list$fleet_control), ncol = nyrs_hind,
dimnames = list(data_list$fleet_control$Fleet_name, yrs_hind))
# - Log standard deviation prior on Q (maybe should be data...)
param_list$index_q_ln_sd <- log(data_list$fleet_control$Q_sd_prior)
names(param_list$index_q_ln_sd) <- data_list$fleet_control$Fleet_name
# - Log standard deviation for survey selectivity random walk - used for logistic
param_list$index_q_dev_ln_sd <- log(data_list$fleet_control$Time_varying_q_sd_prior)
names(param_list$index_q_dev_ln_sd) <- data_list$fleet_control$Fleet_name
# --- 2.2. Selectivity parameters
n_selectivities <- nrow(data_list$fleet_control)
max_sel_ages <- suppressWarnings(max(1, as.numeric(c(data_list$fleet_control$Nselages)), na.rm = T))
# - Non-parametric selectivity coefficients
param_list$sel_coff =  array(0, dim = c(n_selectivities, 2, max_sel_ages),
dimnames = list(data_list$fleet_control$Fleet_name, c("Sex combines/females", "males"), paste0("Age", 1:max_sel_ages)))
# - Non-parametric selectivity penalties (sensu Ianelli)
param_list$sel_curve_pen = matrix( c(data_list$fleet_control$Time_varying_sel, data_list$fleet_control$Sel_sd_prior), nrow = n_selectivities, ncol = 2)
# - Non-parametric selectivity coef annual deviates
param_list$sel_coff_dev = array(0, dim = c(n_selectivities, 2, max(1, as.numeric(c(data_list$fleet_control$Nselages) ), na.rm = T), nyrs_hind),
dimnames = list(data_list$fleet_control$Fleet_name, c("Sex combines/females", "males"), paste0("Age", 1:max_sel_ages), yrs_hind))
# - Selectivity slope parameters for logistic
param_list$ln_sel_slp = array(0.5, dim = c(2, n_selectivities, 2),
dimnames = list(c("Ascending" , "Descending"), data_list$fleet_control$Fleet_name, c("Sex combines/females", "males")))
# - Selectivity asymptotic parameters for logistic
param_list$sel_inf = array(0, dim = c(2, n_selectivities, 2),
dimnames = list(c("Ascending" , "Descending"), data_list$fleet_control$Fleet_name, c("Sex combines/females", "males")))
param_list$sel_inf[1,,] <- 0
param_list$sel_inf[2,,] <- 10
# - Annual selectivity slope deviation for logistic
param_list$ln_sel_slp_dev = array(0, dim = c(2, n_selectivities, 2, nyrs_hind),
dimnames = list(c("Ascending" , "Descending"), data_list$fleet_control$Fleet_name, c("Sex combines/females", "males"), yrs_hind))
# - Annual selectivity asymptotic deviations for logistic
param_list$sel_inf_dev = array(0, dim = c(2, n_selectivities, 2, nyrs_hind),
dimnames = list(c("Ascending" , "Descending"), data_list$fleet_control$Fleet_name, c("Sex combines/females", "males"), yrs_hind))
# - Log standard deviation for selectivity random walk - used for logistic
param_list$sel_dev_ln_sd <- log(data_list$fleet_control$Sel_sd_prior)
names(param_list$sel_dev_ln_sd) <- data_list$fleet_control$Fleet_name
# -- 2.3. Variance of survey and fishery time series
# - Log standard deviation of survey index time-series
param_list$index_ln_sd = log(data_list$fleet_control$Index_sd_prior)
names(param_list$index_ln_sd) <- data_list$fleet_control$Fleet_name
# - Log standard deviation of fishery catch time-series
param_list$catch_ln_sd = log(data_list$fleet_control$Catch_sd_prior)
names(param_list$catch_ln_sd) <- data_list$fleet_control$Fleet_name
# -- 2.4. Comp weighting
if(!is.null(data_list$fleet_control$Comp_weights)){
param_list$comp_weights = data_list$fleet_control$Comp_weights
}
if(is.null(data_list$fleet_control$Comp_weights)){
param_list$comp_weights = rep(1, nrow(data_list$fleet_control))
}
names(param_list$comp_weights) <- data_list$fleet_control$Fleet_name
# Grant Adams, Kirstin Holsman, Andre Punt - April 2019
# Code to run Bering Sea CEATTLE model in TMB
# Citation:
# Holsman, K. K., Ianelli, J., Aydin, K., Punt, A. E., and Moffitt, E. A. 2015. A comparison of fisheries biological reference points estimated from temperature-specific multi-species and single-species climate-enhanced stock assessment models. Deep-Sea Research Part II: Topical Studies in Oceanography, 134: 360–378.
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
plot_biomass(ss_run)
ss_run$estimated_params$rec_pars
