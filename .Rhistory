max_sel_ages <- suppressWarnings(max(1, as.numeric(c(data_list$fleet_control$Nselages)), na.rm = T))
# - Non-parametric selectivity coefficients
param_list$sel_coff =  array(0, dim = c(n_selectivities, 2, max_sel_ages),
dimnames = list(data_list$fleet_control$Fleet_name, c("Sex combines/females", "males"), paste0("Age", 1:max_sel_ages)))
# - Non-parametric selectivity penalties (sensu Ianelli)
param_list$sel_curve_pen = matrix( c(data_list$fleet_control$Time_varying_sel, data_list$fleet_control$Sel_sd_prior), nrow = n_selectivities, ncol = 2)
# - Non-parametric selectivity coef annual deviates
param_list$sel_coff_dev = array(0, dim = c(n_selectivities, 2, max(1, as.numeric(c(data_list$fleet_control$Nselages) ), na.rm = T), nyrs_hind),
dimnames = list(data_list$fleet_control$Fleet_name, c("Sex combines/females", "males"), paste0("Age", 1:max_sel_ages), yrs_hind))
# - Selectivity slope parameters for logistic
param_list$ln_sel_slp = array(0.5, dim = c(2, n_selectivities, 2),
dimnames = list(c("Ascending" , "Descending"), data_list$fleet_control$Fleet_name, c("Sex combines/females", "males")))
# - Selectivity asymptotic parameters for logistic
param_list$sel_inf = array(0, dim = c(2, n_selectivities, 2),
dimnames = list(c("Ascending" , "Descending"), data_list$fleet_control$Fleet_name, c("Sex combines/females", "males")))
param_list$sel_inf[1,,] <- 0
param_list$sel_inf[2,,] <- 10
# - Annual selectivity slope deviation for logistic
param_list$ln_sel_slp_dev = array(0, dim = c(2, n_selectivities, 2, nyrs_hind),
dimnames = list(c("Ascending" , "Descending"), data_list$fleet_control$Fleet_name, c("Sex combines/females", "males"), yrs_hind))
# - Annual selectivity asymptotic deviations for logistic
param_list$sel_inf_dev = array(0, dim = c(2, n_selectivities, 2, nyrs_hind),
dimnames = list(c("Ascending" , "Descending"), data_list$fleet_control$Fleet_name, c("Sex combines/females", "males"), yrs_hind))
# - Log standard deviation for selectivity random walk - used for logistic
param_list$sel_dev_ln_sd <- log(data_list$fleet_control$Sel_sd_prior)
names(param_list$sel_dev_ln_sd) <- data_list$fleet_control$Fleet_name
# -- 2.3. Variance of survey and fishery time series
# - Log standard deviation of survey index time-series
param_list$index_ln_sd = log(data_list$fleet_control$Index_sd_prior)
names(param_list$index_ln_sd) <- data_list$fleet_control$Fleet_name
# - Log standard deviation of fishery catch time-series
param_list$catch_ln_sd = log(data_list$fleet_control$Catch_sd_prior)
names(param_list$catch_ln_sd) <- data_list$fleet_control$Fleet_name
# -- 2.4. Comp weighting
if(!is.null(data_list$fleet_control$Comp_weights)){
param_list$comp_weights = data_list$fleet_control$Comp_weights
}
if(is.null(data_list$fleet_control$Comp_weights)){
param_list$comp_weights = rep(1, nrow(data_list$fleet_control))
}
names(param_list$comp_weights) <- data_list$fleet_control$Fleet_name
# Grant Adams, Kirstin Holsman, Andre Punt - April 2019
# Code to run Bering Sea CEATTLE model in TMB
# Citation:
# Holsman, K. K., Ianelli, J., Aydin, K., Punt, A. E., and Moffitt, E. A. 2015. A comparison of fisheries biological reference points estimated from temperature-specific multi-species and single-species climate-enhanced stock assessment models. Deep-Sea Research Part II: Topical Studies in Oceanography, 134: 360â€“378.
library(Rceattle)
################################################
# Data
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation
################################################
# - Single-species
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 0, # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = TRUE,
verbose = 1)
plot_biomass(ss_run)
ss_run$estimated_params$rec_pars
library(Rceattle)
data("BS2017SS")
head(BS2017SS$Pyrs)
data_list <- BS2017SS
head(data_list$age_trans_matrix)
data_list$minage
# Age transition matrix and age error ----
if(any(data_list$age_trans_matrix %>%
dplyr::select(-c(Age_transition_name, Age_transition_index, Species, Sex, Age)) %>%
ncol() < data_list$nlengths)){
stop("`age_trans_matrix` data does not span range of lengths")
}
for(sp in 1:data_list$nspp){
if(any(data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age) %in% data_list$minage[sp]:data_list$nages[sp])){
stop(paste("`age_trans_matrix` data does not span range of age for species", sp))
}
}
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
data_list$minage[sp]:data_list$nages[sp]
head(data_list$age_error)
# Age error matrix ----
if(any(data_list$age_error %>%
dplyr::select(-c(Species, True_age)) %>%
ncol() < data_list$nages)){
stop("`age_error` data does not span range of ages")
}
data_list$age_error
class(data_list$age_error)
# Age error matrix ----
if(any(data_list$age_error %>%
as.data.frame() %>%
dplyr::select(-c(Species, True_age)) %>%
ncol() < data_list$nages)){
stop("`age_error` data does not span range of ages")
}
# Age error matrix ----
if(any(data_list$age_error %>%
as.data.frame() %>%
dplyr::select(-c(Species, True_age)) %>%
ncol() < data_list$nages)){
stop("`age_error` observed ages do not span range of ages")
}
for(sp in 1:data_list$nspp){
if(any(data_list$age_error %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age) %in% data_list$minage[sp]:data_list$nages[sp])){
warning(paste("`age_error` data does not span range of true ages for species", sp, "will fill with 0s"))
}
}
for(sp in 1:data_list$nspp){
if(any(data_list$age_error %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age) %in% data_list$minage[sp]:data_list$nages[sp])){
warning(paste("`age_error` data does not span range of true ages for species", sp, "will fill with 0s"))
}
}
data_list$minage[sp]:data_list$nages[sp]
data_list$age_error %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age)
for(sp in 1:data_list$nspp){
if(any(!data_list$age_error %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age) %in% data_list$minage[sp]:data_list$nages[sp])){
warning(paste("`age_error` data does not span range of true ages for species", sp, "will fill with 0s"))
}
}
for(sp in 1:data_list$nspp){
if(any(!data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age) %in% data_list$minage[sp]:data_list$nages[sp])){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
sp = 1
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
data_list$minage[sp]:data_list$nages[sp]
for(sp in 1:data_list$nspp){
if(any(!data_list$minage[sp]:data_list$nages[sp] %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
for(sp in 1:data_list$nspp){
if(any(!data_list$minage[sp]:data_list$nages[sp] %>%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
data_list$minage[sp]:data_list$nages[sp]
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
for(sp in 1:data_list$nspp){
if(any(!data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
!data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
if(any(!(data_list$minage[sp]:data_list$nages[sp]) %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
if(any((data_list$minage[sp]:data_list$nages[sp]) %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
data_list$minage[sp]:data_list$nages[sp]
for(sp in 1:data_list$nspp){
if(!all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))
data_list$minage[sp]:data_list$nages[sp]
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
if(!all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age) %>%
as.numeric())){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
data_list$minage[sp]:data_list$nages[sp]
if(!all(as.numeric(data_list$minage[sp]:data_list$nages[sp]) %in%
data_list$age_trans_matrix %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age) %>%
as.numeric())){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix
if(!all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
for(sp in 1:data_list$nspp){
if(!all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
data_list$age_trans_matrix %>%
as.data.frame()
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp)
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))
for(sp in 1:data_list$nspp){
if(!all(data_list$minage[sp]:data_list$nages[sp] %in%
data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age))){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
ages <- data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
for(sp in 1:data_list$nspp){
ages <- data_list$age_trans_matrix %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(Age)
if(!all(data_list$minage[sp]:data_list$nages[sp] %in% ages)){
warning(paste("`age_trans_matrix` data does not span range of age for species", sp, "will fill with 0s"))
}
}
for(sp in 1:data_list$nspp){
ages <- data_list$age_error %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age)
if(!all(data_list$minage[sp]:data_list$nages[sp] %in% ages)){
warning(paste("`age_error` data does not span range of true ages for species", sp, "will fill with 0s"))
}
}
for(sp in 1:data_list$nspp){
ages_tmp <- data_list$age_error %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age)
if(!all(data_list$minage[sp]:data_list$nages[sp] %in% ages_tmp)){
warning(paste("`age_error` data does not span range of true ages for species", sp, "will fill with 0s"))
}
}
ages_tmp <- data_list$age_error %>%
as.data.frame() %>%
dplyr::filter(Species == sp) %>%
dplyr::pull(True_age)
ages_tmp
data_list$minage[sp]:data_list$nages[sp]
remove.packages("Rceattle")
data(BS2017SS)
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
phase = TRUE,
verbose = 1)
map <- ss_run$map
inits <- ss_run$estimated_params
# Set parameter to specific value
inits$sel_inf[1,1,1] = 10 # Dims = [(1 = ascending, 2 = descending), fleet, sex]
# Turn parameter off by setting map to NA
# - Map has two objects, the "mapList" which is the map as a list to retain the parameter objects dimensions and the "mapFactor" which is the list objects converted to a factor for input into TMB
map$mapList$sel_inf[1,1,1] = NA # Dims = [(1 = ascending, 2 = descending), fleet, sex]
map$mapFactor$sel_inf <- as.factor(map$mapList$sel_inf) # Convert list to factor
# Rerun, but fix sel_inf to 10 for fleet 1
ss_run2 <- Rceattle::fit_mod(data_list = ss_run$data_list,
inits = inits,
map = map,
phase = TRUE,
verbose = 1)
plot_selectivity(ss_run)
plot_selectivity(ss_run, species = 1)
plot_selectivity(ss_run2)
ss_run$quantities$sel[1,1,,1]
ss_run$quantities$sel[1,1,,1] # Dim = [fleet, sex, age, year]
ss_run2$quantities$sel[1,1,,1]
ss_run$data_list$fleet_control
data(BS2017SS)
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
phase = TRUE,
verbose = 1)
map <- ss_run$map
inits <- ss_run$estimated_params
# Set parameter to specific value
inits$sel_inf[1,4,1] = 10 # Dims = [(1 = ascending, 2 = descending), fleet, sex]
# Turn parameter off by setting map to NA
# - Map has two objects, the "mapList" which is the map as a list to retain the parameter objects dimensions and the "mapFactor" which is the list objects converted to a factor for input into TMB
map$mapList$sel_inf[1,4,1] = NA # Dims = [(1 = ascending, 2 = descending), fleet, sex]
map$mapFactor$sel_inf <- as.factor(map$mapList$sel_inf) # Convert list to factor
# Rerun, but fix sel_inf to 10 for fleet 1
ss_run2 <- Rceattle::fit_mod(data_list = ss_run$data_list,
inits = inits,
map = map,
phase = TRUE,
verbose = 1)
ss_run$quantities$sel[4,1,,1] # Dim = [fleet, sex, age, year]
ss_run2$quantities$sel[4,1,,1]
library(Rceattle)
data("GOApollock")                              # 2018 Pollock model
mymodel <- Rceattle::fit_mod(data_list = GOApollock,
inits = NULL,       # Initial parameters = 0
file = NULL,        # Don't save
estimateMode = 0,   # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0,        # Single species mode
phase = TRUE,
verbose = 1)
data("BS2017SS")
BS2017SS$fleet_control$proj_F_prop <- 1
mymodel <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL,       # Initial parameters = 0
file = NULL,        # Don't save
estimateMode = 0,   # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0,        # Single species mode
phase = TRUE,
verbose = 1)
data("BS2017SS")
BS2017SS$fleet_control$proj_F_prop <- 1
mymodel <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL,       # Initial parameters = 0
file = NULL,        # Don't save
estimateMode = 0,   # Estimate
random_rec = FALSE, # No random recruitment
msmMode = 0,        # Single species mode
phase = TRUE,
verbose = 1)
data_list <- BS2017SS
Max_age = data_list$diet_data %>%
dplyr::group_by(Prey) %>%
dplyr::summarise(Max_age = max(Pred_age)) %>%
dplyr::arrange(Prey)
Max_age
data_list$nages
Max_age = data_list$diet_data %>%
dplyr::group_by(Prey) %>%
dplyr::summarise(Max_age = max(Prey_age)) %>%
dplyr::arrange(Prey)
if(any(Max_age$Max_age > data_list$nages)){
stop("Prey ages in 'diet_data' > 'nages'")
}
library(gmRi)
spr_fun <- function(F){
ages = 1:10
wt = 1:10
sel = 1/(1+exp(-1*ages + 2))
mat = 1/(1+exp(-1*ages + 6))
M1 <- -0.2 * ages
spr0 = sum( exp(M1) * wt * mat * 0.5)
sprF = sum( exp(M1 - sel*F) * wt * mat * 0.5)
return(sprF/spr0)
}
F30 = uniroot(function(x) spr_fun(x) - 0.30, c(0,10))$root
F35 = uniroot(function(x) spr_fun(x) - 0.35, c(0,10))$root
F40 = uniroot(function(x) spr_fun(x) - 0.4, c(0,10))$root
F48 = uniroot(function(x) spr_fun(x) - 0.48, c(0,10))$root
F20 = uniroot(function(x) spr_fun(x) - 0.2, c(0,10))$root
F45 = uniroot(function(x) spr_fun(x) - 0.45, c(0,10))$root
tier3hcr_fun <- function(Pcur = 0.5, Ptarget = 0.4, Plimit = 0, Alpha = 0.05, Ftarget = F40, Flimit = F35){
if(Pcur > Ptarget){
Ftarget = Ftarget
Flimit = Flimit
}
if(Alpha< Pcur/Ptarget & Pcur/Ptarget <= 1){
Flimit = Flimit * (Pcur/Ptarget - Alpha)/(1-Alpha)
Ftarget = Ftarget * (Pcur/Ptarget - Alpha)/(1-Alpha)
}
if(Alpha>=Pcur/Ptarget ){
Flimit = 0
Ftarget = 0
}
if(Pcur < Plimit ){
Flimit = 0
Ftarget = 0
}
return(list(Flimit = Flimit, Ftarget = Ftarget))
}
sessfcat1hcr_fun <- function(Pcur = 0.5, Ptarget = 0.35, Plimit = 0.2, Ftarget = F48, Flimit = F20){
if(Pcur > Ptarget){
Ftarget = Ftarget
}
if(Pcur < Ptarget & Pcur> Plimit){
Ftarget = Ftarget * (Pcur/Plimit - 1)
}
if(Pcur < Plimit ){
Ftarget = 0
}
return(list(Flimit = Flimit, Ftarget = Ftarget))
}
pfmccat1hcr_fun <- function(Pcur = 0.5, Ptarget = 0.40, Plimit = 0.1, Flimit = F45, sigma = 0.5, Pstar = 0.45){
if(Pcur > Ptarget){
Ftarget = qnorm(Pstar, Flimit, sigma)
}
if(Pcur < Ptarget & Pcur> Plimit){
Ftarget = qnorm(Pstar, Flimit, sigma) * Ptarget * (Pcur - Plimit)/((Ptarget - Plimit)*Pcur)
}
if(Pcur < Plimit ){
Ftarget = 0
}
return(list(Flimit = Flimit, Ftarget = Ftarget))
}
Pvals <- seq(0,1,length.out = 1000)
Tier3Ftargets <- sapply(Pvals, function(x) tier3hcr_fun(Pcur = x, Plimit = 0.2, Alpha = 0.05)$Ftarget)
Tier3Flimits <- sapply(Pvals, function(x) tier3hcr_fun(Pcur = x, Plimit = 0.2, Alpha = 0.05)$Flimit)
Tier3FtargetsATF <- sapply(Pvals, function(x) tier3hcr_fun(Pcur = x, Plimit = 0, Alpha = 0.05)$Ftarget)
Tier3FlimitsATF <- sapply(Pvals, function(x) tier3hcr_fun(Pcur = x, Plimit = 0, Alpha = 0.05)$Flimit)
SESSFCat1Ftargets <- sapply(Pvals, function(x) sessfcat1hcr_fun(Pcur = x)$Ftarget)
SESSFCat1Flimits <- sapply(Pvals, function(x) sessfcat1hcr_fun(Pcur = x)$Flimit)
PFMCCat1Ftargets <- sapply(Pvals, function(x) pfmccat1hcr_fun(Pcur = x)$Ftarget)
PFMCCat1Flimits <- sapply(Pvals, function(x) pfmccat1hcr_fun(Pcur = x)$Flimit)
PFMCCat1FtargetsFlatfish <- sapply(Pvals, function(x) pfmccat1hcr_fun(Pcur = x, Ptarget = 0.25, Plimit = 0.05, Flimit = F30, sigma = 0.5, Pstar = 0.45)$Ftarget)
#--------------------------
# Plot it
par(mar = c(3, 3, 0.5, 0.5))
# Colors (by EM/HCR)
MPcols <- gmri_pal("mixed")(10)[1:8]
plot(NA,NA, ylim = c(0, 1.4), xlim = c(0,1), ylab = NA, yaxt = "na", xlab = "Depletion")
mtext(side = 2, "Fishing mortality (F)", line = 1.5)
mtext(side = 1, "Relative depletion", line = 2)
# abline(h = Tier3Ftargets[length(Tier3Ftargets)], lwd = 3, col = SamplingCol[4])
# - Tier 3
lines(x = Pvals, y = Tier3Ftargets, col = MPcols[1], lwd = 3, lty = 2)
lines(x = Pvals, y = Tier3FtargetsATF, col = MPcols[1], lwd = 3, lty = 1)
text(x=Pvals[1000], y = Tier3Ftargets[1000]+0.07, expression('1) F'["40%"]), offset = -2,pos = 4, col = MPcols[1])
#lines(x = Pvals, y = Tier3Flimits, col = MPcols[1], lwd = 3, lty = 2)
# - Cat 1
# -- 40-10
lines(x = Pvals, y = PFMCCat1Ftargets, col = MPcols[3], lwd = 3, lty = 1)
text(x=Pvals[900], y = PFMCCat1Ftargets[1000]+0.07, expression(paste("2a) ", Phi,'(0.45, F'["45%"],", 0.5)")), offset = -6,pos = 4, col = MPcols[3])
#lines(x = Pvals, y = PFMCCat1Flimits, col = 1, lwd = 3, lty = 2)
# -- 25-5
lines(x = Pvals, y = PFMCCat1FtargetsFlatfish, col = MPcols[4], lwd = 3, lty = 1)
text(x=Pvals[900], y = PFMCCat1FtargetsFlatfish[1000]+0.07, expression(paste("2b) ", Phi,'(0.45, F'["30%"],", 0.5)")), offset = -6,pos = 4, col = MPcols[4])
#lines(x = Pvals, y = PFMCCat1Flimits, col = MPcols[3], lwd = 3, lty = 2)
# - Tier 1
lines(x = Pvals, y = SESSFCat1Ftargets, col = MPcols[5], lwd = 3, lty = 1)
text(x=0.4, y = SESSFCat1Ftargets[1000]+0.07, expression('3) F'["48%"]), offset = 0,pos = 4, col = MPcols[5])
# - F40
abline(h = 0.75 * F40, col = MPcols[7], lwd = 3)
text(x=Pvals[1000], y = 0.75 * F40-0.07, expression('4) 0.75 * F'["40%"]), offset = -6 ,pos = 4, col = MPcols[7])
legend("bottomright", c("NPFMC", "PFMC 40-10", "PFMC 25-5", "SESSF", "NEFMC (Fspr)"), col = c(MPcols[1], MPcols[3], MPcols[4], MPcols[5], MPcols[7]), lty = 1, lwd = 4, bty = "n")
