quiet = TRUE,
)
# * Get OM quantities ----
# - Save estimated parameters
om_use$estimated_params <- om_use$obj$env$parList(om_use$obj$env$last.par.best)
# - Get quantities
quantities <- om_use$obj$report(om_use$obj$env$last.par.best)
# -- Rename jnll
colnames(quantities$jnll_comp) <- paste0("Sp/Srv/Fsh_", 1:ncol(quantities$jnll_comp))
rownames(quantities$jnll_comp) <- c(
"Survey biomass",
"Total catch",
"Age/length composition data",
"Sex ratio",
"Non-parametric selectivity",
"Selectivity deviates",
"Selectivity normalization",
"Catchability prior",
"Catchability deviates",
"Stock-recruit prior",
"Recruitment deviates",
"Initial abundance deviates",
"Fishing mortality deviates",
"SPR Calculation",
"Zero n-at-age penalty",
"M prior",
"Ration",
"Ration penalties",
"Stomach content proportion by weight"
)
colnames(quantities$biomassSSB) <- om_use$data_list$styr:om_use$data_list$projyr
colnames(quantities$R) <- om_use$data_list$styr:om_use$data_list$projyr
rownames(quantities$biomassSSB) <- om_use$data_list$spnames
rownames(quantities$R) <- om_use$data_list$spnames
# -- Save derived quantities
om_use$quantities <- quantities
# ------------------------------------------------------------
# 6.3) REFIT ESTIMATION MODEL AND HCR ----
# ------------------------------------------------------------
# - Simulate new survey and comp data
sim_dat <- sim_mod(om_use, simulate = simulate_data)
years_include <- sample_yrs[which(sample_yrs$Year > em_use$data_list$endyr & sample_yrs$Year <= assess_yrs[k]),]
# -- Add newly simulated survey data to EM
new_srv_biom <- sim_dat$srv_biom[which(abs(sim_dat$srv_biom$Year) %in% years_include$Year & sim_dat$srv_biom$Fleet_code %in% years_include$Fleet_code),]
new_srv_biom$Year <- -new_srv_biom$Year
em_use$data_list$srv_biom <- rbind(em_use$data_list$srv_biom, new_srv_biom)
em_use$data_list$srv_biom <- em_use$data_list$srv_biom[
with(em_use$data_list$srv_biom, order(Fleet_code, abs(Year))),]
# -- Add newly simulated comp data to EM
new_comp_data <- sim_dat$comp_data[which(abs(sim_dat$comp_data$Year) %in% years_include$Year & sim_dat$comp_data$Fleet_code %in% years_include$Fleet_code),]
new_comp_data$Year <- -new_comp_data$Year
new_comp_data$Sample_size <- new_comp_data$Sample_size * as.numeric(rowSums(new_comp_data[,9:ncol(new_comp_data)]) > 0) # Set sample size to 0 if catch is 0
new_comp_data[,9:ncol(new_comp_data)] <- new_comp_data[,9:ncol(new_comp_data)] + 1 * as.numeric(new_comp_data$Sample_size == 0) # Set all values to 1 if catch is 0
em_use$data_list$comp_data <- rbind(em_use$data_list$comp_data, new_comp_data)
em_use$data_list$comp_data <- em_use$data_list$comp_data[
with(em_use$data_list$comp_data, order(Fleet_code, abs(Year))),]
# Update end year and re-estimate
em_use$data_list$endyr <- assess_yrs[k]
# Update parameters
# -- F_dev
em_use$estimated_params$F_dev <- cbind(em_use$estimated_params$F_dev, matrix(0, nrow= nrow(em_use$estimated_params$F_dev), ncol = length(new_years)))
# -- Time-varying survey catachbilitiy - Assume last year - filled by columns
em_use$estimated_params$ln_srv_q_dev <- cbind(em_use$estimated_params$ln_srv_q_dev, matrix(em_use$estimated_params$ln_srv_q_dev[,ncol(em_use$estimated_params$ln_srv_q_dev)], nrow= nrow(em_use$estimated_params$ln_srv_q_dev), ncol = length(new_years)))
# -- Time-varing selectivity - Assume last year - filled by columns
ln_sel_slp_dev = array(0, dim = c(2, nflts, 2, nyrs_hind + length(new_years)))  # selectivity deviations paramaters for logistic
sel_inf_dev = array(0, dim = c(2, nflts, 2, nyrs_hind + length(new_years)))  # selectivity deviations paramaters for logistic
# sel_coff_dev = array(0, dim = c(nflts, 2, nselages_om, nyrs_hind + length(new_years)))  # selectivity deviations paramaters for non-parameteric
ln_sel_slp_dev[,,,1:nyrs_hind] <- em_use$estimated_params$ln_sel_slp_dev
sel_inf_dev[,,,1:nyrs_hind] <- em_use$estimated_params$sel_inf_dev
# sel_coff_dev[,,,1:nyrs_hind] <- em_use$estimated_params$# sel_coff_dev
# - Initialize new years with last year
ln_sel_slp_dev[,,,(nyrs_hind + 1):(nyrs_hind + length(new_years))] <- ln_sel_slp_dev[,,,nyrs_hind]
sel_inf_dev[,,,(nyrs_hind + 1):(nyrs_hind + length(new_years))] <- sel_inf_dev[,,,nyrs_hind]
# sel_coff_dev[,,,(nyrs_hind + 1):(nyrs_hind + length(new_years))] <- # sel_coff_dev[,,,nyrs_hind]
em_use$estimated_params$ln_sel_slp_dev <- ln_sel_slp_dev
em_use$estimated_params$sel_inf_dev <- sel_inf_dev
# em_use$estimated_params$# sel_coff_dev <- # sel_coff_dev
# Restimate
em_use <- fit_mod(
data_list = em_use$data_list,
inits = em_use$estimated_params,
map =  NULL,
bounds = NULL,
file = NULL,
estimateMode = ifelse(em_use$data_list$estimateMode < 3, 0, em_use$data_list$estimateMode), # Run hindcast and projection, otherwise debug
HCR = build_hcr(HCR = em_use$data_list$HCR, # Tier3 HCR
DynamicHCR = em_use$data_list$DynamicHCR,
FsprTarget = em_use$data_list$FsprTarget,
FsprLimit = em_use$data_list$FsprLimit,
Ptarget = em_use$data_list$Ptarget,
Plimit = em_use$data_list$Plimit,
Alpha = em_use$data_list$Alpha,
Pstar = em_use$data_list$Pstar,
Sigma = em_use$data_list$Sigma,
Fmult = em_use$data_list$Fmult
),
recFun = build_srr(srr_fun = em_use$data_list$srr_fun,
srr_pred_fun = em_use$data_list$srr_pred_fun,
proj_mean_rec = em_use$data_list$proj_mean_rec,
srr_meanyr = em_use$data_list$endyr, # Update end year
srr_est_mode  = em_use$data_list$srr_est_mode ,
srr_prior_mean = em_use$data_list$srr_prior_mean,
srr_prior_sd = em_use$data_list$srr_prior_sd,
Bmsy_lim = em_use$data_list$Bmsy_lim,
srr_env_indices = em_use$data_list$srr_env_indices),
M1Fun =     build_M1(M1_model= em_use$data_list$M1_model,
updateM1 = FALSE,
M1_use_prior = em_use$data_list$M1_use_prior,
M2_use_prior = em_use$data_list$M2_use_prior,
M1_prior_mean = em_use$data_list$M1_prior_mean,
M1_prior_sd = em_use$data_list$M1_prior_sd),
random_rec = em_use$data_list$random_rec,
niter = em_use$data_list$niter,
msmMode = em_use$data_list$msmMode,
avgnMode = em_use$data_list$avgnMode,
suitMode = em_use$data_list$suitMode,
suit_meanyr = em_use$data_list$suit_meanyr,
initMode = em_use$data_list$initMode,
phase = NULL,
loopnum = loopnum,
getsd = FALSE,
verbose = 0)
# plot_biomass(list(em_use, om_use), model_names = c("EM", "OM"))
# End year of assessment
# - Remove unneeded bits for memory reasons
em_use$initial_params <- NULL
em_use$bounds <- NULL
em_use$map <- NULL
em_use$obj <- NULL
em_use$opt <- NULL
em_use$sdrep <- NULL
em_use$quantities[names(em_use$quantities) %!in% c("fsh_bio_hat",
"fsh_log_sd_hat",
"srv_bio_hat",
"srv_log_sd_hat",
"depletion",
"depletionSSB",
"biomass",
"biomassSSB",
"BO",
"SB0",
"SBF",
"F_spp",
"R",
"M1",
"M",
"mean_rec",
"DynamicB0",
"DynamicSB0",
"DynamicSBF",
"SPR0",
"SPRlimit",
"SPRtarget",
"Ftarget",
"Flimit")] <- NULL
sim_list$EM[[k+1]] <- em_use
#sim_list$OM[[k+1]] <- om_use
message(paste0("Sim ",sim, " - EM Year ", assess_yrs[k], " COMPLETE"))
}
# 7) Save ----
# * Save sims ----
sim_list$OM <- om_use # OM
sim_list$OM_no_F <- Rceattle::remove_F(om_use) # OM with no Fishing
names(sim_list$EM) <- c("EM", paste0("OM_Sim_",sim,". EM_yr_", assess_yrs))
#names(sim_list$OM) <- c("OM", paste0("OM_Sim_",sim,". OM_yr_", assess_yrs))
if(!is.null(dir)){ # Save
dir.create(file.path(getwd(), dir), showWarnings = FALSE, recursive = TRUE)
saveRDS(sim_list, file = paste0(dir, "/", file, "EMs_from_OM_Sim_",sim, ".rds"))
sim_list <- NULL
} else{
sim_list # Return simlist
}
} # End sim loop
# When you're done, clean up the cluster
stopImplicitCluster()
if(is.null(dir)){
return(sim_list)
}
}
# -- No F
# - MS-OM: SS-EM No F
start_time <- Sys.time()
mse1 <- mse_run_parallel_fast(om = ss_run, em = ss_run_Tier3, nsim = 5, assessment_period = 1, sampling_period = 1, simulate_data = TRUE, sample_rec = TRUE)
end_time <- Sys.time()
# -- No F
# - MS-OM: SS-EM No F
start_time2 <- Sys.time()
mse2 <- mse_run_parallel(om = ss_run, em = ss_run_Tier3, nsim = 5, assessment_period = 1, sampling_period = 1, simulate_data = TRUE, sample_rec = TRUE)
end_time2 <- Sys.time()
end_time-start_time
end_time2-start_time2
plot_catch(list(mse1[[1]]$OM, mse2[[1]]$OM))
remove.packages("Rceattle")
library(Rceattle)
library(Rceattle)
################################################
# Data ----
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
BS2017SS$fleet_control$proj_F_prop <-rep(1,7)
################################################
# Estimation ----
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# -- NPFMC Tier 3
ss_run_Tier3 <- Rceattle::fit_mod(data_list = BS2017SS,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 5, # Tier3 HCR
FsprTarget = 0.4, # F40%
FsprLimit = 0.35, # F35%
Plimit = 0.2, # No fishing when SB<SB20
Alpha = 0.05),
msmMode = 0, # Single species mode
verbose = 1)
# -- NPFMC Tier 3 HCRs
# - MS-OM: SS-EM Tier 3 HCR
mse3 <- mse_run_parallel_fast(om = ss_run, em = ss_run_Tier3, nsim = 5, assessment_period = 1, sampling_period = 1, simulate_data = TRUE, sample_rec = TRUE)
library(Rceattle)
################################################
# Data ----
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
BS2017SS$fleet_control$proj_F_prop <-rep(1,7)
################################################
# Estimation ----
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Estimate single-species and estimate M
mydata_M <- BS2017SS
mydata_M$est_M1 <- c(1,1,1)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# For the a multispecies model starting from the single species parameters, the following can be specified to load the data:
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$est_M1 <- c(1,1,1) # Estimate residual M
BS2017MS$projyr <- 2060
BS2017MS$fleet_control$proj_F_prop <-rep(1,7)
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# We can plot both runs as well:
mod_list <- list(ss_run, ss_run_M, ms_run)
mod_names <- c("SS", "SS-M", "MS")
# Plot biomass trajectory
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names, add_ci = TRUE)
################################################
# Multi-species harvest control rules ----
################################################
# -- F that acheives 40% of SB0, where SB0 is derived from projecting all species simultaneously under no fishing
ms_run_fb40 <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 0, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
HCR = build_hcr(HCR = 3, # Constant F HCR
DynamicHCR = FALSE, # Use dynamic reference points
FsprTarget = 0.4), # F that achieves 40% SB0
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# -- F that acheives 40% of SB0, where SB0 is derived from first projecting arrowtooth and cod under no fishing, then projecting pollock under no fishing and cod/arrowtooth at SB40.
ms_run_fb40iter <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 0, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
HCR = build_hcr(HCR = 3, # Constant F HCR
DynamicHCR = FALSE, # Use dynamic reference points
FsprTarget = 0.4,
HCRorder = c(2,1,1)), # F that achieves 40% SB0
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# -- Multi-species CMSY
ms_run_cmsy <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 0, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
HCR = build_hcr(HCR = 1),
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# -- Multi-species CMSY, constrained so that species don't fall below 20% SB0
# -- SB0 is derived from projecting all species simultaneously under no fishing
ms_run_concmsy <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 0, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
HCR = build_hcr(HCR = 1,
Plimit = 0.35),
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# -- NPFMC Tier 3 HCRs
# - MS-OM: SS-EM Tier 3 HCR
start_time <- Sys.time()
mse3 <- mse_run_parallel_fast(om = ms_run, em = ms_run_fb40iter, nsim = 5, assessment_period = 1, sampling_period = 1, simulate_data = TRUE, sample_rec = TRUE)
end_time <- Sys.time()
start_time2 <- Sys.time()
mse3a <- mse_run_parallel(om = ms_run, em = ms_run_fb40iter, nsim = 5, assessment_period = 1, sampling_period = 1, simulate_data = TRUE, sample_rec = TRUE)
end_time2 <- Sys.time()
end_time2 - start_time2
end_time - start_time
remove.packages("Rceattle")
library(Rceattle)
library(Rceattle)
################################################
# Data ----
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
BS2017SS$fleet_control$proj_F_prop <-rep(1,7)
################################################
# Estimation ----
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
ss_run <- Rceattle::fit_mod(data_list = BS2017SS,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# Estimate single-species and estimate M
mydata_M <- BS2017SS
mydata_M$est_M1 <- c(1,1,1)
ss_run_M <- Rceattle::fit_mod(data_list = mydata_M,
inits = ss_run$estimated_params, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# For the a multispecies model starting from the single species parameters, the following can be specified to load the data:
data("BS2017MS") # Note: the only difference is the residual mortality (M1_base) is lower
BS2017MS$est_M1 <- c(1,1,1) # Estimate residual M
BS2017MS$projyr <- 2060
BS2017MS$fleet_control$proj_F_prop <-rep(1,7)
ms_run <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# We can plot both runs as well:
mod_list <- list(ss_run, ss_run_M, ms_run)
mod_names <- c("SS", "SS-M", "MS")
# Plot biomass trajectory
plot_biomass(Rceattle = mod_list, model_names = mod_names)
plot_recruitment(Rceattle = mod_list, model_names = mod_names, add_ci = TRUE)
################################################
# Multi-species harvest control rules ----
################################################
# -- F that acheives 40% of SB0, where SB0 is derived from projecting all species simultaneously under no fishing
ms_run_fb40 <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 0, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
HCR = build_hcr(HCR = 3, # Constant F HCR
DynamicHCR = FALSE, # Use dynamic reference points
FsprTarget = 0.4), # F that achieves 40% SB0
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# -- F that acheives 40% of SB0, where SB0 is derived from first projecting arrowtooth and cod under no fishing, then projecting pollock under no fishing and cod/arrowtooth at SB40.
ms_run_fb40iter <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 0, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
HCR = build_hcr(HCR = 3, # Constant F HCR
DynamicHCR = FALSE, # Use dynamic reference points
FsprTarget = 0.4,
HCRorder = c(2,1,1)), # F that achieves 40% SB0
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# -- Multi-species CMSY
ms_run_cmsy <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 0, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
HCR = build_hcr(HCR = 1),
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# -- Multi-species CMSY, constrained so that species don't fall below 20% SB0
# -- SB0 is derived from projecting all species simultaneously under no fishing
ms_run_concmsy <- Rceattle::fit_mod(data_list = BS2017MS,
inits = ss_run_M$estimated_params, # Initial parameters from single species ests
file = NULL, # Don't save
estimateMode = 0, # Estimate hindcast only
niter = 3, # 10 iterations around population and predation dynamics
random_rec = FALSE, # No random recruitment
HCR = build_hcr(HCR = 1,
Plimit = 0.35),
msmMode = 1, # MSVPA based
suitMode = 0, # empirical suitability
verbose = 1)
# -- Plot
mod_list <- list(ms_run_fb40, ms_run_fb40iter, ms_run_cmsy, ms_run_concmsy)
model_names <- c("F40","F40 - iter", "MS-CMSY", "Constrained CMSY")
plot_biomass(mod_list, model_names = model_names, incl_proj = TRUE)
plot_ssb(mod_list, model_names = model_names, incl_proj = TRUE)
plot_recruitment(mod_list, model_names = model_names, incl_proj = TRUE)
plot_catch(mod_list, model_names = model_names, incl_proj = TRUE)
# -- NPFMC Tier 3 HCRs
# - MS-OM: SS-EM Tier 3 HCR
start_time <- Sys.time()
mse3 <- mse_run_parallel_fast(om = ms_run, em = ms_run_fb40iter, nsim = 5, assessment_period = 1, sampling_period = 1, simulate_data = TRUE, sample_rec = TRUE)
end_time <- Sys.time()
end_time - start_time
start_time2 <- Sys.time()
mse3a <- mse_run_parallel(om = ms_run, em = ms_run_fb40iter, nsim = 5, assessment_period = 1, sampling_period = 1, simulate_data = TRUE, sample_rec = TRUE)
end_time2 <- Sys.time()
end_time2 - start_time2
library(Rceattle)
library(Rceattle)
################################################
# Data ----
################################################
# Example
# To run the 2017 single species assessment for the Bering Sea, a data file must first be loaded:
data(BS2017SS) # ?BS2017SS for more information on the data
BS2017SS$projyr <- 2060
# Write data to excel
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
# Change the data how you want in excel
# Read the data back in
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
################################################
# Estimation ----
################################################
# Then the model can be fit by setting `msmMode = 0` using the `Rceattle` function:
mydata$fleet_control$proj_F_prop <-rep(1,7)
ss_run <- Rceattle::fit_mod(data_list = mydata,
inits = NULL, # Initial parameters = 0
file = NULL, # Don't save
estimateMode = 1, # Estimate hindcast only
random_rec = FALSE, # No random recruitment
msmMode = 0, # Single species mode
phase = "default",
verbose = 1)
# -- PFMC Category 1
ss_run_Cat1 <- Rceattle::fit_mod(data_list = mydata,
inits = ss_run$estimated_params, # Initial parameters from ss_run
estimateMode = 2, # Run projection only
HCR = build_hcr(HCR = 6, # Cat 1 HCR
FsprLimit = 0.45, # F45%
Ptarget = 0.4, # Target is 40% B0
Plimit = 0.1, # No fishing when SB<SB10
Pstar = 0.45,
Sigma = 0.5),
msmMode = 0, # Single species mode
verbose = 1)
ss_run_Cat1$quantities$SB0
remove.packages("Rceattle")
library(Rceattle)
