---
title: "Example 1 - basics"
format: html
editor: visual
---

## Overview

In this vignette we walk through fitting three models using the `Rceattle` package to run single- and multi-species stock assessment models. Rceattle is based on Holsman et al. (2016) and Adams et al. (2022) to fit single- and multi-species age structured models in TMB. The code base has been inspired by VAST, WHAM, and other TMB based packages and generalized for flexiblly fitting models with a variable number of species, surveys, and fishing fleets. In this example we apply Rceattle to walleye pollock, arrowtooth flounder, and Pacific cod in the Gulf of Alaska and Eastern Bering Sea. Here, we demonstrate the basic workflow:

1.  Install `Rceattle`

2.  Load `Rceattle` and associated excel data

3.  Fit assessment models:

-   model 1: three single-species assessment models jointly estimated with recruitment estimated as penalized effects;

-   model 2: as model 1, but with natural morality estimated for each species;

-   model 3: as model 2, but with recruitment estimated as random effects;

-   model 4: full multi-species assessment models with time- and age- varying natural mortality due to predation.

5.  Compare models by AIC and Mohn's rho (retrospective analysis)

6.  Review plots of input data, diagnostics, and results.

## 1. Installation

`Rceattle` and associated dependencies and can be installed as follows:

```{r}
install.packages("pacman")
install.packages("TMB", type = "source")
install.packages("Matrix", type = "source")
pacman::p_load(dplyr,
               ggplot2,
               MASS,
               oce,
               readxl,
               TMB,
               devtools,
               writexl,
               reshape2,
               gplots,
               tidyr,
               testthat,
               foreach,
               R.utils,
               knitr,
               doParallel)
devtools::install_github("kaskr/TMB_contrib_R/TMBhelper")
devtools::install_github("grantdadams/Rceattle")

```

## 2. Data

To run `Rceattle` a data file must first be loaded. The data files from the 2017 single- and multi-species assessments for the Bering Sea is already loaded within the `Rceattle` package:

```{r}
library(Rceattle)
data("BS2017SS") # Single-species data. ?BS2017SS for more information on the data 
data("BS2017MS") # Multi-species data. Note: the only difference is the residual mortality (M1_base) is lower
```

The data files can be written to excel, modified within excel, and read back into `R` as follows:

```{r}
Rceattle::write_data(data_list = BS2017SS, file = "BS2017SS.xlsx")
mydata <- Rceattle::read_data( file = "BS2017SS.xlsx")
```

A description of the inputs and file structure can be found on the first sheet (`meta_data`) and the associated help function `?BS2017SS`.

## 3. Fit models

Models can be fit using the `fit_mod` function. For the first model we use fit three single-species model jointly with no stock-recruit curve and natural mortality is fixed as the input values (`mydata$M1_base`). The model has 7 fleets: 3 fishing fleets that target each species individually and 4 surveys (see `mydata$fleet_control`). The single-species model can be fit by setting `msmMode = 0` using the `Rceattle` function:

```{r}
model_1 <- Rceattle::fit_mod(data_list = mydata,
                            inits = NULL, # Initial parameters = 0
                            file = NULL, # Don't save
                            estimateMode = 0, # Estimate
                            random_rec = FALSE, # No random recruitment
                            msmMode = 0, # Penalized likelihood
                            phase = "default",
                            verbose = 1)
```

Alternatively, we can estimate natural mortality using the `build_M1` function, where setting `M1_model = 1` estimates a single M for each species. Here, we also begin estimation at the maximum likelihood estimates from `model_1` using the `inits` argument:

```{r}
model_2 <- Rceattle::fit_mod(data_list = mydata,
                              inits = model_1$estimated_params, # Start estimation at model 1's MLEs
                              file = NULL, # Don't save
                              estimateMode = 0, # Estimate
                              M1Fun = build_M1(M1_model = 1,
                                               M1_use_prior = FALSE,
                                               M2_use_prior = FALSE),
                              random_rec = FALSE, # Penalized likelihood
                              msmMode = 0, # Single species mode
                              phase = "default",
                              verbose = 1)
```

To estimate `model_2` where recruitment is treated as random effects we can use the `random_rec` argument. For this model we also don't phase estimation to decrease run-time:

```{r}
model_3 <- Rceattle::fit_mod(data_list = mydata,
                              inits = model_2$estimated_params, # Start estimation at model 2's MLEs
                              file = NULL, # Don't save
                              estimateMode = 0, # Estimate
                              M1Fun = build_M1(M1_model = 1,
                                               M1_use_prior = FALSE,
                                               M2_use_prior = FALSE),
                              random_rec = TRUE, # Random recruitment
                              msmMode = 0, # Single species mode
                              phase = NULL,
                              verbose = 1)
```

To estimate time- and age-varying natural mortality due to predation we can estimate the model in multi-species mode by setting `msmMode = 1`. This follows the MSVPA parameterization described in [Magnusson (1995)](https://link.springer.com/article/10.1007/BF00179756).

```{r}
model_4 <- Rceattle::fit_mod(data_list = BS2017MS,
                            inits = model_2$estimated_params, # Initial parameters from single species estimates
                            M1Fun = build_M1(M1_model = 1,
                                             updateM1 = TRUE,
                                             M1_use_prior = FALSE,
                                             M2_use_prior = FALSE),
                            file = NULL, # Don't save
                            estimateMode = 0, # Estimate
                            niter = 3, # 3 iterations around population and predation dynamics
                            random_rec = FALSE, # No random recruitment
                            msmMode = 1, # MSVPA based
                            suitMode = 0, # Empirical suitability
                            verbose = 1)
```

## 4. Compare models

We can compare models by evaluating the marginal or joint negative log-likelihood, AIC, and retrospective analysis. The likelihood based components all can be found in the model objects build above:

```{r, echo = FALSE}
# Evaluate 1 model
model_1$opt$AIC # AIC
model_1$opt$objective # Negative log-likelihood
model_1$quantities$jnll_comp # Negative log-likelihood components

# Compare AIC across penalized likelihood models
sapply(list(model_1, model_2, model_4), function(x) x$opt$AIC)

```

We can also look at retrospective bias in each assessment using the `retrospective` function, which creates a list of model objects and a data.frame with mohn's rho calculations.

```{r}
model_1_retro <- retrospective(model_1, peels = 10)
model_2_retro <- retrospective(model_2, peels = 10)
model_3_retro <- retrospective(model_3, peels = 10)
model_4_retro <- retrospective(model_4, peels = 10)

plot_biomass(model_1_retro$Rceattle_list, model_names = paste("Species ", 1:3, "; mohns =", round(model_1_retro$mohns[1,2:4], 3)))
```
